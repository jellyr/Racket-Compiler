utilities/interp-test @ utilities.rkt:334
test-name:
r4_9

** compiler  @ utilities.rkt:218
name:
assignment5 r4

** checking passes for test  @ utilities.rkt:219
test-name:
r4_9

utilities/read-program @ utilities.rkt:177
path:
tests/r4_9.rkt

utilities/read-program @ utilities.rkt:182
input-prog:
'(program
  (define (mapint
           (fun : (Integer -> Integer))
           (v : (Vector Integer Integer Integer)))
    :
    (Vector Integer Integer Integer)
    (vector
     (fun (vector-ref v 0))
     (fun (vector-ref v 1))
     (fun (vector-ref v 2))))
  (define (add1 (x : Integer)) : Integer (+ x 1))
  (let ((vec (vector 1 2 3)))
    (let ((vec2 (mapint add1 vec)))
      (+
       (vector-ref vec2 0)
       (+ (vector-ref vec2 1) (+ (vector-ref vec2 2) 33))))))


check passes: @ utilities.rkt:223
sexp:
'(program
  (define (mapint
           (fun : (Integer -> Integer))
           (v : (Vector Integer Integer Integer)))
    :
    (Vector Integer Integer Integer)
    (vector
     (fun (vector-ref v 0))
     (fun (vector-ref v 1))
     (fun (vector-ref v 2))))
  (define (add1 (x : Integer)) : Integer (+ x 1))
  (let ((vec (vector 1 2 3)))
    (let ((vec2 (mapint add1 vec)))
      (+
       (vector-ref vec2 0)
       (+ (vector-ref vec2 1) (+ (vector-ref vec2 2) 33))))))


running pass: uniquify @ utilities.rkt:241
input:
'(program
  (type Integer)
  (define (mapint
           (fun : (Integer -> Integer))
           (v : (Vector Integer Integer Integer)))
    :
    (Vector Integer Integer Integer)
    (has-type
     (vector
      (has-type
       ((has-type fun (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v (Vector Integer Integer Integer))
          (has-type 0 Integer))
         Integer))
       Integer)
      (has-type
       ((has-type fun (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v (Vector Integer Integer Integer))
          (has-type 1 Integer))
         Integer))
       Integer)
      (has-type
       ((has-type fun (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v (Vector Integer Integer Integer))
          (has-type 2 Integer))
         Integer))
       Integer))
     (Vector Integer Integer Integer)))
  (define (add1 (x : Integer))
    :
    Integer
    (has-type (+ (has-type x Integer) (has-type 1 Integer)) Integer))
  (has-type
   (let ((vec
          (has-type
           (vector
            (has-type 1 Integer)
            (has-type 2 Integer)
            (has-type 3 Integer))
           (Vector Integer Integer Integer))))
     (has-type
      (let ((vec2
             (has-type
              ((has-type
                mapint
                ((Integer -> Integer)
                 (Vector Integer Integer Integer)
                 ->
                 (Vector Integer Integer Integer)))
               (has-type add1 (Integer -> Integer))
               (has-type vec (Vector Integer Integer Integer)))
              (Vector Integer Integer Integer))))
        (has-type
         (+
          (has-type
           (vector-ref
            (has-type vec2 (Vector Integer Integer Integer))
            (has-type 0 Integer))
           Integer)
          (has-type
           (+
            (has-type
             (vector-ref
              (has-type vec2 (Vector Integer Integer Integer))
              (has-type 1 Integer))
             Integer)
            (has-type
             (+
              (has-type
               (vector-ref
                (has-type vec2 (Vector Integer Integer Integer))
                (has-type 2 Integer))
               Integer)
              (has-type 33 Integer))
             Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: uniquify @ utilities.rkt:245
output:
'(program
  (type Integer)
  (define (func12569
           (fun12572 : (Integer -> Integer))
           (v12571 : (Vector Integer Integer Integer)))
    :
    (Vector Integer Integer Integer)
    (has-type
     (vector
      (has-type
       ((has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 0 Integer))
         Integer))
       Integer)
      (has-type
       ((has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 1 Integer))
         Integer))
       Integer)
      (has-type
       ((has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 2 Integer))
         Integer))
       Integer))
     (Vector Integer Integer Integer)))
  (define (func12570 (x12573 : Integer))
    :
    Integer
    (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
  (has-type
   (let ((vec12574
          (has-type
           (vector
            (has-type 1 Integer)
            (has-type 2 Integer)
            (has-type 3 Integer))
           (Vector Integer Integer Integer))))
     (has-type
      (let ((vec212575
             (has-type
              ((has-type
                func12569
                ((Integer -> Integer)
                 (Vector Integer Integer Integer)
                 ->
                 (Vector Integer Integer Integer)))
               (has-type func12570 (Integer -> Integer))
               (has-type vec12574 (Vector Integer Integer Integer)))
              (Vector Integer Integer Integer))))
        (has-type
         (+
          (has-type
           (vector-ref
            (has-type vec212575 (Vector Integer Integer Integer))
            (has-type 0 Integer))
           Integer)
          (has-type
           (+
            (has-type
             (vector-ref
              (has-type vec212575 (Vector Integer Integer Integer))
              (has-type 1 Integer))
             Integer)
            (has-type
             (+
              (has-type
               (vector-ref
                (has-type vec212575 (Vector Integer Integer Integer))
                (has-type 2 Integer))
               Integer)
              (has-type 33 Integer))
             Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: reveal-functions @ utilities.rkt:241
input:
'(program
  (type Integer)
  (define (func12569
           (fun12572 : (Integer -> Integer))
           (v12571 : (Vector Integer Integer Integer)))
    :
    (Vector Integer Integer Integer)
    (has-type
     (vector
      (has-type
       ((has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 0 Integer))
         Integer))
       Integer)
      (has-type
       ((has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 1 Integer))
         Integer))
       Integer)
      (has-type
       ((has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 2 Integer))
         Integer))
       Integer))
     (Vector Integer Integer Integer)))
  (define (func12570 (x12573 : Integer))
    :
    Integer
    (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
  (has-type
   (let ((vec12574
          (has-type
           (vector
            (has-type 1 Integer)
            (has-type 2 Integer)
            (has-type 3 Integer))
           (Vector Integer Integer Integer))))
     (has-type
      (let ((vec212575
             (has-type
              ((has-type
                func12569
                ((Integer -> Integer)
                 (Vector Integer Integer Integer)
                 ->
                 (Vector Integer Integer Integer)))
               (has-type func12570 (Integer -> Integer))
               (has-type vec12574 (Vector Integer Integer Integer)))
              (Vector Integer Integer Integer))))
        (has-type
         (+
          (has-type
           (vector-ref
            (has-type vec212575 (Vector Integer Integer Integer))
            (has-type 0 Integer))
           Integer)
          (has-type
           (+
            (has-type
             (vector-ref
              (has-type vec212575 (Vector Integer Integer Integer))
              (has-type 1 Integer))
             Integer)
            (has-type
             (+
              (has-type
               (vector-ref
                (has-type vec212575 (Vector Integer Integer Integer))
                (has-type 2 Integer))
               Integer)
              (has-type 33 Integer))
             Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: reveal-functions @ utilities.rkt:245
output:
'(program
  (type Integer)
  (define (func12569
           (fun12572 : (Integer -> Integer))
           (v12571 : (Vector Integer Integer Integer)))
    :
    (Vector Integer Integer Integer)
    (has-type
     (vector
      (has-type
       (app
        (has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 0 Integer))
         Integer))
       Integer)
      (has-type
       (app
        (has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 1 Integer))
         Integer))
       Integer)
      (has-type
       (app
        (has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 2 Integer))
         Integer))
       Integer))
     (Vector Integer Integer Integer)))
  (define (func12570 (x12573 : Integer))
    :
    Integer
    (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
  (has-type
   (let ((vec12574
          (has-type
           (vector
            (has-type 1 Integer)
            (has-type 2 Integer)
            (has-type 3 Integer))
           (Vector Integer Integer Integer))))
     (has-type
      (let ((vec212575
             (has-type
              (app
               (has-type
                (function-ref func12569)
                ((Integer -> Integer)
                 (Vector Integer Integer Integer)
                 ->
                 (Vector Integer Integer Integer)))
               (has-type (function-ref func12570) (Integer -> Integer))
               (has-type vec12574 (Vector Integer Integer Integer)))
              (Vector Integer Integer Integer))))
        (has-type
         (+
          (has-type
           (vector-ref
            (has-type vec212575 (Vector Integer Integer Integer))
            (has-type 0 Integer))
           Integer)
          (has-type
           (+
            (has-type
             (vector-ref
              (has-type vec212575 (Vector Integer Integer Integer))
              (has-type 1 Integer))
             Integer)
            (has-type
             (+
              (has-type
               (vector-ref
                (has-type vec212575 (Vector Integer Integer Integer))
                (has-type 2 Integer))
               Integer)
              (has-type 33 Integer))
             Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: convert-to-closures @ utilities.rkt:241
input:
'(program
  (type Integer)
  (define (func12569
           (fun12572 : (Integer -> Integer))
           (v12571 : (Vector Integer Integer Integer)))
    :
    (Vector Integer Integer Integer)
    (has-type
     (vector
      (has-type
       (app
        (has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 0 Integer))
         Integer))
       Integer)
      (has-type
       (app
        (has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 1 Integer))
         Integer))
       Integer)
      (has-type
       (app
        (has-type fun12572 (Integer -> Integer))
        (has-type
         (vector-ref
          (has-type v12571 (Vector Integer Integer Integer))
          (has-type 2 Integer))
         Integer))
       Integer))
     (Vector Integer Integer Integer)))
  (define (func12570 (x12573 : Integer))
    :
    Integer
    (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
  (has-type
   (let ((vec12574
          (has-type
           (vector
            (has-type 1 Integer)
            (has-type 2 Integer)
            (has-type 3 Integer))
           (Vector Integer Integer Integer))))
     (has-type
      (let ((vec212575
             (has-type
              (app
               (has-type
                (function-ref func12569)
                ((Integer -> Integer)
                 (Vector Integer Integer Integer)
                 ->
                 (Vector Integer Integer Integer)))
               (has-type (function-ref func12570) (Integer -> Integer))
               (has-type vec12574 (Vector Integer Integer Integer)))
              (Vector Integer Integer Integer))))
        (has-type
         (+
          (has-type
           (vector-ref
            (has-type vec212575 (Vector Integer Integer Integer))
            (has-type 0 Integer))
           Integer)
          (has-type
           (+
            (has-type
             (vector-ref
              (has-type vec212575 (Vector Integer Integer Integer))
              (has-type 1 Integer))
             Integer)
            (has-type
             (+
              (has-type
               (vector-ref
                (has-type vec212575 (Vector Integer Integer Integer))
                (has-type 2 Integer))
               Integer)
              (has-type 33 Integer))
             Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: convert-to-closures @ utilities.rkt:245
output:
'(program
  (type Integer)
  (define (func12569
           (clos12578 : (Vector _))
           (fun12572 : (Integer -> Integer))
           (v12571 : (Vector Integer Integer Integer)))
    :
    (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))
    (has-type
     (vector
      (has-type
       (let ((g12579 (has-type fun12572 (Integer -> Integer))))
         (has-type
          (app
           (has-type
            (vector-ref
             (has-type g12579 (Vector (Integer -> Integer)))
             (has-type 0 Integer))
            (Integer -> Integer))
           (has-type g12579 (Vector _))
           (has-type
            (vector-ref
             (has-type v12571 (Vector Integer Integer Integer))
             (has-type 0 Integer))
            Integer))
          (Integer -> Integer)))
       (Integer -> Integer))
      (has-type
       (let ((g12580 (has-type fun12572 (Integer -> Integer))))
         (has-type
          (app
           (has-type
            (vector-ref
             (has-type g12580 (Vector (Integer -> Integer)))
             (has-type 0 Integer))
            (Integer -> Integer))
           (has-type g12580 (Vector _))
           (has-type
            (vector-ref
             (has-type v12571 (Vector Integer Integer Integer))
             (has-type 1 Integer))
            Integer))
          (Integer -> Integer)))
       (Integer -> Integer))
      (has-type
       (let ((g12581 (has-type fun12572 (Integer -> Integer))))
         (has-type
          (app
           (has-type
            (vector-ref
             (has-type g12581 (Vector (Integer -> Integer)))
             (has-type 0 Integer))
            (Integer -> Integer))
           (has-type g12581 (Vector _))
           (has-type
            (vector-ref
             (has-type v12571 (Vector Integer Integer Integer))
             (has-type 2 Integer))
            Integer))
          (Integer -> Integer)))
       (Integer -> Integer)))
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))))
  (define (func12570 (clos12582 : (Vector _)) (x12573 : Integer))
    :
    Integer
    (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
  (has-type
   (let ((vec12574
          (has-type
           (vector
            (has-type 1 Integer)
            (has-type 2 Integer)
            (has-type 3 Integer))
           (Vector Integer Integer Integer))))
     (has-type
      (let ((vec212575
             (has-type
              (let ((g12583
                     (has-type
                      (vector
                       (has-type
                        (function-ref func12569)
                        ((Vector _)
                         (Integer -> Integer)
                         (Vector Integer Integer Integer)
                         ->
                         (Vector
                          (Integer -> Integer)
                          (Integer -> Integer)
                          (Integer -> Integer)))))
                      (Vector
                       ((Vector _)
                        (Integer -> Integer)
                        (Vector Integer Integer Integer)
                        ->
                        (Vector
                         (Integer -> Integer)
                         (Integer -> Integer)
                         (Integer -> Integer)))))))
                (has-type
                 (app
                  (has-type
                   (vector-ref
                    (has-type
                     g12583
                     (Vector
                      ((Vector _)
                       (Integer -> Integer)
                       (Vector Integer Integer Integer)
                       ->
                       (Vector
                        (Integer -> Integer)
                        (Integer -> Integer)
                        (Integer -> Integer)))))
                    (has-type 0 Integer))
                   ((Vector _)
                    (Integer -> Integer)
                    (Vector Integer Integer Integer)
                    ->
                    (Vector
                     (Integer -> Integer)
                     (Integer -> Integer)
                     (Integer -> Integer))))
                  (has-type g12583 (Vector _))
                  (has-type
                   (vector
                    (has-type
                     (function-ref func12570)
                     ((Vector _) Integer -> Integer)))
                   (Vector ((Vector _) Integer -> Integer)))
                  (has-type vec12574 (Vector Integer Integer Integer)))
                 (Vector
                  ((Vector _)
                   (Integer -> Integer)
                   (Vector Integer Integer Integer)
                   ->
                   (Vector
                    (Integer -> Integer)
                    (Integer -> Integer)
                    (Integer -> Integer))))))
              (Vector
               ((Vector _)
                (Integer -> Integer)
                (Vector Integer Integer Integer)
                ->
                (Vector
                 (Integer -> Integer)
                 (Integer -> Integer)
                 (Integer -> Integer)))))))
        (has-type
         (+
          (has-type
           (vector-ref
            (has-type
             vec212575
             (Vector
              ((Vector _)
               (Integer -> Integer)
               (Vector Integer Integer Integer)
               ->
               (Vector
                (Integer -> Integer)
                (Integer -> Integer)
                (Integer -> Integer)))))
            (has-type 0 Integer))
           Integer)
          (has-type
           (+
            (has-type
             (vector-ref
              (has-type
               vec212575
               (Vector
                ((Vector _)
                 (Integer -> Integer)
                 (Vector Integer Integer Integer)
                 ->
                 (Vector
                  (Integer -> Integer)
                  (Integer -> Integer)
                  (Integer -> Integer)))))
              (has-type 1 Integer))
             Integer)
            (has-type
             (+
              (has-type
               (vector-ref
                (has-type
                 vec212575
                 (Vector
                  ((Vector _)
                   (Integer -> Integer)
                   (Vector Integer Integer Integer)
                   ->
                   (Vector
                    (Integer -> Integer)
                    (Integer -> Integer)
                    (Integer -> Integer)))))
                (has-type 2 Integer))
               Integer)
              (has-type 33 Integer))
             Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: flattens @ utilities.rkt:241
input:
'(program
  (type Integer)
  (define (func12569
           (clos12578 : (Vector _))
           (fun12572 : (Integer -> Integer))
           (v12571 : (Vector Integer Integer Integer)))
    :
    (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))
    (has-type
     (vector
      (has-type
       (let ((g12579 (has-type fun12572 (Integer -> Integer))))
         (has-type
          (app
           (has-type
            (vector-ref
             (has-type g12579 (Vector (Integer -> Integer)))
             (has-type 0 Integer))
            (Integer -> Integer))
           (has-type g12579 (Vector _))
           (has-type
            (vector-ref
             (has-type v12571 (Vector Integer Integer Integer))
             (has-type 0 Integer))
            Integer))
          (Integer -> Integer)))
       (Integer -> Integer))
      (has-type
       (let ((g12580 (has-type fun12572 (Integer -> Integer))))
         (has-type
          (app
           (has-type
            (vector-ref
             (has-type g12580 (Vector (Integer -> Integer)))
             (has-type 0 Integer))
            (Integer -> Integer))
           (has-type g12580 (Vector _))
           (has-type
            (vector-ref
             (has-type v12571 (Vector Integer Integer Integer))
             (has-type 1 Integer))
            Integer))
          (Integer -> Integer)))
       (Integer -> Integer))
      (has-type
       (let ((g12581 (has-type fun12572 (Integer -> Integer))))
         (has-type
          (app
           (has-type
            (vector-ref
             (has-type g12581 (Vector (Integer -> Integer)))
             (has-type 0 Integer))
            (Integer -> Integer))
           (has-type g12581 (Vector _))
           (has-type
            (vector-ref
             (has-type v12571 (Vector Integer Integer Integer))
             (has-type 2 Integer))
            Integer))
          (Integer -> Integer)))
       (Integer -> Integer)))
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))))
  (define (func12570 (clos12582 : (Vector _)) (x12573 : Integer))
    :
    Integer
    (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
  (has-type
   (let ((vec12574
          (has-type
           (vector
            (has-type 1 Integer)
            (has-type 2 Integer)
            (has-type 3 Integer))
           (Vector Integer Integer Integer))))
     (has-type
      (let ((vec212575
             (has-type
              (let ((g12583
                     (has-type
                      (vector
                       (has-type
                        (function-ref func12569)
                        ((Vector _)
                         (Integer -> Integer)
                         (Vector Integer Integer Integer)
                         ->
                         (Vector
                          (Integer -> Integer)
                          (Integer -> Integer)
                          (Integer -> Integer)))))
                      (Vector
                       ((Vector _)
                        (Integer -> Integer)
                        (Vector Integer Integer Integer)
                        ->
                        (Vector
                         (Integer -> Integer)
                         (Integer -> Integer)
                         (Integer -> Integer)))))))
                (has-type
                 (app
                  (has-type
                   (vector-ref
                    (has-type
                     g12583
                     (Vector
                      ((Vector _)
                       (Integer -> Integer)
                       (Vector Integer Integer Integer)
                       ->
                       (Vector
                        (Integer -> Integer)
                        (Integer -> Integer)
                        (Integer -> Integer)))))
                    (has-type 0 Integer))
                   ((Vector _)
                    (Integer -> Integer)
                    (Vector Integer Integer Integer)
                    ->
                    (Vector
                     (Integer -> Integer)
                     (Integer -> Integer)
                     (Integer -> Integer))))
                  (has-type g12583 (Vector _))
                  (has-type
                   (vector
                    (has-type
                     (function-ref func12570)
                     ((Vector _) Integer -> Integer)))
                   (Vector ((Vector _) Integer -> Integer)))
                  (has-type vec12574 (Vector Integer Integer Integer)))
                 (Vector
                  ((Vector _)
                   (Integer -> Integer)
                   (Vector Integer Integer Integer)
                   ->
                   (Vector
                    (Integer -> Integer)
                    (Integer -> Integer)
                    (Integer -> Integer))))))
              (Vector
               ((Vector _)
                (Integer -> Integer)
                (Vector Integer Integer Integer)
                ->
                (Vector
                 (Integer -> Integer)
                 (Integer -> Integer)
                 (Integer -> Integer)))))))
        (has-type
         (+
          (has-type
           (vector-ref
            (has-type
             vec212575
             (Vector
              ((Vector _)
               (Integer -> Integer)
               (Vector Integer Integer Integer)
               ->
               (Vector
                (Integer -> Integer)
                (Integer -> Integer)
                (Integer -> Integer)))))
            (has-type 0 Integer))
           Integer)
          (has-type
           (+
            (has-type
             (vector-ref
              (has-type
               vec212575
               (Vector
                ((Vector _)
                 (Integer -> Integer)
                 (Vector Integer Integer Integer)
                 ->
                 (Vector
                  (Integer -> Integer)
                  (Integer -> Integer)
                  (Integer -> Integer)))))
              (has-type 1 Integer))
             Integer)
            (has-type
             (+
              (has-type
               (vector-ref
                (has-type
                 vec212575
                 (Vector
                  ((Vector _)
                   (Integer -> Integer)
                   (Vector Integer Integer Integer)
                   ->
                   (Vector
                    (Integer -> Integer)
                    (Integer -> Integer)
                    (Integer -> Integer)))))
                (has-type 2 Integer))
               Integer)
              (has-type 33 Integer))
             Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: flattens @ utilities.rkt:245
output:
'(program
  (vec12574
   vec212575
   g12583
   g12586
   g12590
   g12589
   g12588
   g12597
   g12592
   g12596
   g12593
   g12595
   g12594)
  (type Integer)
  (defines
   (define (func12569
            (clos12578 : (Vector _))
            (fun12572 : (Integer -> Integer))
            (v12571 : (Vector Integer Integer Integer)))
     :
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))
     (g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598)
     (assign g12579 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12605
      (has-type
       (vector-ref
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12604
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 0 Integer))
       Integer))
     (assign
      g12606
      (has-type
       (app
        (has-type g12605 (Integer -> Integer))
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type g12604 Integer))
       (Integer -> Integer)))
     (assign g12580 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12602
      (has-type
       (vector-ref
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12601
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 1 Integer))
       Integer))
     (assign
      g12603
      (has-type
       (app
        (has-type g12602 (Integer -> Integer))
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type g12601 Integer))
       (Integer -> Integer)))
     (assign g12581 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12599
      (has-type
       (vector-ref
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12598
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 2 Integer))
       Integer))
     (assign
      g12600
      (has-type
       (app
        (has-type g12599 (Integer -> Integer))
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type g12598 Integer))
       (Integer -> Integer)))
     (assign
      g12607
      (has-type
       (vector
        (has-type g12606 (Integer -> Integer))
        (has-type g12603 (Integer -> Integer))
        (has-type g12600 (Integer -> Integer)))
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (return g12607))
   (define (func12570 (clos12582 : (Vector _)) (x12573 : Integer))
     :
     Integer
     (g12608)
     (assign
      g12608
      (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
     (return g12608)))
  (assign
   vec12574
   (has-type
    (vector (has-type 1 Integer) (has-type 2 Integer) (has-type 3 Integer))
    (Vector Integer Integer Integer)))
  (assign
   g12586
   (has-type
    (function-ref func12569)
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (assign
   g12583
   (has-type
    (vector
     (has-type
      g12586
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   g12590
   (has-type
    (vector-ref
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (assign
   g12588
   (has-type (function-ref func12570) ((Vector _) Integer -> Integer)))
  (assign
   g12589
   (has-type
    (vector (has-type g12588 ((Vector _) Integer -> Integer)))
    (Vector ((Vector _) Integer -> Integer))))
  (assign
   vec212575
   (has-type
    (app
     (has-type
      g12590
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
     (has-type vec12574 (Vector Integer Integer Integer)))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   g12592
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    Integer))
  (assign
   g12593
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 1 Integer))
    Integer))
  (assign
   g12594
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 2 Integer))
    Integer))
  (assign
   g12595
   (has-type (+ (has-type g12594 Integer) (has-type 33 Integer)) Integer))
  (assign
   g12596
   (has-type (+ (has-type g12593 Integer) (has-type g12595 Integer)) Integer))
  (assign
   g12597
   (has-type (+ (has-type g12592 Integer) (has-type g12596 Integer)) Integer))
  (return g12597))


running pass: expose-allocation @ utilities.rkt:241
input:
'(program
  (vec12574
   vec212575
   g12583
   g12586
   g12590
   g12589
   g12588
   g12597
   g12592
   g12596
   g12593
   g12595
   g12594)
  (type Integer)
  (defines
   (define (func12569
            (clos12578 : (Vector _))
            (fun12572 : (Integer -> Integer))
            (v12571 : (Vector Integer Integer Integer)))
     :
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))
     (g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598)
     (assign g12579 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12605
      (has-type
       (vector-ref
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12604
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 0 Integer))
       Integer))
     (assign
      g12606
      (has-type
       (app
        (has-type g12605 (Integer -> Integer))
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type g12604 Integer))
       (Integer -> Integer)))
     (assign g12580 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12602
      (has-type
       (vector-ref
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12601
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 1 Integer))
       Integer))
     (assign
      g12603
      (has-type
       (app
        (has-type g12602 (Integer -> Integer))
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type g12601 Integer))
       (Integer -> Integer)))
     (assign g12581 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12599
      (has-type
       (vector-ref
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12598
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 2 Integer))
       Integer))
     (assign
      g12600
      (has-type
       (app
        (has-type g12599 (Integer -> Integer))
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type g12598 Integer))
       (Integer -> Integer)))
     (assign
      g12607
      (has-type
       (vector
        (has-type g12606 (Integer -> Integer))
        (has-type g12603 (Integer -> Integer))
        (has-type g12600 (Integer -> Integer)))
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (return g12607))
   (define (func12570 (clos12582 : (Vector _)) (x12573 : Integer))
     :
     Integer
     (g12608)
     (assign
      g12608
      (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
     (return g12608)))
  (assign
   vec12574
   (has-type
    (vector (has-type 1 Integer) (has-type 2 Integer) (has-type 3 Integer))
    (Vector Integer Integer Integer)))
  (assign
   g12586
   (has-type
    (function-ref func12569)
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (assign
   g12583
   (has-type
    (vector
     (has-type
      g12586
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   g12590
   (has-type
    (vector-ref
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (assign
   g12588
   (has-type (function-ref func12570) ((Vector _) Integer -> Integer)))
  (assign
   g12589
   (has-type
    (vector (has-type g12588 ((Vector _) Integer -> Integer)))
    (Vector ((Vector _) Integer -> Integer))))
  (assign
   vec212575
   (has-type
    (app
     (has-type
      g12590
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
     (has-type vec12574 (Vector Integer Integer Integer)))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   g12592
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    Integer))
  (assign
   g12593
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 1 Integer))
    Integer))
  (assign
   g12594
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 2 Integer))
    Integer))
  (assign
   g12595
   (has-type (+ (has-type g12594 Integer) (has-type 33 Integer)) Integer))
  (assign
   g12596
   (has-type (+ (has-type g12593 Integer) (has-type g12595 Integer)) Integer))
  (assign
   g12597
   (has-type (+ (has-type g12592 Integer) (has-type g12596 Integer)) Integer))
  (return g12597))


running pass: expose-allocation @ utilities.rkt:245
output:
'(program
  (vec12574
   vec212575
   g12583
   g12586
   g12590
   g12589
   g12588
   g12597
   g12592
   g12596
   g12593
   g12595
   g12594)
  (type Integer)
  (defines
   (define (func12569
            (clos12578 : (Vector _))
            (fun12572 : (Integer -> Integer))
            (v12571 : (Vector Integer Integer Integer)))
     :
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))
     (g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598)
     (assign g12579 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12605
      (has-type
       (vector-ref
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12604
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 0 Integer))
       Integer))
     (assign
      g12606
      (has-type
       (app
        (has-type g12605 (Integer -> Integer))
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type g12604 Integer))
       (Integer -> Integer)))
     (assign g12580 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12602
      (has-type
       (vector-ref
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12601
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 1 Integer))
       Integer))
     (assign
      g12603
      (has-type
       (app
        (has-type g12602 (Integer -> Integer))
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type g12601 Integer))
       (Integer -> Integer)))
     (assign g12581 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12599
      (has-type
       (vector-ref
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12598
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 2 Integer))
       Integer))
     (assign
      g12600
      (has-type
       (app
        (has-type g12599 (Integer -> Integer))
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type g12598 Integer))
       (Integer -> Integer)))
     (has-type (if (collection-needed? 32) ((collect 32)) ()) Void)
     (assign
      g12607
      (has-type
       (allocate
        3
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (assign
      void12610
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 0 Integer)
        (has-type g12606 (Integer -> Integer)))
       Void))
     (assign
      void12611
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 1 Integer)
        (has-type g12603 (Integer -> Integer)))
       Void))
     (assign
      void12612
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 2 Integer)
        (has-type g12600 (Integer -> Integer)))
       Void))
     (return g12607))
   (define (func12570 (clos12582 : (Vector _)) (x12573 : Integer))
     :
     Integer
     (g12608)
     (assign
      g12608
      (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
     (return g12608)))
  (has-type (initialize 10000 10000) Void)
  (has-type (if (collection-needed? 32) ((collect 32)) ()) Void)
  (assign
   vec12574
   (has-type
    (allocate 3 (Vector Integer Integer Integer))
    (Vector Integer Integer Integer)))
  (assign
   void12613
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 0 Integer)
     (has-type 1 Integer))
    Void))
  (assign
   void12614
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 1 Integer)
     (has-type 2 Integer))
    Void))
  (assign
   void12615
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 2 Integer)
     (has-type 3 Integer))
    Void))
  (assign
   g12586
   (has-type
    (function-ref func12569)
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (has-type (if (collection-needed? 16) ((collect 16)) ()) Void)
  (assign
   g12583
   (has-type
    (allocate
     1
     (Vector
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   void12616
   (has-type
    (vector-set!
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer)
     (has-type
      g12586
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    Void))
  (assign
   g12590
   (has-type
    (vector-ref
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (assign
   g12588
   (has-type (function-ref func12570) ((Vector _) Integer -> Integer)))
  (has-type (if (collection-needed? 16) ((collect 16)) ()) Void)
  (assign
   g12589
   (has-type
    (allocate 1 (Vector ((Vector _) Integer -> Integer)))
    (Vector ((Vector _) Integer -> Integer))))
  (assign
   void12617
   (has-type
    (vector-set!
     (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
     (has-type 0 Integer)
     (has-type g12588 ((Vector _) Integer -> Integer)))
    Void))
  (assign
   vec212575
   (has-type
    (app
     (has-type
      g12590
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
     (has-type vec12574 (Vector Integer Integer Integer)))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   g12592
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    Integer))
  (assign
   g12593
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 1 Integer))
    Integer))
  (assign
   g12594
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 2 Integer))
    Integer))
  (assign
   g12595
   (has-type (+ (has-type g12594 Integer) (has-type 33 Integer)) Integer))
  (assign
   g12596
   (has-type (+ (has-type g12593 Integer) (has-type g12595 Integer)) Integer))
  (assign
   g12597
   (has-type (+ (has-type g12592 Integer) (has-type g12596 Integer)) Integer))
  (return g12597))


running pass: call-live-roots @ utilities.rkt:241
input:
'(program
  (vec12574
   vec212575
   g12583
   g12586
   g12590
   g12589
   g12588
   g12597
   g12592
   g12596
   g12593
   g12595
   g12594)
  (type Integer)
  (defines
   (define (func12569
            (clos12578 : (Vector _))
            (fun12572 : (Integer -> Integer))
            (v12571 : (Vector Integer Integer Integer)))
     :
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))
     (g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598)
     (assign g12579 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12605
      (has-type
       (vector-ref
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12604
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 0 Integer))
       Integer))
     (assign
      g12606
      (has-type
       (app
        (has-type g12605 (Integer -> Integer))
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type g12604 Integer))
       (Integer -> Integer)))
     (assign g12580 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12602
      (has-type
       (vector-ref
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12601
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 1 Integer))
       Integer))
     (assign
      g12603
      (has-type
       (app
        (has-type g12602 (Integer -> Integer))
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type g12601 Integer))
       (Integer -> Integer)))
     (assign g12581 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12599
      (has-type
       (vector-ref
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12598
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 2 Integer))
       Integer))
     (assign
      g12600
      (has-type
       (app
        (has-type g12599 (Integer -> Integer))
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type g12598 Integer))
       (Integer -> Integer)))
     (has-type (if (collection-needed? 32) ((collect 32)) ()) Void)
     (assign
      g12607
      (has-type
       (allocate
        3
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (assign
      void12610
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 0 Integer)
        (has-type g12606 (Integer -> Integer)))
       Void))
     (assign
      void12611
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 1 Integer)
        (has-type g12603 (Integer -> Integer)))
       Void))
     (assign
      void12612
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 2 Integer)
        (has-type g12600 (Integer -> Integer)))
       Void))
     (return g12607))
   (define (func12570 (clos12582 : (Vector _)) (x12573 : Integer))
     :
     Integer
     (g12608)
     (assign
      g12608
      (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
     (return g12608)))
  (has-type (initialize 10000 10000) Void)
  (has-type (if (collection-needed? 32) ((collect 32)) ()) Void)
  (assign
   vec12574
   (has-type
    (allocate 3 (Vector Integer Integer Integer))
    (Vector Integer Integer Integer)))
  (assign
   void12613
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 0 Integer)
     (has-type 1 Integer))
    Void))
  (assign
   void12614
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 1 Integer)
     (has-type 2 Integer))
    Void))
  (assign
   void12615
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 2 Integer)
     (has-type 3 Integer))
    Void))
  (assign
   g12586
   (has-type
    (function-ref func12569)
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (has-type (if (collection-needed? 16) ((collect 16)) ()) Void)
  (assign
   g12583
   (has-type
    (allocate
     1
     (Vector
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   void12616
   (has-type
    (vector-set!
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer)
     (has-type
      g12586
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    Void))
  (assign
   g12590
   (has-type
    (vector-ref
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (assign
   g12588
   (has-type (function-ref func12570) ((Vector _) Integer -> Integer)))
  (has-type (if (collection-needed? 16) ((collect 16)) ()) Void)
  (assign
   g12589
   (has-type
    (allocate 1 (Vector ((Vector _) Integer -> Integer)))
    (Vector ((Vector _) Integer -> Integer))))
  (assign
   void12617
   (has-type
    (vector-set!
     (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
     (has-type 0 Integer)
     (has-type g12588 ((Vector _) Integer -> Integer)))
    Void))
  (assign
   vec212575
   (has-type
    (app
     (has-type
      g12590
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
     (has-type vec12574 (Vector Integer Integer Integer)))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   g12592
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    Integer))
  (assign
   g12593
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 1 Integer))
    Integer))
  (assign
   g12594
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 2 Integer))
    Integer))
  (assign
   g12595
   (has-type (+ (has-type g12594 Integer) (has-type 33 Integer)) Integer))
  (assign
   g12596
   (has-type (+ (has-type g12593 Integer) (has-type g12595 Integer)) Integer))
  (assign
   g12597
   (has-type (+ (has-type g12592 Integer) (has-type g12596 Integer)) Integer))
  (return g12597))


running pass: call-live-roots @ utilities.rkt:245
output:
'(program
  (vec12574
   vec212575
   g12583
   g12586
   g12590
   g12589
   g12588
   g12597
   g12592
   g12596
   g12593
   g12595
   g12594)
  (type Integer)
  (defines
   (define (func12569
            (clos12578 : (Vector _))
            (fun12572 : (Integer -> Integer))
            (v12571 : (Vector Integer Integer Integer)))
     :
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))
     (g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598)
     (assign g12579 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12605
      (has-type
       (vector-ref
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12604
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 0 Integer))
       Integer))
     (call-live-roots
      (v12571)
      (assign
       g12606
       (has-type
        (app
         (has-type g12605 (Integer -> Integer))
         (has-type g12579 (Vector (Integer -> Integer)))
         (has-type g12604 Integer))
        (Integer -> Integer))))
     (assign g12580 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12602
      (has-type
       (vector-ref
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12601
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 1 Integer))
       Integer))
     (call-live-roots
      (v12571)
      (assign
       g12603
       (has-type
        (app
         (has-type g12602 (Integer -> Integer))
         (has-type g12580 (Vector (Integer -> Integer)))
         (has-type g12601 Integer))
        (Integer -> Integer))))
     (assign g12581 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12599
      (has-type
       (vector-ref
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12598
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 2 Integer))
       Integer))
     (call-live-roots
      ()
      (assign
       g12600
       (has-type
        (app
         (has-type g12599 (Integer -> Integer))
         (has-type g12581 (Vector (Integer -> Integer)))
         (has-type g12598 Integer))
        (Integer -> Integer))))
     (has-type
      (if (collection-needed? 32)
        ((call-live-roots () (has-type (collect 32) Void)))
        ())
      Void)
     (assign
      g12607
      (has-type
       (allocate
        3
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (assign
      void12610
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 0 Integer)
        (has-type g12606 (Integer -> Integer)))
       Void))
     (assign
      void12611
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 1 Integer)
        (has-type g12603 (Integer -> Integer)))
       Void))
     (assign
      void12612
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 2 Integer)
        (has-type g12600 (Integer -> Integer)))
       Void))
     (return g12607))
   (define (func12570 (clos12582 : (Vector _)) (x12573 : Integer))
     :
     Integer
     (g12608)
     (assign
      g12608
      (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
     (return g12608)))
  (has-type (initialize 10000 10000) Void)
  (has-type
   (if (collection-needed? 32)
     ((call-live-roots () (has-type (collect 32) Void)))
     ())
   Void)
  (assign
   vec12574
   (has-type
    (allocate 3 (Vector Integer Integer Integer))
    (Vector Integer Integer Integer)))
  (assign
   void12613
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 0 Integer)
     (has-type 1 Integer))
    Void))
  (assign
   void12614
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 1 Integer)
     (has-type 2 Integer))
    Void))
  (assign
   void12615
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 2 Integer)
     (has-type 3 Integer))
    Void))
  (assign
   g12586
   (has-type
    (function-ref func12569)
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (has-type
   (if (collection-needed? 16)
     ((call-live-roots (vec12574) (has-type (collect 16) Void)))
     ())
   Void)
  (assign
   g12583
   (has-type
    (allocate
     1
     (Vector
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   void12616
   (has-type
    (vector-set!
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer)
     (has-type
      g12586
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    Void))
  (assign
   g12590
   (has-type
    (vector-ref
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (assign
   g12588
   (has-type (function-ref func12570) ((Vector _) Integer -> Integer)))
  (has-type
   (if (collection-needed? 16)
     ((call-live-roots (vec12574 g12583) (has-type (collect 16) Void)))
     ())
   Void)
  (assign
   g12589
   (has-type
    (allocate 1 (Vector ((Vector _) Integer -> Integer)))
    (Vector ((Vector _) Integer -> Integer))))
  (assign
   void12617
   (has-type
    (vector-set!
     (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
     (has-type 0 Integer)
     (has-type g12588 ((Vector _) Integer -> Integer)))
    Void))
  (call-live-roots
   ()
   (assign
    vec212575
    (has-type
     (app
      (has-type
       g12590
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer))))
      (has-type
       g12583
       (Vector
        ((Vector _)
         (Integer -> Integer)
         (Vector Integer Integer Integer)
         ->
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))))
      (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
      (has-type vec12574 (Vector Integer Integer Integer)))
     (Vector
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))))
  (assign
   g12592
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    Integer))
  (assign
   g12593
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 1 Integer))
    Integer))
  (assign
   g12594
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 2 Integer))
    Integer))
  (assign
   g12595
   (has-type (+ (has-type g12594 Integer) (has-type 33 Integer)) Integer))
  (assign
   g12596
   (has-type (+ (has-type g12593 Integer) (has-type g12595 Integer)) Integer))
  (assign
   g12597
   (has-type (+ (has-type g12592 Integer) (has-type g12596 Integer)) Integer))
  (return g12597))


running pass: select instructions @ utilities.rkt:241
input:
'(program
  (vec12574
   vec212575
   g12583
   g12586
   g12590
   g12589
   g12588
   g12597
   g12592
   g12596
   g12593
   g12595
   g12594)
  (type Integer)
  (defines
   (define (func12569
            (clos12578 : (Vector _))
            (fun12572 : (Integer -> Integer))
            (v12571 : (Vector Integer Integer Integer)))
     :
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer))
     (g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598)
     (assign g12579 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12605
      (has-type
       (vector-ref
        (has-type g12579 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12604
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 0 Integer))
       Integer))
     (call-live-roots
      (v12571)
      (assign
       g12606
       (has-type
        (app
         (has-type g12605 (Integer -> Integer))
         (has-type g12579 (Vector (Integer -> Integer)))
         (has-type g12604 Integer))
        (Integer -> Integer))))
     (assign g12580 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12602
      (has-type
       (vector-ref
        (has-type g12580 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12601
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 1 Integer))
       Integer))
     (call-live-roots
      (v12571)
      (assign
       g12603
       (has-type
        (app
         (has-type g12602 (Integer -> Integer))
         (has-type g12580 (Vector (Integer -> Integer)))
         (has-type g12601 Integer))
        (Integer -> Integer))))
     (assign g12581 (has-type fun12572 (Integer -> Integer)))
     (assign
      g12599
      (has-type
       (vector-ref
        (has-type g12581 (Vector (Integer -> Integer)))
        (has-type 0 Integer))
       (Integer -> Integer)))
     (assign
      g12598
      (has-type
       (vector-ref
        (has-type v12571 (Vector Integer Integer Integer))
        (has-type 2 Integer))
       Integer))
     (call-live-roots
      ()
      (assign
       g12600
       (has-type
        (app
         (has-type g12599 (Integer -> Integer))
         (has-type g12581 (Vector (Integer -> Integer)))
         (has-type g12598 Integer))
        (Integer -> Integer))))
     (has-type
      (if (collection-needed? 32)
        ((call-live-roots () (has-type (collect 32) Void)))
        ())
      Void)
     (assign
      g12607
      (has-type
       (allocate
        3
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer))))
     (assign
      void12610
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 0 Integer)
        (has-type g12606 (Integer -> Integer)))
       Void))
     (assign
      void12611
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 1 Integer)
        (has-type g12603 (Integer -> Integer)))
       Void))
     (assign
      void12612
      (has-type
       (vector-set!
        (has-type
         g12607
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))
        (has-type 2 Integer)
        (has-type g12600 (Integer -> Integer)))
       Void))
     (return g12607))
   (define (func12570 (clos12582 : (Vector _)) (x12573 : Integer))
     :
     Integer
     (g12608)
     (assign
      g12608
      (has-type (+ (has-type x12573 Integer) (has-type 1 Integer)) Integer))
     (return g12608)))
  (has-type (initialize 10000 10000) Void)
  (has-type
   (if (collection-needed? 32)
     ((call-live-roots () (has-type (collect 32) Void)))
     ())
   Void)
  (assign
   vec12574
   (has-type
    (allocate 3 (Vector Integer Integer Integer))
    (Vector Integer Integer Integer)))
  (assign
   void12613
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 0 Integer)
     (has-type 1 Integer))
    Void))
  (assign
   void12614
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 1 Integer)
     (has-type 2 Integer))
    Void))
  (assign
   void12615
   (has-type
    (vector-set!
     (has-type vec12574 (Vector Integer Integer Integer))
     (has-type 2 Integer)
     (has-type 3 Integer))
    Void))
  (assign
   g12586
   (has-type
    (function-ref func12569)
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (has-type
   (if (collection-needed? 16)
     ((call-live-roots (vec12574) (has-type (collect 16) Void)))
     ())
   Void)
  (assign
   g12583
   (has-type
    (allocate
     1
     (Vector
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    (Vector
     ((Vector _)
      (Integer -> Integer)
      (Vector Integer Integer Integer)
      ->
      (Vector
       (Integer -> Integer)
       (Integer -> Integer)
       (Integer -> Integer))))))
  (assign
   void12616
   (has-type
    (vector-set!
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer)
     (has-type
      g12586
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))
    Void))
  (assign
   g12590
   (has-type
    (vector-ref
     (has-type
      g12583
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    ((Vector _)
     (Integer -> Integer)
     (Vector Integer Integer Integer)
     ->
     (Vector (Integer -> Integer) (Integer -> Integer) (Integer -> Integer)))))
  (assign
   g12588
   (has-type (function-ref func12570) ((Vector _) Integer -> Integer)))
  (has-type
   (if (collection-needed? 16)
     ((call-live-roots (vec12574 g12583) (has-type (collect 16) Void)))
     ())
   Void)
  (assign
   g12589
   (has-type
    (allocate 1 (Vector ((Vector _) Integer -> Integer)))
    (Vector ((Vector _) Integer -> Integer))))
  (assign
   void12617
   (has-type
    (vector-set!
     (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
     (has-type 0 Integer)
     (has-type g12588 ((Vector _) Integer -> Integer)))
    Void))
  (call-live-roots
   ()
   (assign
    vec212575
    (has-type
     (app
      (has-type
       g12590
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer))))
      (has-type
       g12583
       (Vector
        ((Vector _)
         (Integer -> Integer)
         (Vector Integer Integer Integer)
         ->
         (Vector
          (Integer -> Integer)
          (Integer -> Integer)
          (Integer -> Integer)))))
      (has-type g12589 (Vector ((Vector _) Integer -> Integer)))
      (has-type vec12574 (Vector Integer Integer Integer)))
     (Vector
      ((Vector _)
       (Integer -> Integer)
       (Vector Integer Integer Integer)
       ->
       (Vector
        (Integer -> Integer)
        (Integer -> Integer)
        (Integer -> Integer)))))))
  (assign
   g12592
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 0 Integer))
    Integer))
  (assign
   g12593
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 1 Integer))
    Integer))
  (assign
   g12594
   (has-type
    (vector-ref
     (has-type
      vec212575
      (Vector
       ((Vector _)
        (Integer -> Integer)
        (Vector Integer Integer Integer)
        ->
        (Vector
         (Integer -> Integer)
         (Integer -> Integer)
         (Integer -> Integer)))))
     (has-type 2 Integer))
    Integer))
  (assign
   g12595
   (has-type (+ (has-type g12594 Integer) (has-type 33 Integer)) Integer))
  (assign
   g12596
   (has-type (+ (has-type g12593 Integer) (has-type g12595 Integer)) Integer))
  (assign
   g12597
   (has-type (+ (has-type g12592 Integer) (has-type g12596 Integer)) Integer))
  (return g12597))


running pass: select instructions @ utilities.rkt:245
output:
'(program
  ((vec12574
    vec212575
    g12583
    g12586
    g12590
    g12589
    g12588
    g12597
    g12592
    g12596
    g12593
    g12595
    g12594
    end-data12628
    lt12629
    rootstack12627
    end-data12625
    lt12626
    rootstack12624
    end-data12622
    lt12623
    rootstack12621
    rootstack12620)
   0)
  (type Integer)
  (defines
   (define (func12569)
     4
     ((g12607
       g12579
       g12606
       g12605
       g12604
       g12580
       g12603
       g12602
       g12601
       g12581
       g12600
       g12599
       g12598
       end-data12632
       lt12633
       rootstack12631
       rootstack12630)
      0)
     (movq (reg rdi) (var rootstack12630))
     (movq (reg rsi) (var clos12578))
     (movq (reg rdx) (var fun12572))
     (movq (reg rcx) (var v12571))
     (movq (var fun12572) (var g12579))
     (movq (offset (var g12579) 8) (var g12605))
     (movq (offset (var v12571) 8) (var g12604))
     (movq (var rootstack12630) (reg rdi))
     (movq (var g12579) (reg rsi))
     (movq (var g12604) (reg rdx))
     (indirect-callq (var g12605))
     (movq (reg rax) (var g12606))
     (movq (var fun12572) (var g12580))
     (movq (offset (var g12580) 8) (var g12602))
     (movq (offset (var v12571) 16) (var g12601))
     (movq (var rootstack12630) (reg rdi))
     (movq (var g12580) (reg rsi))
     (movq (var g12601) (reg rdx))
     (indirect-callq (var g12602))
     (movq (reg rax) (var g12603))
     (movq (var fun12572) (var g12581))
     (movq (offset (var g12581) 8) (var g12599))
     (movq (offset (var v12571) 24) (var g12598))
     (movq (var rootstack12630) (reg rdi))
     (movq (var g12581) (reg rsi))
     (movq (var g12598) (reg rdx))
     (indirect-callq (var g12599))
     (movq (reg rax) (var g12600))
     (movq (global-value free_ptr) (var end-data12632))
     (addq (int 32) (var end-data12632))
     (cmpq (var end-data12632) (global-value fromspace_end))
     (setl (byte-reg al))
     (movzbq (byte-reg al) (var lt12633))
     (if (eq? (int 0) (var lt12633))
       ()
       ((movq (var rootstack12630) (var rootstack12631))
        (addq (int 0) (var rootstack12631))
        (movq (var rootstack12631) (reg rdi))
        (movq (int 32) (reg rsi))
        (callq collect)))
     (movq (global-value free_ptr) (var g12607))
     (addq (int 32) (global-value free_ptr))
     (movq (int 7) (offset (var g12607) 0))
     (movq (var g12606) (offset (var g12607) 8))
     (movq (int 47) (var void12610))
     (movq (var g12603) (offset (var g12607) 16))
     (movq (int 47) (var void12611))
     (movq (var g12600) (offset (var g12607) 24))
     (movq (int 47) (var void12612))
     (movq (var g12607) (reg rax)))
   (define (func12570)
     3
     ((g12608 rootstack12634) 0)
     (movq (reg rdi) (var rootstack12634))
     (movq (reg rsi) (var clos12582))
     (movq (reg rdx) (var x12573))
     (movq (var x12573) (var g12608))
     (addq (int 1) (var g12608))
     (movq (var g12608) (reg rax))))
  (movq (int 10000) (reg rdi))
  (movq (int 10000) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (var rootstack12620))
  (movq (global-value free_ptr) (var end-data12622))
  (addq (int 32) (var end-data12622))
  (cmpq (var end-data12622) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt12623))
  (if (eq? (int 0) (var lt12623))
    ()
    ((movq (var rootstack12620) (var rootstack12621))
     (addq (int 0) (var rootstack12621))
     (movq (var rootstack12621) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)))
  (movq (global-value free_ptr) (var vec12574))
  (addq (int 32) (global-value free_ptr))
  (movq (int 7) (offset (var vec12574) 0))
  (movq (int 1) (offset (var vec12574) 8))
  (movq (int 47) (var void12613))
  (movq (int 2) (offset (var vec12574) 16))
  (movq (int 47) (var void12614))
  (movq (int 3) (offset (var vec12574) 24))
  (movq (int 47) (var void12615))
  (leaq (function-ref func12569) (var g12586))
  (movq (global-value free_ptr) (var end-data12625))
  (addq (int 16) (var end-data12625))
  (cmpq (var end-data12625) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt12626))
  (if (eq? (int 0) (var lt12626))
    ()
    ((movq (var vec12574) (offset (var rootstack12620) 0))
     (movq (var rootstack12620) (var rootstack12624))
     (addq (int 1) (var rootstack12624))
     (movq (var rootstack12624) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack12620) 0) (var vec12574))))
  (movq (global-value free_ptr) (var g12583))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var g12583) 0))
  (movq (var g12586) (offset (var g12583) 8))
  (movq (int 47) (var void12616))
  (movq (offset (var g12583) 8) (var g12590))
  (leaq (function-ref func12570) (var g12588))
  (movq (global-value free_ptr) (var end-data12628))
  (addq (int 16) (var end-data12628))
  (cmpq (var end-data12628) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt12629))
  (if (eq? (int 0) (var lt12629))
    ()
    ((movq (var vec12574) (offset (var rootstack12620) 0))
     (movq (var g12583) (offset (var rootstack12620) 8))
     (movq (var rootstack12620) (var rootstack12627))
     (addq (int 2) (var rootstack12627))
     (movq (var rootstack12627) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack12620) 0) (var vec12574))
     (movq (offset (var rootstack12620) 8) (var g12583))))
  (movq (global-value free_ptr) (var g12589))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var g12589) 0))
  (movq (var g12588) (offset (var g12589) 8))
  (movq (int 47) (var void12617))
  (movq (var rootstack12620) (reg rdi))
  (movq (var g12583) (reg rsi))
  (movq (var g12589) (reg rdx))
  (movq (var vec12574) (reg rcx))
  (indirect-callq (var g12590))
  (movq (reg rax) (var vec212575))
  (movq (offset (var vec212575) 8) (var g12592))
  (movq (offset (var vec212575) 16) (var g12593))
  (movq (offset (var vec212575) 24) (var g12594))
  (movq (var g12594) (var g12595))
  (addq (int 33) (var g12595))
  (movq (var g12593) (var g12596))
  (addq (var g12595) (var g12596))
  (movq (var g12592) (var g12597))
  (addq (var g12596) (var g12597))
  (movq (var g12597) (reg rax)))


running pass: uncover-live @ utilities.rkt:241
input:
'(program
  ((vec12574
    vec212575
    g12583
    g12586
    g12590
    g12589
    g12588
    g12597
    g12592
    g12596
    g12593
    g12595
    g12594
    end-data12628
    lt12629
    rootstack12627
    end-data12625
    lt12626
    rootstack12624
    end-data12622
    lt12623
    rootstack12621
    rootstack12620)
   0)
  (type Integer)
  (defines
   (define (func12569)
     4
     ((g12607
       g12579
       g12606
       g12605
       g12604
       g12580
       g12603
       g12602
       g12601
       g12581
       g12600
       g12599
       g12598
       end-data12632
       lt12633
       rootstack12631
       rootstack12630)
      0)
     (movq (reg rdi) (var rootstack12630))
     (movq (reg rsi) (var clos12578))
     (movq (reg rdx) (var fun12572))
     (movq (reg rcx) (var v12571))
     (movq (var fun12572) (var g12579))
     (movq (offset (var g12579) 8) (var g12605))
     (movq (offset (var v12571) 8) (var g12604))
     (movq (var rootstack12630) (reg rdi))
     (movq (var g12579) (reg rsi))
     (movq (var g12604) (reg rdx))
     (indirect-callq (var g12605))
     (movq (reg rax) (var g12606))
     (movq (var fun12572) (var g12580))
     (movq (offset (var g12580) 8) (var g12602))
     (movq (offset (var v12571) 16) (var g12601))
     (movq (var rootstack12630) (reg rdi))
     (movq (var g12580) (reg rsi))
     (movq (var g12601) (reg rdx))
     (indirect-callq (var g12602))
     (movq (reg rax) (var g12603))
     (movq (var fun12572) (var g12581))
     (movq (offset (var g12581) 8) (var g12599))
     (movq (offset (var v12571) 24) (var g12598))
     (movq (var rootstack12630) (reg rdi))
     (movq (var g12581) (reg rsi))
     (movq (var g12598) (reg rdx))
     (indirect-callq (var g12599))
     (movq (reg rax) (var g12600))
     (movq (global-value free_ptr) (var end-data12632))
     (addq (int 32) (var end-data12632))
     (cmpq (var end-data12632) (global-value fromspace_end))
     (setl (byte-reg al))
     (movzbq (byte-reg al) (var lt12633))
     (if (eq? (int 0) (var lt12633))
       ()
       ((movq (var rootstack12630) (var rootstack12631))
        (addq (int 0) (var rootstack12631))
        (movq (var rootstack12631) (reg rdi))
        (movq (int 32) (reg rsi))
        (callq collect)))
     (movq (global-value free_ptr) (var g12607))
     (addq (int 32) (global-value free_ptr))
     (movq (int 7) (offset (var g12607) 0))
     (movq (var g12606) (offset (var g12607) 8))
     (movq (int 47) (var void12610))
     (movq (var g12603) (offset (var g12607) 16))
     (movq (int 47) (var void12611))
     (movq (var g12600) (offset (var g12607) 24))
     (movq (int 47) (var void12612))
     (movq (var g12607) (reg rax)))
   (define (func12570)
     3
     ((g12608 rootstack12634) 0)
     (movq (reg rdi) (var rootstack12634))
     (movq (reg rsi) (var clos12582))
     (movq (reg rdx) (var x12573))
     (movq (var x12573) (var g12608))
     (addq (int 1) (var g12608))
     (movq (var g12608) (reg rax))))
  (movq (int 10000) (reg rdi))
  (movq (int 10000) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (var rootstack12620))
  (movq (global-value free_ptr) (var end-data12622))
  (addq (int 32) (var end-data12622))
  (cmpq (var end-data12622) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt12623))
  (if (eq? (int 0) (var lt12623))
    ()
    ((movq (var rootstack12620) (var rootstack12621))
     (addq (int 0) (var rootstack12621))
     (movq (var rootstack12621) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)))
  (movq (global-value free_ptr) (var vec12574))
  (addq (int 32) (global-value free_ptr))
  (movq (int 7) (offset (var vec12574) 0))
  (movq (int 1) (offset (var vec12574) 8))
  (movq (int 47) (var void12613))
  (movq (int 2) (offset (var vec12574) 16))
  (movq (int 47) (var void12614))
  (movq (int 3) (offset (var vec12574) 24))
  (movq (int 47) (var void12615))
  (leaq (function-ref func12569) (var g12586))
  (movq (global-value free_ptr) (var end-data12625))
  (addq (int 16) (var end-data12625))
  (cmpq (var end-data12625) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt12626))
  (if (eq? (int 0) (var lt12626))
    ()
    ((movq (var vec12574) (offset (var rootstack12620) 0))
     (movq (var rootstack12620) (var rootstack12624))
     (addq (int 1) (var rootstack12624))
     (movq (var rootstack12624) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack12620) 0) (var vec12574))))
  (movq (global-value free_ptr) (var g12583))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var g12583) 0))
  (movq (var g12586) (offset (var g12583) 8))
  (movq (int 47) (var void12616))
  (movq (offset (var g12583) 8) (var g12590))
  (leaq (function-ref func12570) (var g12588))
  (movq (global-value free_ptr) (var end-data12628))
  (addq (int 16) (var end-data12628))
  (cmpq (var end-data12628) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (var lt12629))
  (if (eq? (int 0) (var lt12629))
    ()
    ((movq (var vec12574) (offset (var rootstack12620) 0))
     (movq (var g12583) (offset (var rootstack12620) 8))
     (movq (var rootstack12620) (var rootstack12627))
     (addq (int 2) (var rootstack12627))
     (movq (var rootstack12627) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (var rootstack12620) 0) (var vec12574))
     (movq (offset (var rootstack12620) 8) (var g12583))))
  (movq (global-value free_ptr) (var g12589))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (var g12589) 0))
  (movq (var g12588) (offset (var g12589) 8))
  (movq (int 47) (var void12617))
  (movq (var rootstack12620) (reg rdi))
  (movq (var g12583) (reg rsi))
  (movq (var g12589) (reg rdx))
  (movq (var vec12574) (reg rcx))
  (indirect-callq (var g12590))
  (movq (reg rax) (var vec212575))
  (movq (offset (var vec212575) 8) (var g12592))
  (movq (offset (var vec212575) 16) (var g12593))
  (movq (offset (var vec212575) 24) (var g12594))
  (movq (var g12594) (var g12595))
  (addq (int 33) (var g12595))
  (movq (var g12593) (var g12596))
  (addq (var g12595) (var g12596))
  (movq (var g12592) (var g12597))
  (addq (var g12596) (var g12597))
  (movq (var g12597) (reg rax)))


running pass: uncover-live @ utilities.rkt:245
output:
(list
 'program
 (list
  '(vec12574
    vec212575
    g12583
    g12586
    g12590
    g12589
    g12588
    g12597
    g12592
    g12596
    g12593
    g12595
    g12594
    end-data12628
    lt12629
    rootstack12627
    end-data12625
    lt12626
    rootstack12624
    end-data12622
    lt12623
    rootstack12621
    rootstack12620)
  0
  (list
   (set)
   (set)
   (set)
   (set 'rootstack12620)
   (set 'end-data12622 'rootstack12620)
   (set 'end-data12622 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'vec12574 'end-data12625 'rootstack12620 'g12586)
   (set 'vec12574 'end-data12625 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'g12583 'vec12574 'rootstack12620 'g12586)
   (set 'g12583 'vec12574 'rootstack12620 'g12586)
   (set 'g12583 'vec12574 'rootstack12620 'g12586)
   (set 'g12583 'vec12574 'rootstack12620)
   (set 'g12583 'vec12574 'rootstack12620)
   (set 'g12583 'vec12574 'rootstack12620 'g12590)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'end-data12628 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'end-data12628 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589)
   (set 'g12583 'vec12574 'g12590 'g12589)
   (set 'vec12574 'g12590 'g12589)
   (set 'vec12574 'g12590)
   (set 'g12590)
   (set)
   (set 'vec212575)
   (set 'vec212575 'g12592)
   (set 'vec212575 'g12592 'g12593)
   (set 'g12592 'g12593 'g12594)
   (set 'g12592 'g12593 'g12595)
   (set 'g12592 'g12593 'g12595)
   (set 'g12592 'g12596 'g12595)
   (set 'g12592 'g12596)
   (set 'g12597 'g12596)
   (set 'g12597)
   (set)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(func12569)
   4
   (list
    '(g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598
      end-data12632
      lt12633
      rootstack12631
      rootstack12630)
    0
    (list
     (set 'rootstack12630)
     (set 'rootstack12630)
     (set 'rootstack12630 'fun12572)
     (set 'rootstack12630 'fun12572 'v12571)
     (set 'rootstack12630 'g12579 'fun12572 'v12571)
     (set 'g12605 'rootstack12630 'g12579 'fun12572 'v12571)
     (set 'g12605 'g12604 'rootstack12630 'g12579 'fun12572 'v12571)
     (set 'g12605 'g12604 'rootstack12630 'g12579 'fun12572 'v12571)
     (set 'g12605 'g12604 'rootstack12630 'fun12572 'v12571)
     (set 'g12605 'rootstack12630 'fun12572 'v12571)
     (set 'rootstack12630 'fun12572 'v12571)
     (set 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'rootstack12630 'fun12572 'g12580 'v12571 'g12606)
     (set 'g12602 'rootstack12630 'fun12572 'g12580 'v12571 'g12606)
     (set 'g12602 'g12601 'rootstack12630 'fun12572 'g12580 'v12571 'g12606)
     (set 'g12602 'g12601 'rootstack12630 'fun12572 'g12580 'v12571 'g12606)
     (set 'g12602 'g12601 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'g12602 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'g12603 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'g12603 'rootstack12630 'v12571 'g12606 'g12581)
     (set 'g12603 'g12599 'rootstack12630 'v12571 'g12606 'g12581)
     (set 'g12603 'g12599 'g12598 'rootstack12630 'g12606 'g12581)
     (set 'g12603 'g12599 'g12598 'rootstack12630 'g12606 'g12581)
     (set 'g12603 'g12599 'g12598 'rootstack12630 'g12606)
     (set 'g12603 'g12599 'rootstack12630 'g12606)
     (set 'g12603 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'end-data12632 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'end-data12632 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12607 'g12606)
     (set 'g12603 'g12600 'g12607 'g12606)
     (set 'g12603 'g12600 'g12607 'g12606)
     (set 'g12603 'g12600 'g12607)
     (set 'g12603 'g12600 'g12607)
     (set 'g12600 'g12607)
     (set 'g12600 'g12607)
     (set 'g12607)
     (set 'g12607)
     (set)))
   '(movq (reg rdi) (var rootstack12630))
   '(movq (reg rsi) (var clos12578))
   '(movq (reg rdx) (var fun12572))
   '(movq (reg rcx) (var v12571))
   '(movq (var fun12572) (var g12579))
   '(movq (offset (var g12579) 8) (var g12605))
   '(movq (offset (var v12571) 8) (var g12604))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12579) (reg rsi))
   '(movq (var g12604) (reg rdx))
   '(indirect-callq (var g12605))
   '(movq (reg rax) (var g12606))
   '(movq (var fun12572) (var g12580))
   '(movq (offset (var g12580) 8) (var g12602))
   '(movq (offset (var v12571) 16) (var g12601))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12580) (reg rsi))
   '(movq (var g12601) (reg rdx))
   '(indirect-callq (var g12602))
   '(movq (reg rax) (var g12603))
   '(movq (var fun12572) (var g12581))
   '(movq (offset (var g12581) 8) (var g12599))
   '(movq (offset (var v12571) 24) (var g12598))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12581) (reg rsi))
   '(movq (var g12598) (reg rdx))
   '(indirect-callq (var g12599))
   '(movq (reg rax) (var g12600))
   '(movq (global-value free_ptr) (var end-data12632))
   '(addq (int 32) (var end-data12632))
   '(cmpq (var end-data12632) (global-value fromspace_end))
   '(setl (byte-reg al))
   '(movzbq (byte-reg al) (var lt12633))
   (list
    'if
    '(eq? (int 0) (var lt12633))
    '()
    '()
    '((movq (var rootstack12630) (var rootstack12631))
      (addq (int 0) (var rootstack12631))
      (movq (var rootstack12631) (reg rdi))
      (movq (int 32) (reg rsi))
      (callq collect))
    (list
     (set 'g12603 'g12600 'rootstack12631 'g12606)
     (set 'g12603 'g12600 'rootstack12631 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12606)))
   '(movq (global-value free_ptr) (var g12607))
   '(addq (int 32) (global-value free_ptr))
   '(movq (int 7) (offset (var g12607) 0))
   '(movq (var g12606) (offset (var g12607) 8))
   '(movq (int 47) (var void12610))
   '(movq (var g12603) (offset (var g12607) 16))
   '(movq (int 47) (var void12611))
   '(movq (var g12600) (offset (var g12607) 24))
   '(movq (int 47) (var void12612))
   '(movq (var g12607) (reg rax)))
  (list
   'define
   '(func12570)
   3
   (list
    '(g12608 rootstack12634)
    0
    (list (set) (set) (set 'x12573) (set 'g12608) (set 'g12608) (set)))
   '(movq (reg rdi) (var rootstack12634))
   '(movq (reg rsi) (var clos12582))
   '(movq (reg rdx) (var x12573))
   '(movq (var x12573) (var g12608))
   '(addq (int 1) (var g12608))
   '(movq (var g12608) (reg rax))))
 '(movq (int 10000) (reg rdi))
 '(movq (int 10000) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (var rootstack12620))
 '(movq (global-value free_ptr) (var end-data12622))
 '(addq (int 32) (var end-data12622))
 '(cmpq (var end-data12622) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12623))
 (list
  'if
  '(eq? (int 0) (var lt12623))
  '()
  '()
  '((movq (var rootstack12620) (var rootstack12621))
    (addq (int 0) (var rootstack12621))
    (movq (var rootstack12621) (reg rdi))
    (movq (int 32) (reg rsi))
    (callq collect))
  (list
   (set 'rootstack12621 'rootstack12620)
   (set 'rootstack12621 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)))
 '(movq (global-value free_ptr) (var vec12574))
 '(addq (int 32) (global-value free_ptr))
 '(movq (int 7) (offset (var vec12574) 0))
 '(movq (int 1) (offset (var vec12574) 8))
 '(movq (int 47) (var void12613))
 '(movq (int 2) (offset (var vec12574) 16))
 '(movq (int 47) (var void12614))
 '(movq (int 3) (offset (var vec12574) 24))
 '(movq (int 47) (var void12615))
 '(leaq (function-ref func12569) (var g12586))
 '(movq (global-value free_ptr) (var end-data12625))
 '(addq (int 16) (var end-data12625))
 '(cmpq (var end-data12625) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12626))
 (list
  'if
  '(eq? (int 0) (var lt12626))
  '()
  '()
  '((movq (var vec12574) (offset (var rootstack12620) 0))
    (movq (var rootstack12620) (var rootstack12624))
    (addq (int 1) (var rootstack12624))
    (movq (var rootstack12624) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (movq (offset (var rootstack12620) 0) (var vec12574)))
  (list
   (set 'rootstack12620 'g12586)
   (set 'rootstack12624 'rootstack12620 'g12586)
   (set 'rootstack12624 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)))
 '(movq (global-value free_ptr) (var g12583))
 '(addq (int 16) (global-value free_ptr))
 '(movq (int 3) (offset (var g12583) 0))
 '(movq (var g12586) (offset (var g12583) 8))
 '(movq (int 47) (var void12616))
 '(movq (offset (var g12583) 8) (var g12590))
 '(leaq (function-ref func12570) (var g12588))
 '(movq (global-value free_ptr) (var end-data12628))
 '(addq (int 16) (var end-data12628))
 '(cmpq (var end-data12628) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12629))
 (list
  'if
  '(eq? (int 0) (var lt12629))
  '()
  '()
  '((movq (var vec12574) (offset (var rootstack12620) 0))
    (movq (var g12583) (offset (var rootstack12620) 8))
    (movq (var rootstack12620) (var rootstack12627))
    (addq (int 2) (var rootstack12627))
    (movq (var rootstack12627) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (movq (offset (var rootstack12620) 0) (var vec12574))
    (movq (offset (var rootstack12620) 8) (var g12583)))
  (list
   (set 'g12583 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12627 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12627 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)))
 '(movq (global-value free_ptr) (var g12589))
 '(addq (int 16) (global-value free_ptr))
 '(movq (int 3) (offset (var g12589) 0))
 '(movq (var g12588) (offset (var g12589) 8))
 '(movq (int 47) (var void12617))
 '(movq (var rootstack12620) (reg rdi))
 '(movq (var g12583) (reg rsi))
 '(movq (var g12589) (reg rdx))
 '(movq (var vec12574) (reg rcx))
 '(indirect-callq (var g12590))
 '(movq (reg rax) (var vec212575))
 '(movq (offset (var vec212575) 8) (var g12592))
 '(movq (offset (var vec212575) 16) (var g12593))
 '(movq (offset (var vec212575) 24) (var g12594))
 '(movq (var g12594) (var g12595))
 '(addq (int 33) (var g12595))
 '(movq (var g12593) (var g12596))
 '(addq (var g12595) (var g12596))
 '(movq (var g12592) (var g12597))
 '(addq (var g12596) (var g12597))
 '(movq (var g12597) (reg rax)))


running pass: build interference graph @ utilities.rkt:241
input:
(list
 'program
 (list
  '(vec12574
    vec212575
    g12583
    g12586
    g12590
    g12589
    g12588
    g12597
    g12592
    g12596
    g12593
    g12595
    g12594
    end-data12628
    lt12629
    rootstack12627
    end-data12625
    lt12626
    rootstack12624
    end-data12622
    lt12623
    rootstack12621
    rootstack12620)
  0
  (list
   (set)
   (set)
   (set)
   (set 'rootstack12620)
   (set 'end-data12622 'rootstack12620)
   (set 'end-data12622 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'vec12574 'end-data12625 'rootstack12620 'g12586)
   (set 'vec12574 'end-data12625 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)
   (set 'g12583 'vec12574 'rootstack12620 'g12586)
   (set 'g12583 'vec12574 'rootstack12620 'g12586)
   (set 'g12583 'vec12574 'rootstack12620 'g12586)
   (set 'g12583 'vec12574 'rootstack12620)
   (set 'g12583 'vec12574 'rootstack12620)
   (set 'g12583 'vec12574 'rootstack12620 'g12590)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'end-data12628 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'end-data12628 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589)
   (set 'g12583 'vec12574 'g12590 'g12589)
   (set 'vec12574 'g12590 'g12589)
   (set 'vec12574 'g12590)
   (set 'g12590)
   (set)
   (set 'vec212575)
   (set 'vec212575 'g12592)
   (set 'vec212575 'g12592 'g12593)
   (set 'g12592 'g12593 'g12594)
   (set 'g12592 'g12593 'g12595)
   (set 'g12592 'g12593 'g12595)
   (set 'g12592 'g12596 'g12595)
   (set 'g12592 'g12596)
   (set 'g12597 'g12596)
   (set 'g12597)
   (set)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(func12569)
   4
   (list
    '(g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598
      end-data12632
      lt12633
      rootstack12631
      rootstack12630)
    0
    (list
     (set 'rootstack12630)
     (set 'rootstack12630)
     (set 'rootstack12630 'fun12572)
     (set 'rootstack12630 'fun12572 'v12571)
     (set 'rootstack12630 'g12579 'fun12572 'v12571)
     (set 'g12605 'rootstack12630 'g12579 'fun12572 'v12571)
     (set 'g12605 'g12604 'rootstack12630 'g12579 'fun12572 'v12571)
     (set 'g12605 'g12604 'rootstack12630 'g12579 'fun12572 'v12571)
     (set 'g12605 'g12604 'rootstack12630 'fun12572 'v12571)
     (set 'g12605 'rootstack12630 'fun12572 'v12571)
     (set 'rootstack12630 'fun12572 'v12571)
     (set 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'rootstack12630 'fun12572 'g12580 'v12571 'g12606)
     (set 'g12602 'rootstack12630 'fun12572 'g12580 'v12571 'g12606)
     (set 'g12602 'g12601 'rootstack12630 'fun12572 'g12580 'v12571 'g12606)
     (set 'g12602 'g12601 'rootstack12630 'fun12572 'g12580 'v12571 'g12606)
     (set 'g12602 'g12601 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'g12602 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'g12603 'rootstack12630 'fun12572 'v12571 'g12606)
     (set 'g12603 'rootstack12630 'v12571 'g12606 'g12581)
     (set 'g12603 'g12599 'rootstack12630 'v12571 'g12606 'g12581)
     (set 'g12603 'g12599 'g12598 'rootstack12630 'g12606 'g12581)
     (set 'g12603 'g12599 'g12598 'rootstack12630 'g12606 'g12581)
     (set 'g12603 'g12599 'g12598 'rootstack12630 'g12606)
     (set 'g12603 'g12599 'rootstack12630 'g12606)
     (set 'g12603 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'end-data12632 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'end-data12632 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12607 'g12606)
     (set 'g12603 'g12600 'g12607 'g12606)
     (set 'g12603 'g12600 'g12607 'g12606)
     (set 'g12603 'g12600 'g12607)
     (set 'g12603 'g12600 'g12607)
     (set 'g12600 'g12607)
     (set 'g12600 'g12607)
     (set 'g12607)
     (set 'g12607)
     (set)))
   '(movq (reg rdi) (var rootstack12630))
   '(movq (reg rsi) (var clos12578))
   '(movq (reg rdx) (var fun12572))
   '(movq (reg rcx) (var v12571))
   '(movq (var fun12572) (var g12579))
   '(movq (offset (var g12579) 8) (var g12605))
   '(movq (offset (var v12571) 8) (var g12604))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12579) (reg rsi))
   '(movq (var g12604) (reg rdx))
   '(indirect-callq (var g12605))
   '(movq (reg rax) (var g12606))
   '(movq (var fun12572) (var g12580))
   '(movq (offset (var g12580) 8) (var g12602))
   '(movq (offset (var v12571) 16) (var g12601))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12580) (reg rsi))
   '(movq (var g12601) (reg rdx))
   '(indirect-callq (var g12602))
   '(movq (reg rax) (var g12603))
   '(movq (var fun12572) (var g12581))
   '(movq (offset (var g12581) 8) (var g12599))
   '(movq (offset (var v12571) 24) (var g12598))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12581) (reg rsi))
   '(movq (var g12598) (reg rdx))
   '(indirect-callq (var g12599))
   '(movq (reg rax) (var g12600))
   '(movq (global-value free_ptr) (var end-data12632))
   '(addq (int 32) (var end-data12632))
   '(cmpq (var end-data12632) (global-value fromspace_end))
   '(setl (byte-reg al))
   '(movzbq (byte-reg al) (var lt12633))
   (list
    'if
    '(eq? (int 0) (var lt12633))
    '()
    '()
    '((movq (var rootstack12630) (var rootstack12631))
      (addq (int 0) (var rootstack12631))
      (movq (var rootstack12631) (reg rdi))
      (movq (int 32) (reg rsi))
      (callq collect))
    (list
     (set 'g12603 'g12600 'rootstack12631 'g12606)
     (set 'g12603 'g12600 'rootstack12631 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12606)))
   '(movq (global-value free_ptr) (var g12607))
   '(addq (int 32) (global-value free_ptr))
   '(movq (int 7) (offset (var g12607) 0))
   '(movq (var g12606) (offset (var g12607) 8))
   '(movq (int 47) (var void12610))
   '(movq (var g12603) (offset (var g12607) 16))
   '(movq (int 47) (var void12611))
   '(movq (var g12600) (offset (var g12607) 24))
   '(movq (int 47) (var void12612))
   '(movq (var g12607) (reg rax)))
  (list
   'define
   '(func12570)
   3
   (list
    '(g12608 rootstack12634)
    0
    (list (set) (set) (set 'x12573) (set 'g12608) (set 'g12608) (set)))
   '(movq (reg rdi) (var rootstack12634))
   '(movq (reg rsi) (var clos12582))
   '(movq (reg rdx) (var x12573))
   '(movq (var x12573) (var g12608))
   '(addq (int 1) (var g12608))
   '(movq (var g12608) (reg rax))))
 '(movq (int 10000) (reg rdi))
 '(movq (int 10000) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (var rootstack12620))
 '(movq (global-value free_ptr) (var end-data12622))
 '(addq (int 32) (var end-data12622))
 '(cmpq (var end-data12622) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12623))
 (list
  'if
  '(eq? (int 0) (var lt12623))
  '()
  '()
  '((movq (var rootstack12620) (var rootstack12621))
    (addq (int 0) (var rootstack12621))
    (movq (var rootstack12621) (reg rdi))
    (movq (int 32) (reg rsi))
    (callq collect))
  (list
   (set 'rootstack12621 'rootstack12620)
   (set 'rootstack12621 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)))
 '(movq (global-value free_ptr) (var vec12574))
 '(addq (int 32) (global-value free_ptr))
 '(movq (int 7) (offset (var vec12574) 0))
 '(movq (int 1) (offset (var vec12574) 8))
 '(movq (int 47) (var void12613))
 '(movq (int 2) (offset (var vec12574) 16))
 '(movq (int 47) (var void12614))
 '(movq (int 3) (offset (var vec12574) 24))
 '(movq (int 47) (var void12615))
 '(leaq (function-ref func12569) (var g12586))
 '(movq (global-value free_ptr) (var end-data12625))
 '(addq (int 16) (var end-data12625))
 '(cmpq (var end-data12625) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12626))
 (list
  'if
  '(eq? (int 0) (var lt12626))
  '()
  '()
  '((movq (var vec12574) (offset (var rootstack12620) 0))
    (movq (var rootstack12620) (var rootstack12624))
    (addq (int 1) (var rootstack12624))
    (movq (var rootstack12624) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (movq (offset (var rootstack12620) 0) (var vec12574)))
  (list
   (set 'rootstack12620 'g12586)
   (set 'rootstack12624 'rootstack12620 'g12586)
   (set 'rootstack12624 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)))
 '(movq (global-value free_ptr) (var g12583))
 '(addq (int 16) (global-value free_ptr))
 '(movq (int 3) (offset (var g12583) 0))
 '(movq (var g12586) (offset (var g12583) 8))
 '(movq (int 47) (var void12616))
 '(movq (offset (var g12583) 8) (var g12590))
 '(leaq (function-ref func12570) (var g12588))
 '(movq (global-value free_ptr) (var end-data12628))
 '(addq (int 16) (var end-data12628))
 '(cmpq (var end-data12628) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12629))
 (list
  'if
  '(eq? (int 0) (var lt12629))
  '()
  '()
  '((movq (var vec12574) (offset (var rootstack12620) 0))
    (movq (var g12583) (offset (var rootstack12620) 8))
    (movq (var rootstack12620) (var rootstack12627))
    (addq (int 2) (var rootstack12627))
    (movq (var rootstack12627) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (movq (offset (var rootstack12620) 0) (var vec12574))
    (movq (offset (var rootstack12620) 8) (var g12583)))
  (list
   (set 'g12583 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12627 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12627 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)))
 '(movq (global-value free_ptr) (var g12589))
 '(addq (int 16) (global-value free_ptr))
 '(movq (int 3) (offset (var g12589) 0))
 '(movq (var g12588) (offset (var g12589) 8))
 '(movq (int 47) (var void12617))
 '(movq (var rootstack12620) (reg rdi))
 '(movq (var g12583) (reg rsi))
 '(movq (var g12589) (reg rdx))
 '(movq (var vec12574) (reg rcx))
 '(indirect-callq (var g12590))
 '(movq (reg rax) (var vec212575))
 '(movq (offset (var vec212575) 8) (var g12592))
 '(movq (offset (var vec212575) 16) (var g12593))
 '(movq (offset (var vec212575) 24) (var g12594))
 '(movq (var g12594) (var g12595))
 '(addq (int 33) (var g12595))
 '(movq (var g12593) (var g12596))
 '(addq (var g12595) (var g12596))
 '(movq (var g12592) (var g12597))
 '(addq (var g12596) (var g12597))
 '(movq (var g12597) (reg rax)))


running pass: build interference graph @ utilities.rkt:245
output:
(list
 'program
 (list
  '(vec12574
    vec212575
    g12583
    g12586
    g12590
    g12589
    g12588
    g12597
    g12592
    g12596
    g12593
    g12595
    g12594
    end-data12628
    lt12629
    rootstack12627
    end-data12625
    lt12626
    rootstack12624
    end-data12622
    lt12623
    rootstack12621
    rootstack12620)
  0
  (hash
   'g12594
   (set 'g12592 'g12593 'g12594)
   'g12595
   (set 'g12592 'g12596 'g12593)
   'g12593
   (set 'vec212575 'g12592 'g12593 'g12595 'g12594)
   'rcx
   (set 'g12590)
   'rdx
   (set 'vec12574 'g12590)
   'g12592
   (set 'vec212575 'g12592 'g12596 'g12593 'g12595 'g12594)
   'g12588
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'rootstack12627
    'rootstack12620
    'g12590
    'g12589
    'rdx
    'rcx
    'r8
    'r9
    'r10
    'rdi
    'rsi)
   'g12589
   (set 'g12583 'vec12574 'rootstack12620 'void12617 'g12590 'g12588 'rdi 'rsi)
   'g12590
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'rootstack12627
    'rootstack12620
    'void12617
    'g12590
    'g12589
    'g12588
    'rdx
    'rcx
    'r8
    'r9
    'r10
    'rdi
    'rsi)
   'g12586
   (set
    'g12583
    'vec12574
    'end-data12625
    'lt12626
    'rootstack12624
    'rootstack12620
    'rdx
    'rcx
    'r8
    'r9
    'r10
    'rdi
    'rsi)
   'g12596
   (set 'g12597 'g12592 'g12595)
   'g12597
   (set 'g12596)
   'g12583
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'rootstack12620
    'void12616
    'g12586
    'void12617
    'g12590
    'g12589
    'g12588
    'rdi)
   'rsi
   (set 'vec12574 'rootstack12620 'g12586 'g12590 'g12589 'g12588)
   'rdi
   (set 'g12583 'vec12574 'rootstack12620 'g12586 'g12590 'g12589 'g12588)
   'void12617
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589)
   'void12616
   (set 'g12583 'vec12574 'rootstack12620)
   'void12615
   (set 'vec12574 'rootstack12620)
   'void12614
   (set 'vec12574 'rootstack12620)
   'void12613
   (set 'vec12574 'rootstack12620)
   'lt12623
   (set 'rootstack12620)
   'end-data12622
   (set 'rootstack12620)
   'rootstack12624
   (set 'rootstack12620 'g12586)
   'lt12626
   (set 'vec12574 'rootstack12620 'g12586)
   'end-data12625
   (set 'vec12574 'rootstack12620 'g12586)
   'rootstack12627
   (set 'rootstack12620 'g12590 'g12588)
   'lt12629
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   'end-data12628
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   'rootstack12621
   (set 'rootstack12620)
   'rootstack12620
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'rootstack12627
    'end-data12625
    'lt12626
    'rootstack12624
    'end-data12622
    'lt12623
    'void12613
    'rootstack12621
    'void12614
    'void12615
    'void12616
    'g12586
    'void12617
    'g12590
    'g12589
    'g12588
    'rdx
    'rcx
    'r8
    'r9
    'r10
    'rdi
    'rsi)
   'vec212575
   (set 'g12592 'g12593)
   'vec12574
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'end-data12625
    'lt12626
    'void12613
    'void12614
    'rootstack12620
    'void12615
    'void12616
    'g12586
    'void12617
    'g12590
    'g12589
    'g12588
    'rdx
    'rdi
    'rsi)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(func12569)
   4
   (list
    '(g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598
      end-data12632
      lt12633
      rootstack12631
      rootstack12630)
    0
    (hash
     'v12571
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'g12599
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'g12579
      'rdi
      'fun12572
      'g12580
      'rsi
      'g12606
      'g12581)
     'g12607
     (set 'g12603 'g12600 'void12610 'void12611 'void12612 'g12606)
     'fun12572
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'rdi
      'rsi
      'v12571
      'g12606)
     'g12606
     (set
      'g12603
      'g12602
      'g12601
      'g12600
      'g12599
      'g12598
      'end-data12632
      'lt12633
      'rootstack12631
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'rdi
      'fun12572
      'g12607
      'g12580
      'rsi
      'v12571
      'g12581)
     'rdx
     (set
      'g12605
      'g12603
      'g12602
      'g12599
      'rootstack12630
      'fun12572
      'v12571
      'g12606)
     'g12581
     (set 'g12603 'g12599 'g12598 'rootstack12630 'rdi 'v12571 'g12606)
     'rsi
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'g12600
      'g12599
      'g12598
      'rootstack12630
      'fun12572
      'v12571
      'g12606)
     'g12579
     (set 'g12605 'g12604 'rootstack12630 'rdi 'v12571)
     'clos12578
     (set 'rootstack12630)
     'rdi
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'g12600
      'g12599
      'g12598
      'g12579
      'fun12572
      'g12580
      'v12571
      'g12606
      'g12581)
     'g12580
     (set 'g12602 'g12601 'rootstack12630 'rdi 'v12571 'g12606)
     'rootstack12630
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'g12600
      'g12599
      'g12598
      'end-data12632
      'lt12633
      'rdx
      'rcx
      'r8
      'r9
      'clos12578
      'r10
      'g12579
      'rdi
      'fun12572
      'g12580
      'rsi
      'v12571
      'g12606
      'g12581)
     'rootstack12631
     (set 'g12603 'g12600 'g12606)
     'lt12633
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     'end-data12632
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     'void12612
     (set 'g12607)
     'void12611
     (set 'g12600 'g12607)
     'void12610
     (set 'g12603 'g12600 'g12607)
     'g12598
     (set 'g12603 'g12599 'g12598 'rootstack12630 'rdi 'rsi 'g12606 'g12581)
     'g12599
     (set
      'g12603
      'g12599
      'g12598
      'rootstack12630
      'rdx
      'rdi
      'rsi
      'v12571
      'g12606
      'g12581)
     'g12600
     (set
      'g12603
      'void12610
      'void12611
      'end-data12632
      'lt12633
      'rootstack12631
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'rdi
      'g12607
      'rsi
      'g12606)
     'g12601
     (set
      'g12602
      'g12601
      'rootstack12630
      'rdi
      'fun12572
      'g12580
      'rsi
      'v12571
      'g12606)
     'g12602
     (set
      'g12602
      'g12601
      'rootstack12630
      'rdx
      'rdi
      'fun12572
      'g12580
      'rsi
      'v12571
      'g12606)
     'g12603
     (set
      'g12600
      'g12599
      'g12598
      'void12610
      'end-data12632
      'lt12633
      'rootstack12631
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'rdi
      'fun12572
      'g12607
      'rsi
      'v12571
      'g12606
      'g12581)
     'g12604
     (set 'g12605 'g12604 'rootstack12630 'g12579 'rdi 'fun12572 'rsi 'v12571)
     'g12605
     (set
      'g12605
      'g12604
      'rootstack12630
      'rdx
      'g12579
      'rdi
      'fun12572
      'rsi
      'v12571)))
   '(movq (reg rdi) (var rootstack12630))
   '(movq (reg rsi) (var clos12578))
   '(movq (reg rdx) (var fun12572))
   '(movq (reg rcx) (var v12571))
   '(movq (var fun12572) (var g12579))
   '(movq (offset (var g12579) 8) (var g12605))
   '(movq (offset (var v12571) 8) (var g12604))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12579) (reg rsi))
   '(movq (var g12604) (reg rdx))
   '(indirect-callq (var g12605))
   '(movq (reg rax) (var g12606))
   '(movq (var fun12572) (var g12580))
   '(movq (offset (var g12580) 8) (var g12602))
   '(movq (offset (var v12571) 16) (var g12601))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12580) (reg rsi))
   '(movq (var g12601) (reg rdx))
   '(indirect-callq (var g12602))
   '(movq (reg rax) (var g12603))
   '(movq (var fun12572) (var g12581))
   '(movq (offset (var g12581) 8) (var g12599))
   '(movq (offset (var v12571) 24) (var g12598))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12581) (reg rsi))
   '(movq (var g12598) (reg rdx))
   '(indirect-callq (var g12599))
   '(movq (reg rax) (var g12600))
   '(movq (global-value free_ptr) (var end-data12632))
   '(addq (int 32) (var end-data12632))
   '(cmpq (var end-data12632) (global-value fromspace_end))
   '(setl (byte-reg al))
   '(movzbq (byte-reg al) (var lt12633))
   (list
    'if
    '(eq? (int 0) (var lt12633))
    '()
    '()
    '((movq (var rootstack12630) (var rootstack12631))
      (addq (int 0) (var rootstack12631))
      (movq (var rootstack12631) (reg rdi))
      (movq (int 32) (reg rsi))
      (callq collect))
    (list
     (set 'g12603 'g12600 'rootstack12631 'g12606)
     (set 'g12603 'g12600 'rootstack12631 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12606)))
   '(movq (global-value free_ptr) (var g12607))
   '(addq (int 32) (global-value free_ptr))
   '(movq (int 7) (offset (var g12607) 0))
   '(movq (var g12606) (offset (var g12607) 8))
   '(movq (int 47) (var void12610))
   '(movq (var g12603) (offset (var g12607) 16))
   '(movq (int 47) (var void12611))
   '(movq (var g12600) (offset (var g12607) 24))
   '(movq (int 47) (var void12612))
   '(movq (var g12607) (reg rax)))
  (list
   'define
   '(func12570)
   3
   (list '(g12608 rootstack12634) 0 (hash 'x12573 (set) 'g12608 (set)))
   '(movq (reg rdi) (var rootstack12634))
   '(movq (reg rsi) (var clos12582))
   '(movq (reg rdx) (var x12573))
   '(movq (var x12573) (var g12608))
   '(addq (int 1) (var g12608))
   '(movq (var g12608) (reg rax))))
 '(movq (int 10000) (reg rdi))
 '(movq (int 10000) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (var rootstack12620))
 '(movq (global-value free_ptr) (var end-data12622))
 '(addq (int 32) (var end-data12622))
 '(cmpq (var end-data12622) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12623))
 (list
  'if
  '(eq? (int 0) (var lt12623))
  '()
  '()
  '((movq (var rootstack12620) (var rootstack12621))
    (addq (int 0) (var rootstack12621))
    (movq (var rootstack12621) (reg rdi))
    (movq (int 32) (reg rsi))
    (callq collect))
  (list
   (set 'rootstack12621 'rootstack12620)
   (set 'rootstack12621 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)))
 '(movq (global-value free_ptr) (var vec12574))
 '(addq (int 32) (global-value free_ptr))
 '(movq (int 7) (offset (var vec12574) 0))
 '(movq (int 1) (offset (var vec12574) 8))
 '(movq (int 47) (var void12613))
 '(movq (int 2) (offset (var vec12574) 16))
 '(movq (int 47) (var void12614))
 '(movq (int 3) (offset (var vec12574) 24))
 '(movq (int 47) (var void12615))
 '(leaq (function-ref func12569) (var g12586))
 '(movq (global-value free_ptr) (var end-data12625))
 '(addq (int 16) (var end-data12625))
 '(cmpq (var end-data12625) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12626))
 (list
  'if
  '(eq? (int 0) (var lt12626))
  '()
  '()
  '((movq (var vec12574) (offset (var rootstack12620) 0))
    (movq (var rootstack12620) (var rootstack12624))
    (addq (int 1) (var rootstack12624))
    (movq (var rootstack12624) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (movq (offset (var rootstack12620) 0) (var vec12574)))
  (list
   (set 'rootstack12620 'g12586)
   (set 'rootstack12624 'rootstack12620 'g12586)
   (set 'rootstack12624 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)))
 '(movq (global-value free_ptr) (var g12583))
 '(addq (int 16) (global-value free_ptr))
 '(movq (int 3) (offset (var g12583) 0))
 '(movq (var g12586) (offset (var g12583) 8))
 '(movq (int 47) (var void12616))
 '(movq (offset (var g12583) 8) (var g12590))
 '(leaq (function-ref func12570) (var g12588))
 '(movq (global-value free_ptr) (var end-data12628))
 '(addq (int 16) (var end-data12628))
 '(cmpq (var end-data12628) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12629))
 (list
  'if
  '(eq? (int 0) (var lt12629))
  '()
  '()
  '((movq (var vec12574) (offset (var rootstack12620) 0))
    (movq (var g12583) (offset (var rootstack12620) 8))
    (movq (var rootstack12620) (var rootstack12627))
    (addq (int 2) (var rootstack12627))
    (movq (var rootstack12627) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (movq (offset (var rootstack12620) 0) (var vec12574))
    (movq (offset (var rootstack12620) 8) (var g12583)))
  (list
   (set 'g12583 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12627 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12627 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)))
 '(movq (global-value free_ptr) (var g12589))
 '(addq (int 16) (global-value free_ptr))
 '(movq (int 3) (offset (var g12589) 0))
 '(movq (var g12588) (offset (var g12589) 8))
 '(movq (int 47) (var void12617))
 '(movq (var rootstack12620) (reg rdi))
 '(movq (var g12583) (reg rsi))
 '(movq (var g12589) (reg rdx))
 '(movq (var vec12574) (reg rcx))
 '(indirect-callq (var g12590))
 '(movq (reg rax) (var vec212575))
 '(movq (offset (var vec212575) 8) (var g12592))
 '(movq (offset (var vec212575) 16) (var g12593))
 '(movq (offset (var vec212575) 24) (var g12594))
 '(movq (var g12594) (var g12595))
 '(addq (int 33) (var g12595))
 '(movq (var g12593) (var g12596))
 '(addq (var g12595) (var g12596))
 '(movq (var g12592) (var g12597))
 '(addq (var g12596) (var g12597))
 '(movq (var g12597) (reg rax)))


running pass: register allocation @ utilities.rkt:241
input:
(list
 'program
 (list
  '(vec12574
    vec212575
    g12583
    g12586
    g12590
    g12589
    g12588
    g12597
    g12592
    g12596
    g12593
    g12595
    g12594
    end-data12628
    lt12629
    rootstack12627
    end-data12625
    lt12626
    rootstack12624
    end-data12622
    lt12623
    rootstack12621
    rootstack12620)
  0
  (hash
   'g12594
   (set 'g12592 'g12593 'g12594)
   'g12595
   (set 'g12592 'g12596 'g12593)
   'g12593
   (set 'vec212575 'g12592 'g12593 'g12595 'g12594)
   'rcx
   (set 'g12590)
   'rdx
   (set 'vec12574 'g12590)
   'g12592
   (set 'vec212575 'g12592 'g12596 'g12593 'g12595 'g12594)
   'g12588
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'rootstack12627
    'rootstack12620
    'g12590
    'g12589
    'rdx
    'rcx
    'r8
    'r9
    'r10
    'rdi
    'rsi)
   'g12589
   (set 'g12583 'vec12574 'rootstack12620 'void12617 'g12590 'g12588 'rdi 'rsi)
   'g12590
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'rootstack12627
    'rootstack12620
    'void12617
    'g12590
    'g12589
    'g12588
    'rdx
    'rcx
    'r8
    'r9
    'r10
    'rdi
    'rsi)
   'g12586
   (set
    'g12583
    'vec12574
    'end-data12625
    'lt12626
    'rootstack12624
    'rootstack12620
    'rdx
    'rcx
    'r8
    'r9
    'r10
    'rdi
    'rsi)
   'g12596
   (set 'g12597 'g12592 'g12595)
   'g12597
   (set 'g12596)
   'g12583
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'rootstack12620
    'void12616
    'g12586
    'void12617
    'g12590
    'g12589
    'g12588
    'rdi)
   'rsi
   (set 'vec12574 'rootstack12620 'g12586 'g12590 'g12589 'g12588)
   'rdi
   (set 'g12583 'vec12574 'rootstack12620 'g12586 'g12590 'g12589 'g12588)
   'void12617
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12589)
   'void12616
   (set 'g12583 'vec12574 'rootstack12620)
   'void12615
   (set 'vec12574 'rootstack12620)
   'void12614
   (set 'vec12574 'rootstack12620)
   'void12613
   (set 'vec12574 'rootstack12620)
   'lt12623
   (set 'rootstack12620)
   'end-data12622
   (set 'rootstack12620)
   'rootstack12624
   (set 'rootstack12620 'g12586)
   'lt12626
   (set 'vec12574 'rootstack12620 'g12586)
   'end-data12625
   (set 'vec12574 'rootstack12620 'g12586)
   'rootstack12627
   (set 'rootstack12620 'g12590 'g12588)
   'lt12629
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   'end-data12628
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)
   'rootstack12621
   (set 'rootstack12620)
   'rootstack12620
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'rootstack12627
    'end-data12625
    'lt12626
    'rootstack12624
    'end-data12622
    'lt12623
    'void12613
    'rootstack12621
    'void12614
    'void12615
    'void12616
    'g12586
    'void12617
    'g12590
    'g12589
    'g12588
    'rdx
    'rcx
    'r8
    'r9
    'r10
    'rdi
    'rsi)
   'vec212575
   (set 'g12592 'g12593)
   'vec12574
   (set
    'g12583
    'vec12574
    'end-data12628
    'lt12629
    'end-data12625
    'lt12626
    'void12613
    'void12614
    'rootstack12620
    'void12615
    'void12616
    'g12586
    'void12617
    'g12590
    'g12589
    'g12588
    'rdx
    'rdi
    'rsi)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(func12569)
   4
   (list
    '(g12607
      g12579
      g12606
      g12605
      g12604
      g12580
      g12603
      g12602
      g12601
      g12581
      g12600
      g12599
      g12598
      end-data12632
      lt12633
      rootstack12631
      rootstack12630)
    0
    (hash
     'v12571
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'g12599
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'g12579
      'rdi
      'fun12572
      'g12580
      'rsi
      'g12606
      'g12581)
     'g12607
     (set 'g12603 'g12600 'void12610 'void12611 'void12612 'g12606)
     'fun12572
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'rdi
      'rsi
      'v12571
      'g12606)
     'g12606
     (set
      'g12603
      'g12602
      'g12601
      'g12600
      'g12599
      'g12598
      'end-data12632
      'lt12633
      'rootstack12631
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'rdi
      'fun12572
      'g12607
      'g12580
      'rsi
      'v12571
      'g12581)
     'rdx
     (set
      'g12605
      'g12603
      'g12602
      'g12599
      'rootstack12630
      'fun12572
      'v12571
      'g12606)
     'g12581
     (set 'g12603 'g12599 'g12598 'rootstack12630 'rdi 'v12571 'g12606)
     'rsi
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'g12600
      'g12599
      'g12598
      'rootstack12630
      'fun12572
      'v12571
      'g12606)
     'g12579
     (set 'g12605 'g12604 'rootstack12630 'rdi 'v12571)
     'clos12578
     (set 'rootstack12630)
     'rdi
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'g12600
      'g12599
      'g12598
      'g12579
      'fun12572
      'g12580
      'v12571
      'g12606
      'g12581)
     'g12580
     (set 'g12602 'g12601 'rootstack12630 'rdi 'v12571 'g12606)
     'rootstack12630
     (set
      'g12605
      'g12604
      'g12603
      'g12602
      'g12601
      'g12600
      'g12599
      'g12598
      'end-data12632
      'lt12633
      'rdx
      'rcx
      'r8
      'r9
      'clos12578
      'r10
      'g12579
      'rdi
      'fun12572
      'g12580
      'rsi
      'v12571
      'g12606
      'g12581)
     'rootstack12631
     (set 'g12603 'g12600 'g12606)
     'lt12633
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     'end-data12632
     (set 'g12603 'g12600 'rootstack12630 'g12606)
     'void12612
     (set 'g12607)
     'void12611
     (set 'g12600 'g12607)
     'void12610
     (set 'g12603 'g12600 'g12607)
     'g12598
     (set 'g12603 'g12599 'g12598 'rootstack12630 'rdi 'rsi 'g12606 'g12581)
     'g12599
     (set
      'g12603
      'g12599
      'g12598
      'rootstack12630
      'rdx
      'rdi
      'rsi
      'v12571
      'g12606
      'g12581)
     'g12600
     (set
      'g12603
      'void12610
      'void12611
      'end-data12632
      'lt12633
      'rootstack12631
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'rdi
      'g12607
      'rsi
      'g12606)
     'g12601
     (set
      'g12602
      'g12601
      'rootstack12630
      'rdi
      'fun12572
      'g12580
      'rsi
      'v12571
      'g12606)
     'g12602
     (set
      'g12602
      'g12601
      'rootstack12630
      'rdx
      'rdi
      'fun12572
      'g12580
      'rsi
      'v12571
      'g12606)
     'g12603
     (set
      'g12600
      'g12599
      'g12598
      'void12610
      'end-data12632
      'lt12633
      'rootstack12631
      'rootstack12630
      'rdx
      'rcx
      'r8
      'r9
      'r10
      'rdi
      'fun12572
      'g12607
      'rsi
      'v12571
      'g12606
      'g12581)
     'g12604
     (set 'g12605 'g12604 'rootstack12630 'g12579 'rdi 'fun12572 'rsi 'v12571)
     'g12605
     (set
      'g12605
      'g12604
      'rootstack12630
      'rdx
      'g12579
      'rdi
      'fun12572
      'rsi
      'v12571)))
   '(movq (reg rdi) (var rootstack12630))
   '(movq (reg rsi) (var clos12578))
   '(movq (reg rdx) (var fun12572))
   '(movq (reg rcx) (var v12571))
   '(movq (var fun12572) (var g12579))
   '(movq (offset (var g12579) 8) (var g12605))
   '(movq (offset (var v12571) 8) (var g12604))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12579) (reg rsi))
   '(movq (var g12604) (reg rdx))
   '(indirect-callq (var g12605))
   '(movq (reg rax) (var g12606))
   '(movq (var fun12572) (var g12580))
   '(movq (offset (var g12580) 8) (var g12602))
   '(movq (offset (var v12571) 16) (var g12601))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12580) (reg rsi))
   '(movq (var g12601) (reg rdx))
   '(indirect-callq (var g12602))
   '(movq (reg rax) (var g12603))
   '(movq (var fun12572) (var g12581))
   '(movq (offset (var g12581) 8) (var g12599))
   '(movq (offset (var v12571) 24) (var g12598))
   '(movq (var rootstack12630) (reg rdi))
   '(movq (var g12581) (reg rsi))
   '(movq (var g12598) (reg rdx))
   '(indirect-callq (var g12599))
   '(movq (reg rax) (var g12600))
   '(movq (global-value free_ptr) (var end-data12632))
   '(addq (int 32) (var end-data12632))
   '(cmpq (var end-data12632) (global-value fromspace_end))
   '(setl (byte-reg al))
   '(movzbq (byte-reg al) (var lt12633))
   (list
    'if
    '(eq? (int 0) (var lt12633))
    '()
    '()
    '((movq (var rootstack12630) (var rootstack12631))
      (addq (int 0) (var rootstack12631))
      (movq (var rootstack12631) (reg rdi))
      (movq (int 32) (reg rsi))
      (callq collect))
    (list
     (set 'g12603 'g12600 'rootstack12631 'g12606)
     (set 'g12603 'g12600 'rootstack12631 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12606)
     (set 'g12603 'g12600 'g12606)))
   '(movq (global-value free_ptr) (var g12607))
   '(addq (int 32) (global-value free_ptr))
   '(movq (int 7) (offset (var g12607) 0))
   '(movq (var g12606) (offset (var g12607) 8))
   '(movq (int 47) (var void12610))
   '(movq (var g12603) (offset (var g12607) 16))
   '(movq (int 47) (var void12611))
   '(movq (var g12600) (offset (var g12607) 24))
   '(movq (int 47) (var void12612))
   '(movq (var g12607) (reg rax)))
  (list
   'define
   '(func12570)
   3
   (list '(g12608 rootstack12634) 0 (hash 'x12573 (set) 'g12608 (set)))
   '(movq (reg rdi) (var rootstack12634))
   '(movq (reg rsi) (var clos12582))
   '(movq (reg rdx) (var x12573))
   '(movq (var x12573) (var g12608))
   '(addq (int 1) (var g12608))
   '(movq (var g12608) (reg rax))))
 '(movq (int 10000) (reg rdi))
 '(movq (int 10000) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (var rootstack12620))
 '(movq (global-value free_ptr) (var end-data12622))
 '(addq (int 32) (var end-data12622))
 '(cmpq (var end-data12622) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12623))
 (list
  'if
  '(eq? (int 0) (var lt12623))
  '()
  '()
  '((movq (var rootstack12620) (var rootstack12621))
    (addq (int 0) (var rootstack12621))
    (movq (var rootstack12621) (reg rdi))
    (movq (int 32) (reg rsi))
    (callq collect))
  (list
   (set 'rootstack12621 'rootstack12620)
   (set 'rootstack12621 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)
   (set 'rootstack12620)))
 '(movq (global-value free_ptr) (var vec12574))
 '(addq (int 32) (global-value free_ptr))
 '(movq (int 7) (offset (var vec12574) 0))
 '(movq (int 1) (offset (var vec12574) 8))
 '(movq (int 47) (var void12613))
 '(movq (int 2) (offset (var vec12574) 16))
 '(movq (int 47) (var void12614))
 '(movq (int 3) (offset (var vec12574) 24))
 '(movq (int 47) (var void12615))
 '(leaq (function-ref func12569) (var g12586))
 '(movq (global-value free_ptr) (var end-data12625))
 '(addq (int 16) (var end-data12625))
 '(cmpq (var end-data12625) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12626))
 (list
  'if
  '(eq? (int 0) (var lt12626))
  '()
  '()
  '((movq (var vec12574) (offset (var rootstack12620) 0))
    (movq (var rootstack12620) (var rootstack12624))
    (addq (int 1) (var rootstack12624))
    (movq (var rootstack12624) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (movq (offset (var rootstack12620) 0) (var vec12574)))
  (list
   (set 'rootstack12620 'g12586)
   (set 'rootstack12624 'rootstack12620 'g12586)
   (set 'rootstack12624 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'rootstack12620 'g12586)
   (set 'vec12574 'rootstack12620 'g12586)))
 '(movq (global-value free_ptr) (var g12583))
 '(addq (int 16) (global-value free_ptr))
 '(movq (int 3) (offset (var g12583) 0))
 '(movq (var g12586) (offset (var g12583) 8))
 '(movq (int 47) (var void12616))
 '(movq (offset (var g12583) 8) (var g12590))
 '(leaq (function-ref func12570) (var g12588))
 '(movq (global-value free_ptr) (var end-data12628))
 '(addq (int 16) (var end-data12628))
 '(cmpq (var end-data12628) (global-value fromspace_end))
 '(setl (byte-reg al))
 '(movzbq (byte-reg al) (var lt12629))
 (list
  'if
  '(eq? (int 0) (var lt12629))
  '()
  '()
  '((movq (var vec12574) (offset (var rootstack12620) 0))
    (movq (var g12583) (offset (var rootstack12620) 8))
    (movq (var rootstack12620) (var rootstack12627))
    (addq (int 2) (var rootstack12627))
    (movq (var rootstack12627) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (movq (offset (var rootstack12620) 0) (var vec12574))
    (movq (offset (var rootstack12620) 8) (var g12583)))
  (list
   (set 'g12583 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12627 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12627 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'rootstack12620 'g12590 'g12588)
   (set 'vec12574 'rootstack12620 'g12590 'g12588)
   (set 'g12583 'vec12574 'rootstack12620 'g12590 'g12588)))
 '(movq (global-value free_ptr) (var g12589))
 '(addq (int 16) (global-value free_ptr))
 '(movq (int 3) (offset (var g12589) 0))
 '(movq (var g12588) (offset (var g12589) 8))
 '(movq (int 47) (var void12617))
 '(movq (var rootstack12620) (reg rdi))
 '(movq (var g12583) (reg rsi))
 '(movq (var g12589) (reg rdx))
 '(movq (var vec12574) (reg rcx))
 '(indirect-callq (var g12590))
 '(movq (reg rax) (var vec212575))
 '(movq (offset (var vec212575) 8) (var g12592))
 '(movq (offset (var vec212575) 16) (var g12593))
 '(movq (offset (var vec212575) 24) (var g12594))
 '(movq (var g12594) (var g12595))
 '(addq (int 33) (var g12595))
 '(movq (var g12593) (var g12596))
 '(addq (var g12595) (var g12596))
 '(movq (var g12592) (var g12597))
 '(addq (var g12596) (var g12597))
 '(movq (var g12597) (reg rax)))


running pass: register allocation @ utilities.rkt:245
output:
'(program
  0
  (type Integer)
  (defines
   (define (func12569)
     0
     5
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg r12))
     (movq (reg rdx) (stack -64))
     (movq (reg rcx) (stack -56))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 8) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -40))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 16) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -48))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 24) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -56))
     (movq (global-value free_ptr) (reg r12))
     (addq (int 32) (reg r12))
     (cmpq (reg r12) (global-value fromspace_end))
     (setl (byte-reg al))
     (movzbq (byte-reg al) (reg r12))
     (if (eq? (int 0) (reg r12))
       ()
       ((movq (reg rbx) (reg rbx))
        (addq (int 0) (reg rbx))
        (movq (reg rbx) (reg rdi))
        (movq (int 32) (reg rsi))
        (callq collect)))
     (movq (global-value free_ptr) (reg rbx))
     (addq (int 32) (global-value free_ptr))
     (movq (int 7) (offset (reg rbx) 0))
     (movq (stack -40) (offset (reg rbx) 8))
     (movq (int 47) (reg r12))
     (movq (stack -48) (offset (reg rbx) 16))
     (movq (int 47) (reg r12))
     (movq (stack -56) (offset (reg rbx) 24))
     (movq (int 47) (reg r12))
     (movq (reg rbx) (reg rax)))
   (define (func12570)
     0
     0
     (movq (reg rdi) (reg rax))
     (movq (reg rsi) (reg rax))
     (movq (reg rdx) (reg rax))
     (movq (reg rax) (reg rax))
     (addq (int 1) (reg rax))
     (movq (reg rax) (reg rax))))
  (movq (int 10000) (reg rdi))
  (movq (int 10000) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (reg rcx))
  (cmpq (reg rcx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (if (eq? (int 0) (reg rcx))
    ()
    ((movq (reg rbx) (reg rcx))
     (addq (int 0) (reg rcx))
     (movq (reg rcx) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (global-value free_ptr))
  (movq (int 7) (offset (reg rcx) 0))
  (movq (int 1) (offset (reg rcx) 8))
  (movq (int 47) (reg rdx))
  (movq (int 2) (offset (reg rcx) 16))
  (movq (int 47) (reg rdx))
  (movq (int 3) (offset (reg rcx) 24))
  (movq (int 47) (reg rdx))
  (leaq (function-ref func12569) (reg r13))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (reg rdx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (if (eq? (int 0) (reg rdx))
    ()
    ((movq (reg rcx) (offset (reg rbx) 0))
     (movq (reg rbx) (reg rcx))
     (addq (int 1) (reg rcx))
     (movq (reg rcx) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (reg rbx) 0) (reg rcx))))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg rdx) 0))
  (movq (reg r13) (offset (reg rdx) 8))
  (movq (int 47) (reg rsi))
  (movq (offset (reg rdx) 8) (reg r13))
  (leaq (function-ref func12570) (reg r14))
  (movq (global-value free_ptr) (reg rsi))
  (addq (int 16) (reg rsi))
  (cmpq (reg rsi) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rsi))
  (if (eq? (int 0) (reg rsi))
    ()
    ((movq (reg rcx) (offset (reg rbx) 0))
     (movq (reg rdx) (offset (reg rbx) 8))
     (movq (reg rbx) (reg rcx))
     (addq (int 2) (reg rcx))
     (movq (reg rcx) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (reg rbx) 0) (reg rcx))
     (movq (offset (reg rbx) 8) (reg rdx))))
  (movq (global-value free_ptr) (reg r8))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg r8) 0))
  (movq (reg r14) (offset (reg r8) 8))
  (movq (int 47) (reg rsi))
  (movq (reg rbx) (reg rdi))
  (movq (reg rdx) (reg rsi))
  (movq (reg r8) (reg rdx))
  (movq (reg rcx) (reg rcx))
  (indirect-callq (reg r13))
  (movq (reg rax) (reg rdx))
  (movq (offset (reg rdx) 8) (reg rbx))
  (movq (offset (reg rdx) 16) (reg rcx))
  (movq (offset (reg rdx) 24) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (addq (int 33) (reg rdx))
  (movq (reg rcx) (reg rcx))
  (addq (reg rdx) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: lower condition @ utilities.rkt:241
input:
'(program
  0
  (type Integer)
  (defines
   (define (func12569)
     0
     5
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg r12))
     (movq (reg rdx) (stack -64))
     (movq (reg rcx) (stack -56))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 8) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -40))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 16) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -48))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 24) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -56))
     (movq (global-value free_ptr) (reg r12))
     (addq (int 32) (reg r12))
     (cmpq (reg r12) (global-value fromspace_end))
     (setl (byte-reg al))
     (movzbq (byte-reg al) (reg r12))
     (if (eq? (int 0) (reg r12))
       ()
       ((movq (reg rbx) (reg rbx))
        (addq (int 0) (reg rbx))
        (movq (reg rbx) (reg rdi))
        (movq (int 32) (reg rsi))
        (callq collect)))
     (movq (global-value free_ptr) (reg rbx))
     (addq (int 32) (global-value free_ptr))
     (movq (int 7) (offset (reg rbx) 0))
     (movq (stack -40) (offset (reg rbx) 8))
     (movq (int 47) (reg r12))
     (movq (stack -48) (offset (reg rbx) 16))
     (movq (int 47) (reg r12))
     (movq (stack -56) (offset (reg rbx) 24))
     (movq (int 47) (reg r12))
     (movq (reg rbx) (reg rax)))
   (define (func12570)
     0
     0
     (movq (reg rdi) (reg rax))
     (movq (reg rsi) (reg rax))
     (movq (reg rdx) (reg rax))
     (movq (reg rax) (reg rax))
     (addq (int 1) (reg rax))
     (movq (reg rax) (reg rax))))
  (movq (int 10000) (reg rdi))
  (movq (int 10000) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (reg rcx))
  (cmpq (reg rcx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (if (eq? (int 0) (reg rcx))
    ()
    ((movq (reg rbx) (reg rcx))
     (addq (int 0) (reg rcx))
     (movq (reg rcx) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (global-value free_ptr))
  (movq (int 7) (offset (reg rcx) 0))
  (movq (int 1) (offset (reg rcx) 8))
  (movq (int 47) (reg rdx))
  (movq (int 2) (offset (reg rcx) 16))
  (movq (int 47) (reg rdx))
  (movq (int 3) (offset (reg rcx) 24))
  (movq (int 47) (reg rdx))
  (leaq (function-ref func12569) (reg r13))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (reg rdx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (if (eq? (int 0) (reg rdx))
    ()
    ((movq (reg rcx) (offset (reg rbx) 0))
     (movq (reg rbx) (reg rcx))
     (addq (int 1) (reg rcx))
     (movq (reg rcx) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (reg rbx) 0) (reg rcx))))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg rdx) 0))
  (movq (reg r13) (offset (reg rdx) 8))
  (movq (int 47) (reg rsi))
  (movq (offset (reg rdx) 8) (reg r13))
  (leaq (function-ref func12570) (reg r14))
  (movq (global-value free_ptr) (reg rsi))
  (addq (int 16) (reg rsi))
  (cmpq (reg rsi) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rsi))
  (if (eq? (int 0) (reg rsi))
    ()
    ((movq (reg rcx) (offset (reg rbx) 0))
     (movq (reg rdx) (offset (reg rbx) 8))
     (movq (reg rbx) (reg rcx))
     (addq (int 2) (reg rcx))
     (movq (reg rcx) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (movq (offset (reg rbx) 0) (reg rcx))
     (movq (offset (reg rbx) 8) (reg rdx))))
  (movq (global-value free_ptr) (reg r8))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg r8) 0))
  (movq (reg r14) (offset (reg r8) 8))
  (movq (int 47) (reg rsi))
  (movq (reg rbx) (reg rdi))
  (movq (reg rdx) (reg rsi))
  (movq (reg r8) (reg rdx))
  (movq (reg rcx) (reg rcx))
  (indirect-callq (reg r13))
  (movq (reg rax) (reg rdx))
  (movq (offset (reg rdx) 8) (reg rbx))
  (movq (offset (reg rdx) 16) (reg rcx))
  (movq (offset (reg rdx) 24) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (addq (int 33) (reg rdx))
  (movq (reg rcx) (reg rcx))
  (addq (reg rdx) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: lower condition @ utilities.rkt:245
output:
'(program
  0
  (type Integer)
  (defines
   (define (func12569)
     0
     5
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg r12))
     (movq (reg rdx) (stack -64))
     (movq (reg rcx) (stack -56))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 8) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -40))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 16) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -48))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 24) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -56))
     (movq (global-value free_ptr) (reg r12))
     (addq (int 32) (reg r12))
     (cmpq (reg r12) (global-value fromspace_end))
     (setl (byte-reg al))
     (movzbq (byte-reg al) (reg r12))
     (cmpq (int 0) (reg r12))
     (je then12913)
     (movq (reg rbx) (reg rbx))
     (addq (int 0) (reg rbx))
     (movq (reg rbx) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (jmp ifend12914)
     (label then12913)
     (label ifend12914)
     (movq (global-value free_ptr) (reg rbx))
     (addq (int 32) (global-value free_ptr))
     (movq (int 7) (offset (reg rbx) 0))
     (movq (stack -40) (offset (reg rbx) 8))
     (movq (int 47) (reg r12))
     (movq (stack -48) (offset (reg rbx) 16))
     (movq (int 47) (reg r12))
     (movq (stack -56) (offset (reg rbx) 24))
     (movq (int 47) (reg r12))
     (movq (reg rbx) (reg rax)))
   (define (func12570)
     0
     0
     (movq (reg rdi) (reg rax))
     (movq (reg rsi) (reg rax))
     (movq (reg rdx) (reg rax))
     (movq (reg rax) (reg rax))
     (addq (int 1) (reg rax))
     (movq (reg rax) (reg rax))))
  (movq (int 10000) (reg rdi))
  (movq (int 10000) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (reg rcx))
  (cmpq (reg rcx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (je then12838)
  (movq (reg rbx) (reg rcx))
  (addq (int 0) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 32) (reg rsi))
  (callq collect)
  (jmp ifend12839)
  (label then12838)
  (label ifend12839)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (global-value free_ptr))
  (movq (int 7) (offset (reg rcx) 0))
  (movq (int 1) (offset (reg rcx) 8))
  (movq (int 47) (reg rdx))
  (movq (int 2) (offset (reg rcx) 16))
  (movq (int 47) (reg rdx))
  (movq (int 3) (offset (reg rcx) 24))
  (movq (int 47) (reg rdx))
  (leaq (function-ref func12569) (reg r13))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (reg rdx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (je then12769)
  (movq (reg rcx) (offset (reg rbx) 0))
  (movq (reg rbx) (reg rcx))
  (addq (int 1) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (movq (offset (reg rbx) 0) (reg rcx))
  (jmp ifend12770)
  (label then12769)
  (label ifend12770)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg rdx) 0))
  (movq (reg r13) (offset (reg rdx) 8))
  (movq (int 47) (reg rsi))
  (movq (offset (reg rdx) 8) (reg r13))
  (leaq (function-ref func12570) (reg r14))
  (movq (global-value free_ptr) (reg rsi))
  (addq (int 16) (reg rsi))
  (cmpq (reg rsi) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rsi))
  (cmpq (int 0) (reg rsi))
  (je then12703)
  (movq (reg rcx) (offset (reg rbx) 0))
  (movq (reg rdx) (offset (reg rbx) 8))
  (movq (reg rbx) (reg rcx))
  (addq (int 2) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (movq (offset (reg rbx) 0) (reg rcx))
  (movq (offset (reg rbx) 8) (reg rdx))
  (jmp ifend12704)
  (label then12703)
  (label ifend12704)
  (movq (global-value free_ptr) (reg r8))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg r8) 0))
  (movq (reg r14) (offset (reg r8) 8))
  (movq (int 47) (reg rsi))
  (movq (reg rbx) (reg rdi))
  (movq (reg rdx) (reg rsi))
  (movq (reg r8) (reg rdx))
  (movq (reg rcx) (reg rcx))
  (indirect-callq (reg r13))
  (movq (reg rax) (reg rdx))
  (movq (offset (reg rdx) 8) (reg rbx))
  (movq (offset (reg rdx) 16) (reg rcx))
  (movq (offset (reg rdx) 24) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (addq (int 33) (reg rdx))
  (movq (reg rcx) (reg rcx))
  (addq (reg rdx) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: patch instructions @ utilities.rkt:241
input:
'(program
  0
  (type Integer)
  (defines
   (define (func12569)
     0
     5
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg r12))
     (movq (reg rdx) (stack -64))
     (movq (reg rcx) (stack -56))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 8) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -40))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 16) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -48))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (stack -8))
     (movq (offset (stack -56) 24) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -56))
     (movq (global-value free_ptr) (reg r12))
     (addq (int 32) (reg r12))
     (cmpq (reg r12) (global-value fromspace_end))
     (setl (byte-reg al))
     (movzbq (byte-reg al) (reg r12))
     (cmpq (int 0) (reg r12))
     (je then12913)
     (movq (reg rbx) (reg rbx))
     (addq (int 0) (reg rbx))
     (movq (reg rbx) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (jmp ifend12914)
     (label then12913)
     (label ifend12914)
     (movq (global-value free_ptr) (reg rbx))
     (addq (int 32) (global-value free_ptr))
     (movq (int 7) (offset (reg rbx) 0))
     (movq (stack -40) (offset (reg rbx) 8))
     (movq (int 47) (reg r12))
     (movq (stack -48) (offset (reg rbx) 16))
     (movq (int 47) (reg r12))
     (movq (stack -56) (offset (reg rbx) 24))
     (movq (int 47) (reg r12))
     (movq (reg rbx) (reg rax)))
   (define (func12570)
     0
     0
     (movq (reg rdi) (reg rax))
     (movq (reg rsi) (reg rax))
     (movq (reg rdx) (reg rax))
     (movq (reg rax) (reg rax))
     (addq (int 1) (reg rax))
     (movq (reg rax) (reg rax))))
  (movq (int 10000) (reg rdi))
  (movq (int 10000) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (reg rcx))
  (cmpq (reg rcx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (je then12838)
  (movq (reg rbx) (reg rcx))
  (addq (int 0) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 32) (reg rsi))
  (callq collect)
  (jmp ifend12839)
  (label then12838)
  (label ifend12839)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (global-value free_ptr))
  (movq (int 7) (offset (reg rcx) 0))
  (movq (int 1) (offset (reg rcx) 8))
  (movq (int 47) (reg rdx))
  (movq (int 2) (offset (reg rcx) 16))
  (movq (int 47) (reg rdx))
  (movq (int 3) (offset (reg rcx) 24))
  (movq (int 47) (reg rdx))
  (leaq (function-ref func12569) (reg r13))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (reg rdx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (je then12769)
  (movq (reg rcx) (offset (reg rbx) 0))
  (movq (reg rbx) (reg rcx))
  (addq (int 1) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (movq (offset (reg rbx) 0) (reg rcx))
  (jmp ifend12770)
  (label then12769)
  (label ifend12770)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg rdx) 0))
  (movq (reg r13) (offset (reg rdx) 8))
  (movq (int 47) (reg rsi))
  (movq (offset (reg rdx) 8) (reg r13))
  (leaq (function-ref func12570) (reg r14))
  (movq (global-value free_ptr) (reg rsi))
  (addq (int 16) (reg rsi))
  (cmpq (reg rsi) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rsi))
  (cmpq (int 0) (reg rsi))
  (je then12703)
  (movq (reg rcx) (offset (reg rbx) 0))
  (movq (reg rdx) (offset (reg rbx) 8))
  (movq (reg rbx) (reg rcx))
  (addq (int 2) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (movq (offset (reg rbx) 0) (reg rcx))
  (movq (offset (reg rbx) 8) (reg rdx))
  (jmp ifend12704)
  (label then12703)
  (label ifend12704)
  (movq (global-value free_ptr) (reg r8))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg r8) 0))
  (movq (reg r14) (offset (reg r8) 8))
  (movq (int 47) (reg rsi))
  (movq (reg rbx) (reg rdi))
  (movq (reg rdx) (reg rsi))
  (movq (reg r8) (reg rdx))
  (movq (reg rcx) (reg rcx))
  (indirect-callq (reg r13))
  (movq (reg rax) (reg rdx))
  (movq (offset (reg rdx) 8) (reg rbx))
  (movq (offset (reg rdx) 16) (reg rcx))
  (movq (offset (reg rdx) 24) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (addq (int 33) (reg rdx))
  (movq (reg rcx) (reg rcx))
  (addq (reg rdx) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: patch instructions @ utilities.rkt:245
output:
'(program
  0
  (type Integer)
  (defines
   (define (func12569)
     0
     5
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg r12))
     (movq (reg rdx) (stack -64))
     (movq (reg rcx) (stack -56))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (reg rax))
     (movq (reg rax) (stack -8))
     (movq (stack -56) (reg r11))
     (movq (offset (reg r11) 8) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -40))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (reg rax))
     (movq (reg rax) (stack -8))
     (movq (stack -56) (reg r11))
     (movq (offset (reg r11) 16) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -48))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (reg rax))
     (movq (reg rax) (stack -8))
     (movq (stack -56) (reg r11))
     (movq (offset (reg r11) 24) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -56))
     (movq (global-value free_ptr) (reg r12))
     (addq (int 32) (reg r12))
     (cmpq (reg r12) (global-value fromspace_end))
     (setl (byte-reg al))
     (movzbq (byte-reg al) (reg r12))
     (cmpq (int 0) (reg r12))
     (je then12913)
     (addq (int 0) (reg rbx))
     (movq (reg rbx) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (jmp ifend12914)
     (label then12913)
     (label ifend12914)
     (movq (global-value free_ptr) (reg rbx))
     (addq (int 32) (global-value free_ptr))
     (movq (int 7) (offset (reg rbx) 0))
     (movq (stack -40) (reg rax))
     (movq (reg rax) (offset (reg rbx) 8))
     (movq (int 47) (reg r12))
     (movq (stack -48) (reg rax))
     (movq (reg rax) (offset (reg rbx) 16))
     (movq (int 47) (reg r12))
     (movq (stack -56) (reg rax))
     (movq (reg rax) (offset (reg rbx) 24))
     (movq (int 47) (reg r12))
     (movq (reg rbx) (reg rax)))
   (define (func12570)
     0
     0
     (movq (reg rdi) (reg rax))
     (movq (reg rsi) (reg rax))
     (movq (reg rdx) (reg rax))
     (addq (int 1) (reg rax))))
  (movq (int 10000) (reg rdi))
  (movq (int 10000) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (reg rcx))
  (cmpq (reg rcx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (je then12838)
  (movq (reg rbx) (reg rcx))
  (addq (int 0) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 32) (reg rsi))
  (callq collect)
  (jmp ifend12839)
  (label then12838)
  (label ifend12839)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (global-value free_ptr))
  (movq (int 7) (offset (reg rcx) 0))
  (movq (int 1) (offset (reg rcx) 8))
  (movq (int 47) (reg rdx))
  (movq (int 2) (offset (reg rcx) 16))
  (movq (int 47) (reg rdx))
  (movq (int 3) (offset (reg rcx) 24))
  (movq (int 47) (reg rdx))
  (leaq (function-ref func12569) (reg r13))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (reg rdx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (je then12769)
  (movq (reg rcx) (offset (reg rbx) 0))
  (movq (reg rbx) (reg rcx))
  (addq (int 1) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (movq (offset (reg rbx) 0) (reg rcx))
  (jmp ifend12770)
  (label then12769)
  (label ifend12770)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg rdx) 0))
  (movq (reg r13) (offset (reg rdx) 8))
  (movq (int 47) (reg rsi))
  (movq (offset (reg rdx) 8) (reg r13))
  (leaq (function-ref func12570) (reg r14))
  (movq (global-value free_ptr) (reg rsi))
  (addq (int 16) (reg rsi))
  (cmpq (reg rsi) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rsi))
  (cmpq (int 0) (reg rsi))
  (je then12703)
  (movq (reg rcx) (offset (reg rbx) 0))
  (movq (reg rdx) (offset (reg rbx) 8))
  (movq (reg rbx) (reg rcx))
  (addq (int 2) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (movq (offset (reg rbx) 0) (reg rcx))
  (movq (offset (reg rbx) 8) (reg rdx))
  (jmp ifend12704)
  (label then12703)
  (label ifend12704)
  (movq (global-value free_ptr) (reg r8))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg r8) 0))
  (movq (reg r14) (offset (reg r8) 8))
  (movq (int 47) (reg rsi))
  (movq (reg rbx) (reg rdi))
  (movq (reg rdx) (reg rsi))
  (movq (reg r8) (reg rdx))
  (indirect-callq (reg r13))
  (movq (reg rax) (reg rdx))
  (movq (offset (reg rdx) 8) (reg rbx))
  (movq (offset (reg rdx) 16) (reg rcx))
  (movq (offset (reg rdx) 24) (reg rdx))
  (addq (int 33) (reg rdx))
  (addq (reg rdx) (reg rcx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: print x86 @ utilities.rkt:241
input:
'(program
  0
  (type Integer)
  (defines
   (define (func12569)
     0
     5
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg r12))
     (movq (reg rdx) (stack -64))
     (movq (reg rcx) (stack -56))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (reg rax))
     (movq (reg rax) (stack -8))
     (movq (stack -56) (reg r11))
     (movq (offset (reg r11) 8) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -40))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (reg rax))
     (movq (reg rax) (stack -8))
     (movq (stack -56) (reg r11))
     (movq (offset (reg r11) 16) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -48))
     (movq (stack -64) (reg r14))
     (movq (offset (reg r14) 8) (reg rax))
     (movq (reg rax) (stack -8))
     (movq (stack -56) (reg r11))
     (movq (offset (reg r11) 24) (reg r13))
     (movq (reg rbx) (reg rdi))
     (movq (reg r14) (reg rsi))
     (movq (reg r13) (reg rdx))
     (indirect-callq (stack -8))
     (movq (reg rax) (stack -56))
     (movq (global-value free_ptr) (reg r12))
     (addq (int 32) (reg r12))
     (cmpq (reg r12) (global-value fromspace_end))
     (setl (byte-reg al))
     (movzbq (byte-reg al) (reg r12))
     (cmpq (int 0) (reg r12))
     (je then12913)
     (addq (int 0) (reg rbx))
     (movq (reg rbx) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (jmp ifend12914)
     (label then12913)
     (label ifend12914)
     (movq (global-value free_ptr) (reg rbx))
     (addq (int 32) (global-value free_ptr))
     (movq (int 7) (offset (reg rbx) 0))
     (movq (stack -40) (reg rax))
     (movq (reg rax) (offset (reg rbx) 8))
     (movq (int 47) (reg r12))
     (movq (stack -48) (reg rax))
     (movq (reg rax) (offset (reg rbx) 16))
     (movq (int 47) (reg r12))
     (movq (stack -56) (reg rax))
     (movq (reg rax) (offset (reg rbx) 24))
     (movq (int 47) (reg r12))
     (movq (reg rbx) (reg rax)))
   (define (func12570)
     0
     0
     (movq (reg rdi) (reg rax))
     (movq (reg rsi) (reg rax))
     (movq (reg rdx) (reg rax))
     (addq (int 1) (reg rax))))
  (movq (int 10000) (reg rdi))
  (movq (int 10000) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (reg rcx))
  (cmpq (reg rcx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (je then12838)
  (movq (reg rbx) (reg rcx))
  (addq (int 0) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 32) (reg rsi))
  (callq collect)
  (jmp ifend12839)
  (label then12838)
  (label ifend12839)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 32) (global-value free_ptr))
  (movq (int 7) (offset (reg rcx) 0))
  (movq (int 1) (offset (reg rcx) 8))
  (movq (int 47) (reg rdx))
  (movq (int 2) (offset (reg rcx) 16))
  (movq (int 47) (reg rdx))
  (movq (int 3) (offset (reg rcx) 24))
  (movq (int 47) (reg rdx))
  (leaq (function-ref func12569) (reg r13))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (reg rdx) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (je then12769)
  (movq (reg rcx) (offset (reg rbx) 0))
  (movq (reg rbx) (reg rcx))
  (addq (int 1) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (movq (offset (reg rbx) 0) (reg rcx))
  (jmp ifend12770)
  (label then12769)
  (label ifend12770)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg rdx) 0))
  (movq (reg r13) (offset (reg rdx) 8))
  (movq (int 47) (reg rsi))
  (movq (offset (reg rdx) 8) (reg r13))
  (leaq (function-ref func12570) (reg r14))
  (movq (global-value free_ptr) (reg rsi))
  (addq (int 16) (reg rsi))
  (cmpq (reg rsi) (global-value fromspace_end))
  (setl (byte-reg al))
  (movzbq (byte-reg al) (reg rsi))
  (cmpq (int 0) (reg rsi))
  (je then12703)
  (movq (reg rcx) (offset (reg rbx) 0))
  (movq (reg rdx) (offset (reg rbx) 8))
  (movq (reg rbx) (reg rcx))
  (addq (int 2) (reg rcx))
  (movq (reg rcx) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (movq (offset (reg rbx) 0) (reg rcx))
  (movq (offset (reg rbx) 8) (reg rdx))
  (jmp ifend12704)
  (label then12703)
  (label ifend12704)
  (movq (global-value free_ptr) (reg r8))
  (addq (int 16) (global-value free_ptr))
  (movq (int 3) (offset (reg r8) 0))
  (movq (reg r14) (offset (reg r8) 8))
  (movq (int 47) (reg rsi))
  (movq (reg rbx) (reg rdi))
  (movq (reg rdx) (reg rsi))
  (movq (reg r8) (reg rdx))
  (indirect-callq (reg r13))
  (movq (reg rax) (reg rdx))
  (movq (offset (reg rdx) 8) (reg rbx))
  (movq (offset (reg rdx) 16) (reg rcx))
  (movq (offset (reg rdx) 24) (reg rdx))
  (addq (int 33) (reg rdx))
  (addq (reg rdx) (reg rcx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: print x86 @ utilities.rkt:245
output:

    .globl func12569
func12569:
    pushq   %rbp
    movq    %rsp, %rbp
    pushq   %r15
    pushq   %r14
    pushq   %r13
    pushq   %r12
    pushq   %rbx
    subq    $40, %rsp
	movq  %rdi, %rbx 
	 movq  %rsi, %r12 
	 movq  %rdx, -64(%rbp) 
	 movq  %rcx, -56(%rbp) 
	 movq  -64(%rbp), %r14 
	 movq  8(%r14), %rax 
	 movq  %rax, -8(%rbp) 
	 movq  -56(%rbp), %r11 
	 movq  8(%r11), %r13 
	 movq  %rbx, %rdi 
	 movq  %r14, %rsi 
	 movq  %r13, %rdx 
	 callq *-8(%rbp)
	 movq  %rax, -40(%rbp) 
	 movq  -64(%rbp), %r14 
	 movq  8(%r14), %rax 
	 movq  %rax, -8(%rbp) 
	 movq  -56(%rbp), %r11 
	 movq  16(%r11), %r13 
	 movq  %rbx, %rdi 
	 movq  %r14, %rsi 
	 movq  %r13, %rdx 
	 callq *-8(%rbp)
	 movq  %rax, -48(%rbp) 
	 movq  -64(%rbp), %r14 
	 movq  8(%r14), %rax 
	 movq  %rax, -8(%rbp) 
	 movq  -56(%rbp), %r11 
	 movq  24(%r11), %r13 
	 movq  %rbx, %rdi 
	 movq  %r14, %rsi 
	 movq  %r13, %rdx 
	 callq *-8(%rbp)
	 movq  %rax, -56(%rbp) 
	 movq  free_ptr(%rip), %r12 
	 addq  $32, %r12 
	 cmpq  %r12, fromspace_end(%rip) 
	 setl  %al
	 movzbq  %al, %r12 
	 cmpq  $0, %r12 
	 je  then12913
	 addq  $0, %rbx 
	 movq  %rbx, %rdi 
	 movq  $32, %rsi 
	 callq  collect
	 jmp  ifend12914
	 then12913:
 ifend12914:
 movq  free_ptr(%rip), %rbx 
	 addq  $32, free_ptr(%rip) 
	 movq  $7, 0(%rbx) 
	 movq  -40(%rbp), %rax 
	 movq  %rax, 8(%rbx) 
	 movq  $47, %r12 
	 movq  -48(%rbp), %rax 
	 movq  %rax, 16(%rbx) 
	 movq  $47, %r12 
	 movq  -56(%rbp), %rax 
	 movq  %rax, 24(%rbx) 
	 movq  $47, %r12 
	 movq  %rbx, %rax 
	    addq    $40, %rsp
    popq    %rbx
    popq    %r12
    popq    %r13
    popq    %r14
    popq    %r15
    popq    %rbp
    retq
    .globl func12570
func12570:
    pushq   %rbp
    movq    %rsp, %rbp
    pushq   %r15
    pushq   %r14
    pushq   %r13
    pushq   %r12
    pushq   %rbx
    subq    $0, %rsp
	movq  %rdi, %rax 
	 movq  %rsi, %rax 
	 movq  %rdx, %rax 
	 addq  $1, %rax 
	    addq    $0, %rsp
    popq    %rbx
    popq    %r12
    popq    %r13
    popq    %r14
    popq    %r15
    popq    %rbp
    retq
    .globl main
main:
    pushq   %rbp
    movq    %rsp, %rbp
    pushq   %r15
    pushq   %r14
    pushq   %r13
    pushq   %r12
    pushq   %rbx
    subq    $0, %rsp
	movq  $10000, %rdi 
	 movq  $10000, %rsi 
	 callq  initialize
	 movq  rootstack_begin(%rip), %rbx 
	 movq  free_ptr(%rip), %rcx 
	 addq  $32, %rcx 
	 cmpq  %rcx, fromspace_end(%rip) 
	 setl  %al
	 movzbq  %al, %rcx 
	 cmpq  $0, %rcx 
	 je  then12838
	 movq  %rbx, %rcx 
	 addq  $0, %rcx 
	 movq  %rcx, %rdi 
	 movq  $32, %rsi 
	 callq  collect
	 jmp  ifend12839
	 then12838:
 ifend12839:
 movq  free_ptr(%rip), %rcx 
	 addq  $32, free_ptr(%rip) 
	 movq  $7, 0(%rcx) 
	 movq  $1, 8(%rcx) 
	 movq  $47, %rdx 
	 movq  $2, 16(%rcx) 
	 movq  $47, %rdx 
	 movq  $3, 24(%rcx) 
	 movq  $47, %rdx 
	 leaq  func12569(%rip), %r13 
	 movq  free_ptr(%rip), %rdx 
	 addq  $16, %rdx 
	 cmpq  %rdx, fromspace_end(%rip) 
	 setl  %al
	 movzbq  %al, %rdx 
	 cmpq  $0, %rdx 
	 je  then12769
	 movq  %rcx, 0(%rbx) 
	 movq  %rbx, %rcx 
	 addq  $1, %rcx 
	 movq  %rcx, %rdi 
	 movq  $16, %rsi 
	 callq  collect
	 movq  0(%rbx), %rcx 
	 jmp  ifend12770
	 then12769:
 ifend12770:
 movq  free_ptr(%rip), %rdx 
	 addq  $16, free_ptr(%rip) 
	 movq  $3, 0(%rdx) 
	 movq  %r13, 8(%rdx) 
	 movq  $47, %rsi 
	 movq  8(%rdx), %r13 
	 leaq  func12570(%rip), %r14 
	 movq  free_ptr(%rip), %rsi 
	 addq  $16, %rsi 
	 cmpq  %rsi, fromspace_end(%rip) 
	 setl  %al
	 movzbq  %al, %rsi 
	 cmpq  $0, %rsi 
	 je  then12703
	 movq  %rcx, 0(%rbx) 
	 movq  %rdx, 8(%rbx) 
	 movq  %rbx, %rcx 
	 addq  $2, %rcx 
	 movq  %rcx, %rdi 
	 movq  $16, %rsi 
	 callq  collect
	 movq  0(%rbx), %rcx 
	 movq  8(%rbx), %rdx 
	 jmp  ifend12704
	 then12703:
 ifend12704:
 movq  free_ptr(%rip), %r8 
	 addq  $16, free_ptr(%rip) 
	 movq  $3, 0(%r8) 
	 movq  %r14, 8(%r8) 
	 movq  $47, %rsi 
	 movq  %rbx, %rdi 
	 movq  %rdx, %rsi 
	 movq  %r8, %rdx 
	 callq *%r13
	 movq  %rax, %rdx 
	 movq  8(%rdx), %rbx 
	 movq  16(%rdx), %rcx 
	 movq  24(%rdx), %rdx 
	 addq  $33, %rdx 
	 addq  %rdx, %rcx 
	 addq  %rcx, %rbx 
	 movq  %rbx, %rax 
	    movq    %rax, %rdi
	   callq print_int
	    movq    $0, %rax
    addq    $0, %rsp
    popq    %rbx
    popq    %r12
    popq    %r13
    popq    %r14
    popq    %r15
    popq    %rbp   
    retq

r4 tests passed!
