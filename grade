ASSIGNMENT 1:
19/19 test cases interpreted successfully.
19/19 test cases compiled and executed correctly.
Great work!

ASSIGNMENT 2:
8/8 new test cases interpreted successfully.
8/8 new test cases compiled and executed successfully.
Register allocation and move biasing seems fine except that you only
use callee-save registers. You get full credit for this assignment,
but I very strongly suggest that you implement a solution to allow the
use of caller-save registers going forwards.
Regardless, well done.

ASSIGNMENT 3:
Please export a "typechecker" value as described in the Piazza post for this assignment.

Part of this assignment required you to move 0 to %rax at the end of
your programs, as an exit code of normal termination. I won't penalize
you further for not doing so this time but ensure you fix this for
the next assignment.

13/23 new test cases compiled successfully.
16/23 new test cases interpreted successfully.
All old test cases worked correctly modulo the above issue about exit codes.

It appears that a major problem in your compiler is that it doesn't
hadle if statements well. They turn up in your printed x86, and of
course they aren't valid x86 instructions.

Also, in many programs your flattening pass doesn't work as intended
-- if there is a nested if inside the condition of the outer if, you
aren't flattening the inner if. In fact, it looks like you aren't
flattening the condition of the if in some other cases, too, like when
the condition is a (eq?)

Also note that in the r2_19 test case, the interpreter asks for input,
but none should be required -- and is a short-circuiting operator so
(and #f (eq? (read) 42)) should never ask the user for input.

Remember to submit a fixed version in one week for most of the remaining credit.

	   V compiler	     V cases that interpret 	   V partial credit for cases that worked up to flattening
Grade: (.5 * 13/23) + (.5 * (16/23 + (3/10 * 3/23) + (2/10 * 4/23))) = 67%
       	     	      	  ^ interpreter	   ^ partial credit for cases that worked up to select-instructions


ASSIGNMENT 3 (late):

You /still/ didn't add a "typechecker" value to your compiler.rkt,
which meant that I had to go in and edit it manually. We won't
penalize you for this, but please read the Piazza post for the
assignment in the future.

23/23 test cases compile and interpret correctly. Well done.

Final grade: 97%

ASSIGNMENT 4:
13/14 test cases interpret successfully.
0/14 test cases compile successfully.
12/14 test cases compile successfully using an empty runtime.c

There are syntax errors in your runtime.c and it won't
compile. Because of this, none of your test cases compiled
successfully.

We graded your assignment using an empty runtime.c (the template we
provided to you) that doesn't do any garbage collection. We're giving
you partial credit for the compiler test cases you passed with the
empty runtime.c. Of course, you also get partial credit for the
interpreter working.

Test case 11/12 fails the compiler even with a template runtime.c. It
seems that your patch-instruction isn't working quite right, there are
stack-stack moves.

Test case 15 fails the interpreter after select-instructions, and
fails the compiler even with a template runtime.c. It seems that
you're reading from an undefined variable.

Grade: .5 * (13/14 + 5/11 * 1/14) + .25 * 12/14 = 69%

ASSIGNMENT 4 (late):
All test cases compile and run successfully. Well done.

Grade: 69% + 31% * .9 = 97%

ASSIGNMENT 5:
18/19 test cases compile successfully. Well done!
For test case #9, which fails compilation, 8/11 passes of the interpreter work.

Many of your test cases fail the interpreter. This doesn't affect your
grade except for test #9, which is the one that your compiler fails
on. It appears that in most cases, its dying in uncover-live, maybe
because one register isn't tracked properly.

Grade: 97%

ASSIGNMENT 5 (late):
All cases pass -- well done!
Grade: 100% (rounded up)

ASSIGNMENT 6: 
3/12 test cases pass.  

Test cases that did not pass the compiler did not pass any test cases
-- it looks like your typechecker is raising a type error for all
programs with lambdas; the test cases that you pass are the ones that report type errors.

ASSIGNMENT 6 (late):
9/12 test cases pass.
Of the failing test cases,
1/12 test cases passed 10/13 interpreter passes, and
2/12 test cases passed 4/13 interpreter passes.

Grade: 75%

ASSIGNMENT 7:
Not implemented