;;; input ==> change typechecker

'(program (define-inline (doubleid [x : Integer]) : Integer
  ((lambda: ([x : Integer]) : Integer x) x))
(doubleid 42))


============================

;;;;;;;;;; type-checker


'(program
  (type Integer)
  (define-inline (doubleid (x : Integer))
    :
    Integer
    (has-type
     ((has-type
       (lambda: ((x : Integer)) : Integer (has-type x Integer))
       (Integer -> Integer))
      (has-type x Integer))
     Integer))
  (has-type
   ((has-type doubleid (Integer -> Integer)) (has-type 42 Integer))
   Integer))


===========================

;;;;;;;;;; uniquify

'(program
  (type Integer)
  (define-inline (func7459 (x7460 : Integer))
    :
    Integer
    (has-type
     ((has-type
       (lambda: ((x74601 : Integer)) : Integer (has-type x74601 Integer))
       (Integer -> Integer))
      (has-type x7460 Integer))
     Integer))
  (has-type
   ((has-type func7459 (Integer -> Integer)) (has-type 42 Integer))
   Integer))


;;;;;;;;;;; 

'(program
  (type Integer)
  (define-inline
   (func7459 (x7460 : Integer))
   :
   Integer
   (has-type
    ((has-type
      (lambda: ((x74601 : Integer)) : Integer (has-type x74601 Integer))
      (Integer -> Integer))
     (has-type x7460 Integer))
    Integer))
  (has-type
   (has-type
    ((has-type
      (lambda: ((x74601 : Integer)) : Integer (has-type x74601 Integer))
      (Integer -> Integer))
     (has-type (has-type 42 Integer) Integer))
    Integer)
   Integer))


=======================
;;;;;;;;;;;;;;;;;; input: r5_5.rkt

'(program
  (define-inline (app [f : (Integer -> Integer)] [x : Integer])
    : Integer
    (f x))

  (app (lambda: ([x : Integer]) : Integer x) 42))



;;;; typechecker 
'(program
  (type Integer)
  (define-inline
   (app (f : (Integer -> Integer)) (x : Integer))
   :
   Integer
   (has-type ((has-type f (Integer -> Integer)) (has-type x Integer)) Integer))
  (has-type
   ((has-type app ((Integer -> Integer) Integer -> Integer))
    (has-type
     (lambda: ((x : Integer)) : Integer (has-type x Integer))
     (Integer -> Integer))
    (has-type 42 Integer))
   Integer))

;;; uniquify

'(program
  (type Integer)
  (define-inline (func50024 (f50026 : (Integer -> Integer)) (x50025 : Integer))
    :
    Integer
    (has-type
     ((has-type f50026 (Integer -> Integer)) (has-type x50025 Integer))
     Integer))
  (has-type
   ((has-type func50024 ((Integer -> Integer) Integer -> Integer))
    (has-type
     (lambda: ((x50027 : Integer)) : Integer (has-type x50027 Integer))
     (Integer -> Integer))
    (has-type 42 Integer))
   Integer))

;;;; inline

'(program
  (type Integer)
  (define-inline
   (func50024 (f50026 : (Integer -> Integer)) (x50025 : Integer))
   :
   Integer
   (has-type
    ((has-type f50026 (Integer -> Integer)) (has-type x50025 Integer))
    Integer))
  (has-type
   (has-type
    ((has-type
      (has-type
       (lambda: ((x50027 : Integer)) : Integer (has-type x50027 Integer))
       (Integer -> Integer))
      (Integer -> Integer))
     (has-type (has-type 42 Integer) Integer))
    Integer)
   Integer))

;;;;; input


(define (id [x : Integer]) : Integer x)
(let ([fun id])
  (fun 42))








