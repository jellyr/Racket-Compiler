------------------------------------------------------
testing compiler lambda
utilities/interp-test @ utilities.rkt:349
test-name:
s4_8

** compiler  @ utilities.rkt:218
name:
lambda

** checking passes for test  @ utilities.rkt:219
test-name:
s4_8

utilities/read-program @ utilities.rkt:177
path:
tests/s4_8.rkt

utilities/read-program @ utilities.rkt:182
input-prog:
'(program
  (define (f (x : Integer))
    :
    (Integer -> Integer)
    (let ((y 4)) (lambda: ((z : Integer)) : Integer (+ x (+ y z)))))
  (let ((g (f 5))) (let ((h (f 3))) (+ (g 11) (h 15)))))


check passes: @ utilities.rkt:224
sexp:
'(program
  (define (f (x : Integer))
    :
    (Integer -> Integer)
    (let ((y 4)) (lambda: ((z : Integer)) : Integer (+ x (+ y z)))))
  (let ((g (f 5))) (let ((h (f 3))) (+ (g 11) (h 15)))))


running pass: uniquify on test: s4_8 @ utilities.rkt:248
input:
'(program
  (type Integer)
  (define (f (x : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y (has-type 4 Integer)))
       (has-type
        (lambda:
         ((z : Integer))
         :
         Integer
         (has-type
          (+
           (has-type x Integer)
           (has-type (+ (has-type y Integer) (has-type z Integer)) Integer))
          Integer))
        (Integer -> Integer)))
     (Integer -> Integer)))
  (has-type
   (let ((g
          (has-type
           ((has-type f (Integer -> (Integer -> Integer)))
            (has-type 5 Integer))
           (Integer -> Integer))))
     (has-type
      (let ((h
             (has-type
              ((has-type f (Integer -> (Integer -> Integer)))
               (has-type 3 Integer))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           ((has-type g (Integer -> Integer)) (has-type 11 Integer))
           Integer)
          (has-type
           ((has-type h (Integer -> Integer)) (has-type 15 Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: uniquify on test: s4_8 @ utilities.rkt:253
output:
'(program
  (type Integer)
  (define (f6713 (x6714 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6715 (has-type 4 Integer)))
       (has-type
        (lambda:
         ((z6716 : Integer))
         :
         Integer
         (has-type
          (+
           (has-type x6714 Integer)
           (has-type
            (+ (has-type y6715 Integer) (has-type z6716 Integer))
            Integer))
          Integer))
        (Integer -> Integer)))
     (Integer -> Integer)))
  (has-type
   (let ((g6717
          (has-type
           ((has-type f6713 (Integer -> (Integer -> Integer)))
            (has-type 5 Integer))
           (Integer -> Integer))))
     (has-type
      (let ((h6718
             (has-type
              ((has-type f6713 (Integer -> (Integer -> Integer)))
               (has-type 3 Integer))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           ((has-type g6717 (Integer -> Integer)) (has-type 11 Integer))
           Integer)
          (has-type
           ((has-type h6718 (Integer -> Integer)) (has-type 15 Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: reveal-functions on test: s4_8 @ utilities.rkt:248
input:
'(program
  (type Integer)
  (define (f6713 (x6714 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6715 (has-type 4 Integer)))
       (has-type
        (lambda:
         ((z6716 : Integer))
         :
         Integer
         (has-type
          (+
           (has-type x6714 Integer)
           (has-type
            (+ (has-type y6715 Integer) (has-type z6716 Integer))
            Integer))
          Integer))
        (Integer -> Integer)))
     (Integer -> Integer)))
  (has-type
   (let ((g6717
          (has-type
           ((has-type f6713 (Integer -> (Integer -> Integer)))
            (has-type 5 Integer))
           (Integer -> Integer))))
     (has-type
      (let ((h6718
             (has-type
              ((has-type f6713 (Integer -> (Integer -> Integer)))
               (has-type 3 Integer))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           ((has-type g6717 (Integer -> Integer)) (has-type 11 Integer))
           Integer)
          (has-type
           ((has-type h6718 (Integer -> Integer)) (has-type 15 Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: reveal-functions on test: s4_8 @ utilities.rkt:253
output:
'(program
  (type Integer)
  (define (f6713 (x6714 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6715 (has-type 4 Integer)))
       (has-type
        (lambda:
         ((z6716 : Integer))
         :
         Integer
         (has-type
          (+
           (has-type x6714 Integer)
           (has-type
            (+ (has-type y6715 Integer) (has-type z6716 Integer))
            Integer))
          Integer))
        (Integer -> Integer)))
     (Integer -> Integer)))
  (has-type
   (let ((g6717
          (has-type
           (app
            (has-type (function-ref f6713) (Integer -> (Integer -> Integer)))
            (has-type 5 Integer))
           (Integer -> Integer))))
     (has-type
      (let ((h6718
             (has-type
              (app
               (has-type
                (function-ref f6713)
                (Integer -> (Integer -> Integer)))
               (has-type 3 Integer))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           (app (has-type g6717 (Integer -> Integer)) (has-type 11 Integer))
           Integer)
          (has-type
           (app (has-type h6718 (Integer -> Integer)) (has-type 15 Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: convert-to-closures on test: s4_8 @ utilities.rkt:248
input:
'(program
  (type Integer)
  (define (f6713 (x6714 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6715 (has-type 4 Integer)))
       (has-type
        (lambda:
         ((z6716 : Integer))
         :
         Integer
         (has-type
          (+
           (has-type x6714 Integer)
           (has-type
            (+ (has-type y6715 Integer) (has-type z6716 Integer))
            Integer))
          Integer))
        (Integer -> Integer)))
     (Integer -> Integer)))
  (has-type
   (let ((g6717
          (has-type
           (app
            (has-type (function-ref f6713) (Integer -> (Integer -> Integer)))
            (has-type 5 Integer))
           (Integer -> Integer))))
     (has-type
      (let ((h6718
             (has-type
              (app
               (has-type
                (function-ref f6713)
                (Integer -> (Integer -> Integer)))
               (has-type 3 Integer))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           (app (has-type g6717 (Integer -> Integer)) (has-type 11 Integer))
           Integer)
          (has-type
           (app (has-type h6718 (Integer -> Integer)) (has-type 15 Integer))
           Integer))
         Integer))
      Integer))
   Integer))


fvs:  @ lambda.rkt:120
(map car fvs-table):
'(x6714 y6715)


running pass: convert-to-closures on test: s4_8 @ utilities.rkt:253
output:
'(program
  (type Integer)
  (define (f6713 (fvs6721 : _) (x6714 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6715 (has-type 4 Integer)))
       (has-type
        (vector
         (has-type (function-ref lambda6719) _)
         (has-type x6714 Integer)
         (has-type y6715 Integer))
        (Vector _ Integer Integer)))
     (Integer -> Integer)))
  (define (lambda6719 (fvs6720 : _) (z6716 : Integer))
    :
    Integer
    (has-type
     (let ((x6714
            (has-type
             (vector-ref (has-type fvs6720 _) (has-type 1 Integer))
             Integer)))
       (has-type
        (let ((y6715
               (has-type
                (vector-ref (has-type fvs6720 _) (has-type 2 Integer))
                Integer)))
          (has-type
           (+
            (has-type x6714 Integer)
            (has-type
             (+ (has-type y6715 Integer) (has-type z6716 Integer))
             Integer))
           Integer))
        Integer))
     Integer))
  (has-type
   (let ((g6717
          (has-type
           (let ((app6722
                  (has-type
                   (vector (has-type (function-ref f6713) _))
                   (Vector _))))
             (has-type
              (app
               (has-type
                (vector-ref (has-type app6722 (Vector _)) (has-type 0 Integer))
                _)
               (has-type app6722 (Vector _))
               (has-type 5 Integer))
              (Integer -> Integer)))
           (Integer -> Integer))))
     (has-type
      (let ((h6718
             (has-type
              (let ((app6723
                     (has-type
                      (vector (has-type (function-ref f6713) _))
                      (Vector _))))
                (has-type
                 (app
                  (has-type
                   (vector-ref
                    (has-type app6723 (Vector _))
                    (has-type 0 Integer))
                   _)
                  (has-type app6723 (Vector _))
                  (has-type 3 Integer))
                 (Integer -> Integer)))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           (let ((app6724 (has-type g6717 (Integer -> Integer))))
             (has-type
              (app
               (has-type
                (vector-ref
                 (has-type app6724 (Integer -> Integer))
                 (has-type 0 Integer))
                _)
               (has-type app6724 (Integer -> Integer))
               (has-type 11 Integer))
              Integer))
           Integer)
          (has-type
           (let ((app6725 (has-type h6718 (Integer -> Integer))))
             (has-type
              (app
               (has-type
                (vector-ref
                 (has-type app6725 (Integer -> Integer))
                 (has-type 0 Integer))
                _)
               (has-type app6725 (Integer -> Integer))
               (has-type 15 Integer))
              Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: flatten on test: s4_8 @ utilities.rkt:248
input:
'(program
  (type Integer)
  (define (f6713 (fvs6721 : _) (x6714 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6715 (has-type 4 Integer)))
       (has-type
        (vector
         (has-type (function-ref lambda6719) _)
         (has-type x6714 Integer)
         (has-type y6715 Integer))
        (Vector _ Integer Integer)))
     (Integer -> Integer)))
  (define (lambda6719 (fvs6720 : _) (z6716 : Integer))
    :
    Integer
    (has-type
     (let ((x6714
            (has-type
             (vector-ref (has-type fvs6720 _) (has-type 1 Integer))
             Integer)))
       (has-type
        (let ((y6715
               (has-type
                (vector-ref (has-type fvs6720 _) (has-type 2 Integer))
                Integer)))
          (has-type
           (+
            (has-type x6714 Integer)
            (has-type
             (+ (has-type y6715 Integer) (has-type z6716 Integer))
             Integer))
           Integer))
        Integer))
     Integer))
  (has-type
   (let ((g6717
          (has-type
           (let ((app6722
                  (has-type
                   (vector (has-type (function-ref f6713) _))
                   (Vector _))))
             (has-type
              (app
               (has-type
                (vector-ref (has-type app6722 (Vector _)) (has-type 0 Integer))
                _)
               (has-type app6722 (Vector _))
               (has-type 5 Integer))
              (Integer -> Integer)))
           (Integer -> Integer))))
     (has-type
      (let ((h6718
             (has-type
              (let ((app6723
                     (has-type
                      (vector (has-type (function-ref f6713) _))
                      (Vector _))))
                (has-type
                 (app
                  (has-type
                   (vector-ref
                    (has-type app6723 (Vector _))
                    (has-type 0 Integer))
                   _)
                  (has-type app6723 (Vector _))
                  (has-type 3 Integer))
                 (Integer -> Integer)))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           (let ((app6724 (has-type g6717 (Integer -> Integer))))
             (has-type
              (app
               (has-type
                (vector-ref
                 (has-type app6724 (Integer -> Integer))
                 (has-type 0 Integer))
                _)
               (has-type app6724 (Integer -> Integer))
               (has-type 11 Integer))
              Integer))
           Integer)
          (has-type
           (let ((app6725 (has-type h6718 (Integer -> Integer))))
             (has-type
              (app
               (has-type
                (vector-ref
                 (has-type app6725 (Integer -> Integer))
                 (has-type 0 Integer))
                _)
               (has-type app6725 (Integer -> Integer))
               (has-type 15 Integer))
              Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: flatten on test: s4_8 @ utilities.rkt:253
output:
'(program
  (tmp6726
   app6722
   tmp6727
   g6717
   tmp6728
   app6723
   tmp6729
   h6718
   app6724
   tmp6730
   tmp6731
   app6725
   tmp6732
   tmp6733
   tmp6734)
  (type Integer)
  (defines
   (define (f6713 (fvs6721 : _) (x6714 : Integer))
     :
     (Integer -> Integer)
     (y6715 tmp6735 tmp6736)
     (assign y6715 (has-type 4 Integer))
     (assign tmp6735 (has-type (function-ref lambda6719) _))
     (assign
      tmp6736
      (has-type
       (vector
        (has-type tmp6735 _)
        (has-type x6714 Integer)
        (has-type y6715 Integer))
       (Vector _ Integer Integer)))
     (return (has-type tmp6736 (Vector _ Integer Integer))))
   (define (lambda6719 (fvs6720 : _) (z6716 : Integer))
     :
     Integer
     (x6714 y6715 tmp6737 tmp6738)
     (assign
      x6714
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 1 Integer))
       Integer))
     (assign
      y6715
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6737
      (has-type (+ (has-type y6715 Integer) (has-type z6716 Integer)) Integer))
     (assign
      tmp6738
      (has-type
       (+ (has-type x6714 Integer) (has-type tmp6737 Integer))
       Integer))
     (return (has-type tmp6738 Integer))))
  (assign tmp6726 (has-type (function-ref f6713) _))
  (assign app6722 (has-type (vector (has-type tmp6726 _)) (Vector _)))
  (assign
   tmp6727
   (has-type
    (vector-ref (has-type app6722 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   g6717
   (has-type
    (app
     (has-type tmp6727 _)
     (has-type app6722 (Vector _))
     (has-type 5 Integer))
    (Integer -> Integer)))
  (assign tmp6728 (has-type (function-ref f6713) _))
  (assign app6723 (has-type (vector (has-type tmp6728 _)) (Vector _)))
  (assign
   tmp6729
   (has-type
    (vector-ref (has-type app6723 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   h6718
   (has-type
    (app
     (has-type tmp6729 _)
     (has-type app6723 (Vector _))
     (has-type 3 Integer))
    (Integer -> Integer)))
  (assign app6724 (has-type g6717 (Integer -> Integer)))
  (assign
   tmp6730
   (has-type
    (vector-ref (has-type app6724 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6731
   (has-type
    (app
     (has-type tmp6730 _)
     (has-type app6724 (Integer -> Integer))
     (has-type 11 Integer))
    Integer))
  (assign app6725 (has-type h6718 (Integer -> Integer)))
  (assign
   tmp6732
   (has-type
    (vector-ref (has-type app6725 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6733
   (has-type
    (app
     (has-type tmp6732 _)
     (has-type app6725 (Integer -> Integer))
     (has-type 15 Integer))
    Integer))
  (assign
   tmp6734
   (has-type
    (+ (has-type tmp6731 Integer) (has-type tmp6733 Integer))
    Integer))
  (return (has-type tmp6734 Integer)))


running pass: expose allocation on test: s4_8 @ utilities.rkt:248
input:
'(program
  (tmp6726
   app6722
   tmp6727
   g6717
   tmp6728
   app6723
   tmp6729
   h6718
   app6724
   tmp6730
   tmp6731
   app6725
   tmp6732
   tmp6733
   tmp6734)
  (type Integer)
  (defines
   (define (f6713 (fvs6721 : _) (x6714 : Integer))
     :
     (Integer -> Integer)
     (y6715 tmp6735 tmp6736)
     (assign y6715 (has-type 4 Integer))
     (assign tmp6735 (has-type (function-ref lambda6719) _))
     (assign
      tmp6736
      (has-type
       (vector
        (has-type tmp6735 _)
        (has-type x6714 Integer)
        (has-type y6715 Integer))
       (Vector _ Integer Integer)))
     (return (has-type tmp6736 (Vector _ Integer Integer))))
   (define (lambda6719 (fvs6720 : _) (z6716 : Integer))
     :
     Integer
     (x6714 y6715 tmp6737 tmp6738)
     (assign
      x6714
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 1 Integer))
       Integer))
     (assign
      y6715
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6737
      (has-type (+ (has-type y6715 Integer) (has-type z6716 Integer)) Integer))
     (assign
      tmp6738
      (has-type
       (+ (has-type x6714 Integer) (has-type tmp6737 Integer))
       Integer))
     (return (has-type tmp6738 Integer))))
  (assign tmp6726 (has-type (function-ref f6713) _))
  (assign app6722 (has-type (vector (has-type tmp6726 _)) (Vector _)))
  (assign
   tmp6727
   (has-type
    (vector-ref (has-type app6722 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   g6717
   (has-type
    (app
     (has-type tmp6727 _)
     (has-type app6722 (Vector _))
     (has-type 5 Integer))
    (Integer -> Integer)))
  (assign tmp6728 (has-type (function-ref f6713) _))
  (assign app6723 (has-type (vector (has-type tmp6728 _)) (Vector _)))
  (assign
   tmp6729
   (has-type
    (vector-ref (has-type app6723 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   h6718
   (has-type
    (app
     (has-type tmp6729 _)
     (has-type app6723 (Vector _))
     (has-type 3 Integer))
    (Integer -> Integer)))
  (assign app6724 (has-type g6717 (Integer -> Integer)))
  (assign
   tmp6730
   (has-type
    (vector-ref (has-type app6724 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6731
   (has-type
    (app
     (has-type tmp6730 _)
     (has-type app6724 (Integer -> Integer))
     (has-type 11 Integer))
    Integer))
  (assign app6725 (has-type h6718 (Integer -> Integer)))
  (assign
   tmp6732
   (has-type
    (vector-ref (has-type app6725 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6733
   (has-type
    (app
     (has-type tmp6732 _)
     (has-type app6725 (Integer -> Integer))
     (has-type 15 Integer))
    Integer))
  (assign
   tmp6734
   (has-type
    (+ (has-type tmp6731 Integer) (has-type tmp6733 Integer))
    Integer))
  (return (has-type tmp6734 Integer)))


running pass: expose allocation on test: s4_8 @ utilities.rkt:253
output:
'(program
  (void6743
   void6742
   tmp6726
   app6722
   tmp6727
   g6717
   tmp6728
   app6723
   tmp6729
   h6718
   app6724
   tmp6730
   tmp6731
   app6725
   tmp6732
   tmp6733
   tmp6734)
  (type Integer)
  (defines
   (define (f6713 (fvs6721 : _) (x6714 : Integer))
     :
     (Integer -> Integer)
     (void6741 void6740 void6739 y6715 tmp6735 tmp6736)
     (assign y6715 (has-type 4 Integer))
     (assign tmp6735 (has-type (function-ref lambda6719) _))
     (if (has-type (collection-needed? 32) Boolean) ((collect 32)) ())
     (assign tmp6736 (has-type (allocate 3) (Vector _ Integer Integer)))
     (assign
      void6739
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 0 Integer)
        (has-type tmp6735 _))
       Void))
     (assign
      void6740
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 1 Integer)
        (has-type x6714 Integer))
       Void))
     (assign
      void6741
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 2 Integer)
        (has-type y6715 Integer))
       Void))
     (return (has-type tmp6736 (Vector _ Integer Integer))))
   (define (lambda6719 (fvs6720 : _) (z6716 : Integer))
     :
     Integer
     (x6714 y6715 tmp6737 tmp6738)
     (assign
      x6714
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 1 Integer))
       Integer))
     (assign
      y6715
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6737
      (has-type (+ (has-type y6715 Integer) (has-type z6716 Integer)) Integer))
     (assign
      tmp6738
      (has-type
       (+ (has-type x6714 Integer) (has-type tmp6737 Integer))
       Integer))
     (return (has-type tmp6738 Integer))))
  (initialize 16384 16)
  (assign tmp6726 (has-type (function-ref f6713) _))
  (if (has-type (collection-needed? 16) Boolean) ((collect 16)) ())
  (assign app6722 (has-type (allocate 1) (Vector _)))
  (assign
   void6742
   (has-type
    (vector-set!
     (has-type app6722 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6726 _))
    Void))
  (assign
   tmp6727
   (has-type
    (vector-ref (has-type app6722 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   g6717
   (has-type
    (app
     (has-type tmp6727 _)
     (has-type app6722 (Vector _))
     (has-type 5 Integer))
    (Integer -> Integer)))
  (assign tmp6728 (has-type (function-ref f6713) _))
  (if (has-type (collection-needed? 16) Boolean) ((collect 16)) ())
  (assign app6723 (has-type (allocate 1) (Vector _)))
  (assign
   void6743
   (has-type
    (vector-set!
     (has-type app6723 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6728 _))
    Void))
  (assign
   tmp6729
   (has-type
    (vector-ref (has-type app6723 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   h6718
   (has-type
    (app
     (has-type tmp6729 _)
     (has-type app6723 (Vector _))
     (has-type 3 Integer))
    (Integer -> Integer)))
  (assign app6724 (has-type g6717 (Integer -> Integer)))
  (assign
   tmp6730
   (has-type
    (vector-ref (has-type app6724 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6731
   (has-type
    (app
     (has-type tmp6730 _)
     (has-type app6724 (Integer -> Integer))
     (has-type 11 Integer))
    Integer))
  (assign app6725 (has-type h6718 (Integer -> Integer)))
  (assign
   tmp6732
   (has-type
    (vector-ref (has-type app6725 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6733
   (has-type
    (app
     (has-type tmp6732 _)
     (has-type app6725 (Integer -> Integer))
     (has-type 15 Integer))
    Integer))
  (assign
   tmp6734
   (has-type
    (+ (has-type tmp6731 Integer) (has-type tmp6733 Integer))
    Integer))
  (return (has-type tmp6734 Integer)))


running pass: uncover call live roots on test: s4_8 @ utilities.rkt:248
input:
'(program
  (void6743
   void6742
   tmp6726
   app6722
   tmp6727
   g6717
   tmp6728
   app6723
   tmp6729
   h6718
   app6724
   tmp6730
   tmp6731
   app6725
   tmp6732
   tmp6733
   tmp6734)
  (type Integer)
  (defines
   (define (f6713 (fvs6721 : _) (x6714 : Integer))
     :
     (Integer -> Integer)
     (void6741 void6740 void6739 y6715 tmp6735 tmp6736)
     (assign y6715 (has-type 4 Integer))
     (assign tmp6735 (has-type (function-ref lambda6719) _))
     (if (has-type (collection-needed? 32) Boolean) ((collect 32)) ())
     (assign tmp6736 (has-type (allocate 3) (Vector _ Integer Integer)))
     (assign
      void6739
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 0 Integer)
        (has-type tmp6735 _))
       Void))
     (assign
      void6740
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 1 Integer)
        (has-type x6714 Integer))
       Void))
     (assign
      void6741
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 2 Integer)
        (has-type y6715 Integer))
       Void))
     (return (has-type tmp6736 (Vector _ Integer Integer))))
   (define (lambda6719 (fvs6720 : _) (z6716 : Integer))
     :
     Integer
     (x6714 y6715 tmp6737 tmp6738)
     (assign
      x6714
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 1 Integer))
       Integer))
     (assign
      y6715
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6737
      (has-type (+ (has-type y6715 Integer) (has-type z6716 Integer)) Integer))
     (assign
      tmp6738
      (has-type
       (+ (has-type x6714 Integer) (has-type tmp6737 Integer))
       Integer))
     (return (has-type tmp6738 Integer))))
  (initialize 16384 16)
  (assign tmp6726 (has-type (function-ref f6713) _))
  (if (has-type (collection-needed? 16) Boolean) ((collect 16)) ())
  (assign app6722 (has-type (allocate 1) (Vector _)))
  (assign
   void6742
   (has-type
    (vector-set!
     (has-type app6722 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6726 _))
    Void))
  (assign
   tmp6727
   (has-type
    (vector-ref (has-type app6722 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   g6717
   (has-type
    (app
     (has-type tmp6727 _)
     (has-type app6722 (Vector _))
     (has-type 5 Integer))
    (Integer -> Integer)))
  (assign tmp6728 (has-type (function-ref f6713) _))
  (if (has-type (collection-needed? 16) Boolean) ((collect 16)) ())
  (assign app6723 (has-type (allocate 1) (Vector _)))
  (assign
   void6743
   (has-type
    (vector-set!
     (has-type app6723 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6728 _))
    Void))
  (assign
   tmp6729
   (has-type
    (vector-ref (has-type app6723 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   h6718
   (has-type
    (app
     (has-type tmp6729 _)
     (has-type app6723 (Vector _))
     (has-type 3 Integer))
    (Integer -> Integer)))
  (assign app6724 (has-type g6717 (Integer -> Integer)))
  (assign
   tmp6730
   (has-type
    (vector-ref (has-type app6724 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6731
   (has-type
    (app
     (has-type tmp6730 _)
     (has-type app6724 (Integer -> Integer))
     (has-type 11 Integer))
    Integer))
  (assign app6725 (has-type h6718 (Integer -> Integer)))
  (assign
   tmp6732
   (has-type
    (vector-ref (has-type app6725 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6733
   (has-type
    (app
     (has-type tmp6732 _)
     (has-type app6725 (Integer -> Integer))
     (has-type 15 Integer))
    Integer))
  (assign
   tmp6734
   (has-type
    (+ (has-type tmp6731 Integer) (has-type tmp6733 Integer))
    Integer))
  (return (has-type tmp6734 Integer)))


running pass: uncover call live roots on test: s4_8 @ utilities.rkt:253
output:
'(program
  (void6743
   void6742
   tmp6726
   app6722
   tmp6727
   g6717
   tmp6728
   app6723
   tmp6729
   h6718
   app6724
   tmp6730
   tmp6731
   app6725
   tmp6732
   tmp6733
   tmp6734)
  (type Integer)
  (defines
   (define (f6713 (fvs6721 : _) (x6714 : Integer))
     :
     (Integer -> Integer)
     (void6741 void6740 void6739 y6715 tmp6735 tmp6736)
     (assign y6715 (has-type 4 Integer))
     (assign tmp6735 (has-type (function-ref lambda6719) _))
     (if (has-type (collection-needed? 32) Boolean)
       ((call-live-roots () (collect 32)))
       ())
     (assign tmp6736 (has-type (allocate 3) (Vector _ Integer Integer)))
     (assign
      void6739
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 0 Integer)
        (has-type tmp6735 _))
       Void))
     (assign
      void6740
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 1 Integer)
        (has-type x6714 Integer))
       Void))
     (assign
      void6741
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 2 Integer)
        (has-type y6715 Integer))
       Void))
     (return (has-type tmp6736 (Vector _ Integer Integer))))
   (define (lambda6719 (fvs6720 : _) (z6716 : Integer))
     :
     Integer
     (x6714 y6715 tmp6737 tmp6738)
     (assign
      x6714
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 1 Integer))
       Integer))
     (assign
      y6715
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6737
      (has-type (+ (has-type y6715 Integer) (has-type z6716 Integer)) Integer))
     (assign
      tmp6738
      (has-type
       (+ (has-type x6714 Integer) (has-type tmp6737 Integer))
       Integer))
     (return (has-type tmp6738 Integer))))
  (initialize 16384 16)
  (assign tmp6726 (has-type (function-ref f6713) _))
  (if (has-type (collection-needed? 16) Boolean)
    ((call-live-roots () (collect 16)))
    ())
  (assign app6722 (has-type (allocate 1) (Vector _)))
  (assign
   void6742
   (has-type
    (vector-set!
     (has-type app6722 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6726 _))
    Void))
  (assign
   tmp6727
   (has-type
    (vector-ref (has-type app6722 (Vector _)) (has-type 0 Integer))
    _))
  (call-live-roots
   ()
   (assign
    g6717
    (has-type
     (app
      (has-type tmp6727 _)
      (has-type app6722 (Vector _))
      (has-type 5 Integer))
     (Integer -> Integer))))
  (assign tmp6728 (has-type (function-ref f6713) _))
  (if (has-type (collection-needed? 16) Boolean)
    ((call-live-roots (g6717) (collect 16)))
    ())
  (assign app6723 (has-type (allocate 1) (Vector _)))
  (assign
   void6743
   (has-type
    (vector-set!
     (has-type app6723 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6728 _))
    Void))
  (assign
   tmp6729
   (has-type
    (vector-ref (has-type app6723 (Vector _)) (has-type 0 Integer))
    _))
  (call-live-roots
   (g6717)
   (assign
    h6718
    (has-type
     (app
      (has-type tmp6729 _)
      (has-type app6723 (Vector _))
      (has-type 3 Integer))
     (Integer -> Integer))))
  (assign app6724 (has-type g6717 (Integer -> Integer)))
  (assign
   tmp6730
   (has-type
    (vector-ref (has-type app6724 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (call-live-roots
   (h6718)
   (assign
    tmp6731
    (has-type
     (app
      (has-type tmp6730 _)
      (has-type app6724 (Integer -> Integer))
      (has-type 11 Integer))
     Integer)))
  (assign app6725 (has-type h6718 (Integer -> Integer)))
  (assign
   tmp6732
   (has-type
    (vector-ref (has-type app6725 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (call-live-roots
   ()
   (assign
    tmp6733
    (has-type
     (app
      (has-type tmp6732 _)
      (has-type app6725 (Integer -> Integer))
      (has-type 15 Integer))
     Integer)))
  (assign
   tmp6734
   (has-type
    (+ (has-type tmp6731 Integer) (has-type tmp6733 Integer))
    Integer))
  (return (has-type tmp6734 Integer)))


running pass: instruction selection on test: s4_8 @ utilities.rkt:248
input:
'(program
  (void6743
   void6742
   tmp6726
   app6722
   tmp6727
   g6717
   tmp6728
   app6723
   tmp6729
   h6718
   app6724
   tmp6730
   tmp6731
   app6725
   tmp6732
   tmp6733
   tmp6734)
  (type Integer)
  (defines
   (define (f6713 (fvs6721 : _) (x6714 : Integer))
     :
     (Integer -> Integer)
     (void6741 void6740 void6739 y6715 tmp6735 tmp6736)
     (assign y6715 (has-type 4 Integer))
     (assign tmp6735 (has-type (function-ref lambda6719) _))
     (if (has-type (collection-needed? 32) Boolean)
       ((call-live-roots () (collect 32)))
       ())
     (assign tmp6736 (has-type (allocate 3) (Vector _ Integer Integer)))
     (assign
      void6739
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 0 Integer)
        (has-type tmp6735 _))
       Void))
     (assign
      void6740
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 1 Integer)
        (has-type x6714 Integer))
       Void))
     (assign
      void6741
      (has-type
       (vector-set!
        (has-type tmp6736 (Vector _ Integer Integer))
        (has-type 2 Integer)
        (has-type y6715 Integer))
       Void))
     (return (has-type tmp6736 (Vector _ Integer Integer))))
   (define (lambda6719 (fvs6720 : _) (z6716 : Integer))
     :
     Integer
     (x6714 y6715 tmp6737 tmp6738)
     (assign
      x6714
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 1 Integer))
       Integer))
     (assign
      y6715
      (has-type
       (vector-ref (has-type fvs6720 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6737
      (has-type (+ (has-type y6715 Integer) (has-type z6716 Integer)) Integer))
     (assign
      tmp6738
      (has-type
       (+ (has-type x6714 Integer) (has-type tmp6737 Integer))
       Integer))
     (return (has-type tmp6738 Integer))))
  (initialize 16384 16)
  (assign tmp6726 (has-type (function-ref f6713) _))
  (if (has-type (collection-needed? 16) Boolean)
    ((call-live-roots () (collect 16)))
    ())
  (assign app6722 (has-type (allocate 1) (Vector _)))
  (assign
   void6742
   (has-type
    (vector-set!
     (has-type app6722 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6726 _))
    Void))
  (assign
   tmp6727
   (has-type
    (vector-ref (has-type app6722 (Vector _)) (has-type 0 Integer))
    _))
  (call-live-roots
   ()
   (assign
    g6717
    (has-type
     (app
      (has-type tmp6727 _)
      (has-type app6722 (Vector _))
      (has-type 5 Integer))
     (Integer -> Integer))))
  (assign tmp6728 (has-type (function-ref f6713) _))
  (if (has-type (collection-needed? 16) Boolean)
    ((call-live-roots (g6717) (collect 16)))
    ())
  (assign app6723 (has-type (allocate 1) (Vector _)))
  (assign
   void6743
   (has-type
    (vector-set!
     (has-type app6723 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6728 _))
    Void))
  (assign
   tmp6729
   (has-type
    (vector-ref (has-type app6723 (Vector _)) (has-type 0 Integer))
    _))
  (call-live-roots
   (g6717)
   (assign
    h6718
    (has-type
     (app
      (has-type tmp6729 _)
      (has-type app6723 (Vector _))
      (has-type 3 Integer))
     (Integer -> Integer))))
  (assign app6724 (has-type g6717 (Integer -> Integer)))
  (assign
   tmp6730
   (has-type
    (vector-ref (has-type app6724 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (call-live-roots
   (h6718)
   (assign
    tmp6731
    (has-type
     (app
      (has-type tmp6730 _)
      (has-type app6724 (Integer -> Integer))
      (has-type 11 Integer))
     Integer)))
  (assign app6725 (has-type h6718 (Integer -> Integer)))
  (assign
   tmp6732
   (has-type
    (vector-ref (has-type app6725 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (call-live-roots
   ()
   (assign
    tmp6733
    (has-type
     (app
      (has-type tmp6732 _)
      (has-type app6725 (Integer -> Integer))
      (has-type 15 Integer))
     Integer)))
  (assign
   tmp6734
   (has-type
    (+ (has-type tmp6731 Integer) (has-type tmp6733 Integer))
    Integer))
  (return (has-type tmp6734 Integer)))


running pass: instruction selection on test: s4_8 @ utilities.rkt:253
output:
'(program
  ((lt6749
    end-data6748
    lt6747
    end-data6746
    void6743
    void6742
    tmp6726
    app6722
    tmp6727
    g6717
    tmp6728
    app6723
    tmp6729
    h6718
    app6724
    tmp6730
    tmp6731
    app6725
    tmp6732
    tmp6733
    tmp6734)
   0)
  (type Integer)
  (defines
   (define (f6713)
     2
     ((fvs6721
       x6714
       lt6745
       end-data6744
       void6741
       void6740
       void6739
       y6715
       tmp6735
       tmp6736)
      0)
     (movq (reg rdi) (var fvs6721))
     (movq (reg rsi) (var x6714))
     (movq (int 4) (var y6715))
     (leaq (function-ref lambda6719) (var tmp6735))
     (movq (global-value free_ptr) (var end-data6744))
     (addq (int 32) (var end-data6744))
     (cmpq (global-value fromspace_end) (var end-data6744))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (var lt6745))
     (if (eq? (int 0) (var lt6745))
       ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
       ())
     (movq (global-value free_ptr) (var tmp6736))
     (addq (int 32) (global-value free_ptr))
     (movq (var tmp6736) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (var tmp6736) (reg r11))
     (movq (var tmp6735) (deref r11 8))
     (movq (int 0) (var void6739))
     (movq (var tmp6736) (reg r11))
     (movq (var x6714) (deref r11 16))
     (movq (int 0) (var void6740))
     (movq (var tmp6736) (reg r11))
     (movq (var y6715) (deref r11 24))
     (movq (int 0) (var void6741))
     (movq (var tmp6736) (reg rax)))
   (define (lambda6719)
     2
     ((fvs6720 z6716 x6714 y6715 tmp6737 tmp6738) 0)
     (movq (reg rdi) (var fvs6720))
     (movq (reg rsi) (var z6716))
     (movq (var fvs6720) (reg r11))
     (movq (deref r11 16) (var x6714))
     (movq (var fvs6720) (reg r11))
     (movq (deref r11 24) (var y6715))
     (movq (var y6715) (var tmp6737))
     (addq (var z6716) (var tmp6737))
     (movq (var x6714) (var tmp6738))
     (addq (var tmp6737) (var tmp6738))
     (movq (var tmp6738) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6713) (var tmp6726))
  (movq (global-value free_ptr) (var end-data6746))
  (addq (int 16) (var end-data6746))
  (cmpq (global-value fromspace_end) (var end-data6746))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (var lt6747))
  (if (eq? (int 0) (var lt6747))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
  (movq (global-value free_ptr) (var app6722))
  (addq (int 16) (global-value free_ptr))
  (movq (var app6722) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (var app6722) (reg r11))
  (movq (var tmp6726) (deref r11 8))
  (movq (int 0) (var void6742))
  (movq (var app6722) (reg r11))
  (movq (deref r11 8) (var tmp6727))
  (movq (var app6722) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (var tmp6727))
  (movq (reg rax) (var g6717))
  (leaq (function-ref f6713) (var tmp6728))
  (movq (global-value free_ptr) (var end-data6748))
  (addq (int 16) (var end-data6748))
  (cmpq (global-value fromspace_end) (var end-data6748))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (var lt6749))
  (if (eq? (int 0) (var lt6749))
    ((movq (var g6717) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6717)))
    ())
  (movq (global-value free_ptr) (var app6723))
  (addq (int 16) (global-value free_ptr))
  (movq (var app6723) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (var app6723) (reg r11))
  (movq (var tmp6728) (deref r11 8))
  (movq (int 0) (var void6743))
  (movq (var app6723) (reg r11))
  (movq (deref r11 8) (var tmp6729))
  (movq (var g6717) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (var app6723) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (var tmp6729))
  (movq (reg rax) (var h6718))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (var g6717))
  (movq (var g6717) (var app6724))
  (movq (var app6724) (reg r11))
  (movq (deref r11 8) (var tmp6730))
  (movq (var h6718) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (var app6724) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (var tmp6730))
  (movq (reg rax) (var tmp6731))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (var h6718))
  (movq (var h6718) (var app6725))
  (movq (var app6725) (reg r11))
  (movq (deref r11 8) (var tmp6732))
  (movq (var app6725) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (var tmp6732))
  (movq (reg rax) (var tmp6733))
  (movq (var tmp6731) (var tmp6734))
  (addq (var tmp6733) (var tmp6734))
  (movq (var tmp6734) (reg rax)))


running pass: liveness analysis on test: s4_8 @ utilities.rkt:248
input:
'(program
  ((lt6749
    end-data6748
    lt6747
    end-data6746
    void6743
    void6742
    tmp6726
    app6722
    tmp6727
    g6717
    tmp6728
    app6723
    tmp6729
    h6718
    app6724
    tmp6730
    tmp6731
    app6725
    tmp6732
    tmp6733
    tmp6734)
   0)
  (type Integer)
  (defines
   (define (f6713)
     2
     ((fvs6721
       x6714
       lt6745
       end-data6744
       void6741
       void6740
       void6739
       y6715
       tmp6735
       tmp6736)
      0)
     (movq (reg rdi) (var fvs6721))
     (movq (reg rsi) (var x6714))
     (movq (int 4) (var y6715))
     (leaq (function-ref lambda6719) (var tmp6735))
     (movq (global-value free_ptr) (var end-data6744))
     (addq (int 32) (var end-data6744))
     (cmpq (global-value fromspace_end) (var end-data6744))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (var lt6745))
     (if (eq? (int 0) (var lt6745))
       ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
       ())
     (movq (global-value free_ptr) (var tmp6736))
     (addq (int 32) (global-value free_ptr))
     (movq (var tmp6736) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (var tmp6736) (reg r11))
     (movq (var tmp6735) (deref r11 8))
     (movq (int 0) (var void6739))
     (movq (var tmp6736) (reg r11))
     (movq (var x6714) (deref r11 16))
     (movq (int 0) (var void6740))
     (movq (var tmp6736) (reg r11))
     (movq (var y6715) (deref r11 24))
     (movq (int 0) (var void6741))
     (movq (var tmp6736) (reg rax)))
   (define (lambda6719)
     2
     ((fvs6720 z6716 x6714 y6715 tmp6737 tmp6738) 0)
     (movq (reg rdi) (var fvs6720))
     (movq (reg rsi) (var z6716))
     (movq (var fvs6720) (reg r11))
     (movq (deref r11 16) (var x6714))
     (movq (var fvs6720) (reg r11))
     (movq (deref r11 24) (var y6715))
     (movq (var y6715) (var tmp6737))
     (addq (var z6716) (var tmp6737))
     (movq (var x6714) (var tmp6738))
     (addq (var tmp6737) (var tmp6738))
     (movq (var tmp6738) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6713) (var tmp6726))
  (movq (global-value free_ptr) (var end-data6746))
  (addq (int 16) (var end-data6746))
  (cmpq (global-value fromspace_end) (var end-data6746))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (var lt6747))
  (if (eq? (int 0) (var lt6747))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
  (movq (global-value free_ptr) (var app6722))
  (addq (int 16) (global-value free_ptr))
  (movq (var app6722) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (var app6722) (reg r11))
  (movq (var tmp6726) (deref r11 8))
  (movq (int 0) (var void6742))
  (movq (var app6722) (reg r11))
  (movq (deref r11 8) (var tmp6727))
  (movq (var app6722) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (var tmp6727))
  (movq (reg rax) (var g6717))
  (leaq (function-ref f6713) (var tmp6728))
  (movq (global-value free_ptr) (var end-data6748))
  (addq (int 16) (var end-data6748))
  (cmpq (global-value fromspace_end) (var end-data6748))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (var lt6749))
  (if (eq? (int 0) (var lt6749))
    ((movq (var g6717) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6717)))
    ())
  (movq (global-value free_ptr) (var app6723))
  (addq (int 16) (global-value free_ptr))
  (movq (var app6723) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (var app6723) (reg r11))
  (movq (var tmp6728) (deref r11 8))
  (movq (int 0) (var void6743))
  (movq (var app6723) (reg r11))
  (movq (deref r11 8) (var tmp6729))
  (movq (var g6717) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (var app6723) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (var tmp6729))
  (movq (reg rax) (var h6718))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (var g6717))
  (movq (var g6717) (var app6724))
  (movq (var app6724) (reg r11))
  (movq (deref r11 8) (var tmp6730))
  (movq (var h6718) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (var app6724) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (var tmp6730))
  (movq (reg rax) (var tmp6731))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (var h6718))
  (movq (var h6718) (var app6725))
  (movq (var app6725) (reg r11))
  (movq (deref r11 8) (var tmp6732))
  (movq (var app6725) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (var tmp6732))
  (movq (reg rax) (var tmp6733))
  (movq (var tmp6731) (var tmp6734))
  (addq (var tmp6733) (var tmp6734))
  (movq (var tmp6734) (reg rax)))


running pass: liveness analysis on test: s4_8 @ utilities.rkt:253
output:
(list
 'program
 (list
  '(lt6749
    end-data6748
    lt6747
    end-data6746
    void6743
    void6742
    tmp6726
    app6722
    tmp6727
    g6717
    tmp6728
    app6723
    tmp6729
    h6718
    app6724
    tmp6730
    tmp6731
    app6725
    tmp6732
    tmp6733
    tmp6734)
  0
  (list
   (set)
   (set)
   (set)
   (set 'r15)
   (set 'tmp6726 'r15)
   (set 'end-data6746 'tmp6726 'r15)
   (set 'end-data6746 'tmp6726 'r15)
   (set 'tmp6726 'r15)
   (set 'tmp6726 'r15 'rax)
   (set 'lt6747 'tmp6726 'r15 'rax)
   (set 'tmp6726 'rax)
   (set 'tmp6726 'rax 'app6722)
   (set 'tmp6726 'rax 'app6722)
   (set 'tmp6726 'rax 'app6722)
   (set 'tmp6726 'rax 'app6722)
   (set 'tmp6726 'rax 'app6722)
   (set 'rax 'app6722)
   (set 'rax 'app6722)
   (set 'r11 'rax 'app6722)
   (set 'tmp6727 'rax 'app6722)
   (set 'tmp6727 'rax)
   (set 'tmp6727 'rax)
   (set 'rax)
   (set 'g6717)
   (set 'g6717 'tmp6728)
   (set 'end-data6748 'g6717 'tmp6728)
   (set 'end-data6748 'g6717 'tmp6728)
   (set 'g6717 'tmp6728)
   (set 'g6717 'tmp6728 'rax)
   (set 'lt6749 'g6717 'tmp6728 'rax)
   (set 'g6717 'tmp6728 'rax)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'rax 'app6723)
   (set 'g6717 'rax 'app6723)
   (set 'g6717 'r11 'rax 'app6723)
   (set 'g6717 'tmp6729 'rax 'app6723)
   (set 'tmp6729 'r15 'rax 'app6723)
   (set 'tmp6729 'r15 'rax 'app6723)
   (set 'tmp6729 'r15 'rax)
   (set 'tmp6729 'r15 'rax)
   (set 'r15 'rax)
   (set 'h6718 'r15 'rax)
   (set 'h6718 'r15 'rax)
   (set 'g6717 'h6718 'rax)
   (set 'h6718 'rax 'app6724)
   (set 'h6718 'r11 'rax 'app6724)
   (set 'h6718 'tmp6730 'rax 'app6724)
   (set 'tmp6730 'r15 'rax 'app6724)
   (set 'tmp6730 'r15 'rax 'app6724)
   (set 'tmp6730 'r15 'rax)
   (set 'tmp6730 'r15 'rax)
   (set 'r15 'rax)
   (set 'tmp6731 'r15 'rax)
   (set 'tmp6731 'r15 'rax)
   (set 'h6718 'tmp6731 'rax)
   (set 'tmp6731 'rax 'app6725)
   (set 'tmp6731 'r11 'rax 'app6725)
   (set 'tmp6731 'tmp6732 'rax 'app6725)
   (set 'tmp6731 'tmp6732 'rax)
   (set 'tmp6731 'tmp6732 'rax)
   (set 'tmp6731 'rax)
   (set 'tmp6731 'tmp6733)
   (set 'tmp6733 'tmp6734)
   (set 'tmp6734)
   (set)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6713)
   2
   (list
    '(fvs6721
      x6714
      lt6745
      end-data6744
      void6741
      void6740
      void6739
      y6715
      tmp6735
      tmp6736)
    0
    (list
     (set 'rsi 'r15)
     (set 'x6714 'r15)
     (set 'x6714 'y6715 'r15)
     (set 'x6714 'y6715 'r15 'tmp6735)
     (set 'x6714 'end-data6744 'y6715 'r15 'tmp6735)
     (set 'x6714 'end-data6744 'y6715 'r15 'tmp6735)
     (set 'x6714 'y6715 'r15 'tmp6735)
     (set 'x6714 'y6715 'r15 'tmp6735 'rax)
     (set 'lt6745 'x6714 'y6715 'r15 'tmp6735)
     (set 'x6714 'y6715 'tmp6735)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6736)
     (set 'x6714 'y6715 'tmp6736)
     (set 'x6714 'y6715 'tmp6736)
     (set 'y6715 'tmp6736)
     (set 'y6715 'tmp6736)
     (set 'y6715 'tmp6736)
     (set 'tmp6736)
     (set 'tmp6736)
     (set)))
   '(movq (reg rdi) (var fvs6721))
   '(movq (reg rsi) (var x6714))
   '(movq (int 4) (var y6715))
   '(leaq (function-ref lambda6719) (var tmp6735))
   '(movq (global-value free_ptr) (var end-data6744))
   '(addq (int 32) (var end-data6744))
   '(cmpq (global-value fromspace_end) (var end-data6744))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6745))
   (list
    'if
    '(eq? (int 0) (var lt6745))
    '((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
    (list
     (set 'x6714 'y6715 'tmp6735)
     (set 'x6714 'y6715 'tmp6735)
     (set 'x6714 'y6715 'tmp6735))
    '()
    '())
   '(movq (global-value free_ptr) (var tmp6736))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6736) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6736) (reg r11))
   '(movq (var tmp6735) (deref r11 8))
   '(movq (int 0) (var void6739))
   '(movq (var tmp6736) (reg r11))
   '(movq (var x6714) (deref r11 16))
   '(movq (int 0) (var void6740))
   '(movq (var tmp6736) (reg r11))
   '(movq (var y6715) (deref r11 24))
   '(movq (int 0) (var void6741))
   '(movq (var tmp6736) (reg rax)))
  (list
   'define
   '(lambda6719)
   2
   (list
    '(fvs6720 z6716 x6714 y6715 tmp6737 tmp6738)
    0
    (list
     (set 'rsi 'fvs6720)
     (set 'z6716 'fvs6720)
     (set 'z6716 'r11 'fvs6720)
     (set 'x6714 'z6716 'fvs6720)
     (set 'x6714 'z6716 'r11)
     (set 'x6714 'y6715 'z6716)
     (set 'x6714 'z6716 'tmp6737)
     (set 'x6714 'tmp6737)
     (set 'tmp6737 'tmp6738)
     (set 'tmp6738)
     (set)))
   '(movq (reg rdi) (var fvs6720))
   '(movq (reg rsi) (var z6716))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 16) (var x6714))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 24) (var y6715))
   '(movq (var y6715) (var tmp6737))
   '(addq (var z6716) (var tmp6737))
   '(movq (var x6714) (var tmp6738))
   '(addq (var tmp6737) (var tmp6738))
   '(movq (var tmp6738) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6713) (var tmp6726))
 '(movq (global-value free_ptr) (var end-data6746))
 '(addq (int 16) (var end-data6746))
 '(cmpq (global-value fromspace_end) (var end-data6746))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6747))
 (list
  'if
  '(eq? (int 0) (var lt6747))
  '((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
  (list (set 'tmp6726 'rax) (set 'tmp6726 'rax) (set 'tmp6726 'rax))
  '()
  '())
 '(movq (global-value free_ptr) (var app6722))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6722) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6722) (reg r11))
 '(movq (var tmp6726) (deref r11 8))
 '(movq (int 0) (var void6742))
 '(movq (var app6722) (reg r11))
 '(movq (deref r11 8) (var tmp6727))
 '(movq (var app6722) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6727))
 '(movq (reg rax) (var g6717))
 '(leaq (function-ref f6713) (var tmp6728))
 '(movq (global-value free_ptr) (var end-data6748))
 '(addq (int 16) (var end-data6748))
 '(cmpq (global-value fromspace_end) (var end-data6748))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6749))
 (list
  'if
  '(eq? (int 0) (var lt6749))
  '((movq (var g6717) (deref r15 0))
    (addq (int 8) (reg r15))
    (movq (reg r15) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (subq (int 8) (reg r15))
    (movq (deref r15 0) (var g6717)))
  (list
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'g6717 'tmp6728 'rax))
  '()
  '())
 '(movq (global-value free_ptr) (var app6723))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6723) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6723) (reg r11))
 '(movq (var tmp6728) (deref r11 8))
 '(movq (int 0) (var void6743))
 '(movq (var app6723) (reg r11))
 '(movq (deref r11 8) (var tmp6729))
 '(movq (var g6717) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6723) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6729))
 '(movq (reg rax) (var h6718))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6717))
 '(movq (var g6717) (var app6724))
 '(movq (var app6724) (reg r11))
 '(movq (deref r11 8) (var tmp6730))
 '(movq (var h6718) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6724) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6730))
 '(movq (reg rax) (var tmp6731))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6718))
 '(movq (var h6718) (var app6725))
 '(movq (var app6725) (reg r11))
 '(movq (deref r11 8) (var tmp6732))
 '(movq (var app6725) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6732))
 '(movq (reg rax) (var tmp6733))
 '(movq (var tmp6731) (var tmp6734))
 '(addq (var tmp6733) (var tmp6734))
 '(movq (var tmp6734) (reg rax)))


running pass: build interference on test: s4_8 @ utilities.rkt:248
input:
(list
 'program
 (list
  '(lt6749
    end-data6748
    lt6747
    end-data6746
    void6743
    void6742
    tmp6726
    app6722
    tmp6727
    g6717
    tmp6728
    app6723
    tmp6729
    h6718
    app6724
    tmp6730
    tmp6731
    app6725
    tmp6732
    tmp6733
    tmp6734)
  0
  (list
   (set)
   (set)
   (set)
   (set 'r15)
   (set 'tmp6726 'r15)
   (set 'end-data6746 'tmp6726 'r15)
   (set 'end-data6746 'tmp6726 'r15)
   (set 'tmp6726 'r15)
   (set 'tmp6726 'r15 'rax)
   (set 'lt6747 'tmp6726 'r15 'rax)
   (set 'tmp6726 'rax)
   (set 'tmp6726 'rax 'app6722)
   (set 'tmp6726 'rax 'app6722)
   (set 'tmp6726 'rax 'app6722)
   (set 'tmp6726 'rax 'app6722)
   (set 'tmp6726 'rax 'app6722)
   (set 'rax 'app6722)
   (set 'rax 'app6722)
   (set 'r11 'rax 'app6722)
   (set 'tmp6727 'rax 'app6722)
   (set 'tmp6727 'rax)
   (set 'tmp6727 'rax)
   (set 'rax)
   (set 'g6717)
   (set 'g6717 'tmp6728)
   (set 'end-data6748 'g6717 'tmp6728)
   (set 'end-data6748 'g6717 'tmp6728)
   (set 'g6717 'tmp6728)
   (set 'g6717 'tmp6728 'rax)
   (set 'lt6749 'g6717 'tmp6728 'rax)
   (set 'g6717 'tmp6728 'rax)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'tmp6728 'rax 'app6723)
   (set 'g6717 'rax 'app6723)
   (set 'g6717 'rax 'app6723)
   (set 'g6717 'r11 'rax 'app6723)
   (set 'g6717 'tmp6729 'rax 'app6723)
   (set 'tmp6729 'r15 'rax 'app6723)
   (set 'tmp6729 'r15 'rax 'app6723)
   (set 'tmp6729 'r15 'rax)
   (set 'tmp6729 'r15 'rax)
   (set 'r15 'rax)
   (set 'h6718 'r15 'rax)
   (set 'h6718 'r15 'rax)
   (set 'g6717 'h6718 'rax)
   (set 'h6718 'rax 'app6724)
   (set 'h6718 'r11 'rax 'app6724)
   (set 'h6718 'tmp6730 'rax 'app6724)
   (set 'tmp6730 'r15 'rax 'app6724)
   (set 'tmp6730 'r15 'rax 'app6724)
   (set 'tmp6730 'r15 'rax)
   (set 'tmp6730 'r15 'rax)
   (set 'r15 'rax)
   (set 'tmp6731 'r15 'rax)
   (set 'tmp6731 'r15 'rax)
   (set 'h6718 'tmp6731 'rax)
   (set 'tmp6731 'rax 'app6725)
   (set 'tmp6731 'r11 'rax 'app6725)
   (set 'tmp6731 'tmp6732 'rax 'app6725)
   (set 'tmp6731 'tmp6732 'rax)
   (set 'tmp6731 'tmp6732 'rax)
   (set 'tmp6731 'rax)
   (set 'tmp6731 'tmp6733)
   (set 'tmp6733 'tmp6734)
   (set 'tmp6734)
   (set)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6713)
   2
   (list
    '(fvs6721
      x6714
      lt6745
      end-data6744
      void6741
      void6740
      void6739
      y6715
      tmp6735
      tmp6736)
    0
    (list
     (set 'rsi 'r15)
     (set 'x6714 'r15)
     (set 'x6714 'y6715 'r15)
     (set 'x6714 'y6715 'r15 'tmp6735)
     (set 'x6714 'end-data6744 'y6715 'r15 'tmp6735)
     (set 'x6714 'end-data6744 'y6715 'r15 'tmp6735)
     (set 'x6714 'y6715 'r15 'tmp6735)
     (set 'x6714 'y6715 'r15 'tmp6735 'rax)
     (set 'lt6745 'x6714 'y6715 'r15 'tmp6735)
     (set 'x6714 'y6715 'tmp6735)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     (set 'x6714 'y6715 'tmp6736)
     (set 'x6714 'y6715 'tmp6736)
     (set 'x6714 'y6715 'tmp6736)
     (set 'y6715 'tmp6736)
     (set 'y6715 'tmp6736)
     (set 'y6715 'tmp6736)
     (set 'tmp6736)
     (set 'tmp6736)
     (set)))
   '(movq (reg rdi) (var fvs6721))
   '(movq (reg rsi) (var x6714))
   '(movq (int 4) (var y6715))
   '(leaq (function-ref lambda6719) (var tmp6735))
   '(movq (global-value free_ptr) (var end-data6744))
   '(addq (int 32) (var end-data6744))
   '(cmpq (global-value fromspace_end) (var end-data6744))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6745))
   (list
    'if
    '(eq? (int 0) (var lt6745))
    '((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
    (list
     (set 'x6714 'y6715 'tmp6735)
     (set 'x6714 'y6715 'tmp6735)
     (set 'x6714 'y6715 'tmp6735))
    '()
    '())
   '(movq (global-value free_ptr) (var tmp6736))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6736) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6736) (reg r11))
   '(movq (var tmp6735) (deref r11 8))
   '(movq (int 0) (var void6739))
   '(movq (var tmp6736) (reg r11))
   '(movq (var x6714) (deref r11 16))
   '(movq (int 0) (var void6740))
   '(movq (var tmp6736) (reg r11))
   '(movq (var y6715) (deref r11 24))
   '(movq (int 0) (var void6741))
   '(movq (var tmp6736) (reg rax)))
  (list
   'define
   '(lambda6719)
   2
   (list
    '(fvs6720 z6716 x6714 y6715 tmp6737 tmp6738)
    0
    (list
     (set 'rsi 'fvs6720)
     (set 'z6716 'fvs6720)
     (set 'z6716 'r11 'fvs6720)
     (set 'x6714 'z6716 'fvs6720)
     (set 'x6714 'z6716 'r11)
     (set 'x6714 'y6715 'z6716)
     (set 'x6714 'z6716 'tmp6737)
     (set 'x6714 'tmp6737)
     (set 'tmp6737 'tmp6738)
     (set 'tmp6738)
     (set)))
   '(movq (reg rdi) (var fvs6720))
   '(movq (reg rsi) (var z6716))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 16) (var x6714))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 24) (var y6715))
   '(movq (var y6715) (var tmp6737))
   '(addq (var z6716) (var tmp6737))
   '(movq (var x6714) (var tmp6738))
   '(addq (var tmp6737) (var tmp6738))
   '(movq (var tmp6738) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6713) (var tmp6726))
 '(movq (global-value free_ptr) (var end-data6746))
 '(addq (int 16) (var end-data6746))
 '(cmpq (global-value fromspace_end) (var end-data6746))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6747))
 (list
  'if
  '(eq? (int 0) (var lt6747))
  '((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
  (list (set 'tmp6726 'rax) (set 'tmp6726 'rax) (set 'tmp6726 'rax))
  '()
  '())
 '(movq (global-value free_ptr) (var app6722))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6722) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6722) (reg r11))
 '(movq (var tmp6726) (deref r11 8))
 '(movq (int 0) (var void6742))
 '(movq (var app6722) (reg r11))
 '(movq (deref r11 8) (var tmp6727))
 '(movq (var app6722) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6727))
 '(movq (reg rax) (var g6717))
 '(leaq (function-ref f6713) (var tmp6728))
 '(movq (global-value free_ptr) (var end-data6748))
 '(addq (int 16) (var end-data6748))
 '(cmpq (global-value fromspace_end) (var end-data6748))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6749))
 (list
  'if
  '(eq? (int 0) (var lt6749))
  '((movq (var g6717) (deref r15 0))
    (addq (int 8) (reg r15))
    (movq (reg r15) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (subq (int 8) (reg r15))
    (movq (deref r15 0) (var g6717)))
  (list
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'tmp6728 'r15 'rax)
   (set 'g6717 'tmp6728 'rax))
  '()
  '())
 '(movq (global-value free_ptr) (var app6723))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6723) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6723) (reg r11))
 '(movq (var tmp6728) (deref r11 8))
 '(movq (int 0) (var void6743))
 '(movq (var app6723) (reg r11))
 '(movq (deref r11 8) (var tmp6729))
 '(movq (var g6717) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6723) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6729))
 '(movq (reg rax) (var h6718))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6717))
 '(movq (var g6717) (var app6724))
 '(movq (var app6724) (reg r11))
 '(movq (deref r11 8) (var tmp6730))
 '(movq (var h6718) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6724) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6730))
 '(movq (reg rax) (var tmp6731))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6718))
 '(movq (var h6718) (var app6725))
 '(movq (var app6725) (reg r11))
 '(movq (deref r11 8) (var tmp6732))
 '(movq (var app6725) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6732))
 '(movq (reg rax) (var tmp6733))
 '(movq (var tmp6731) (var tmp6734))
 '(addq (var tmp6733) (var tmp6734))
 '(movq (var tmp6734) (reg rax)))


running pass: build interference on test: s4_8 @ utilities.rkt:253
output:
(list
 'program
 (list
  '(lt6749
    end-data6748
    lt6747
    end-data6746
    void6743
    void6742
    tmp6726
    app6722
    tmp6727
    g6717
    tmp6728
    app6723
    tmp6729
    h6718
    app6724
    tmp6730
    tmp6731
    app6725
    tmp6732
    tmp6733
    tmp6734)
  0
  (hash
   'r9
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'app6725
   (set 'tmp6731 'tmp6732 'rax)
   'app6724
   (set 'h6718 'tmp6730 'r15 'rax)
   'app6723
   (set 'g6717 'void6743 'tmp6728 'tmp6729 'r11 'r15 'rax)
   'app6722
   (set 'tmp6726 'void6742 'tmp6727 'r11 'rax)
   'r10
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'r11
   (set 'g6717 'tmp6726 'h6718 'tmp6728 'tmp6731 'rax 'app6722 'app6723)
   'rax
   (set
    'lt6749
    'lt6747
    'rdx
    'rcx
    'rsi
    'rdi
    'g6717
    'void6743
    'r8
    'tmp6726
    'h6718
    'void6742
    'r9
    'tmp6727
    'r10
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r11
    'r15
    'app6722
    'app6723
    'app6724
    'app6725)
   'void6742
   (set 'rax 'app6722)
   'void6743
   (set 'g6717 'rax 'app6723)
   'end-data6746
   (set 'tmp6726 'r15)
   'lt6747
   (set 'tmp6726 'r15 'rax)
   'end-data6748
   (set 'g6717 'tmp6728)
   'lt6749
   (set 'g6717 'tmp6728 'rax)
   '__flag
   (set 'g6717 'tmp6726 'tmp6728 'r15)
   'tmp6734
   (set 'tmp6733)
   'tmp6733
   (set 'tmp6731 'tmp6734)
   'tmp6732
   (set 'rsi 'rdi 'tmp6731 'rax 'app6725)
   'tmp6731
   (set
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'h6718
    'r9
    'r10
    'tmp6732
    'r11
    'tmp6733
    'r15
    'rax
    'app6725)
   'tmp6730
   (set 'rsi 'rdi 'h6718 'r15 'rax 'app6724)
   'tmp6729
   (set 'rsi 'rdi 'g6717 'r15 'rax 'app6723)
   'tmp6728
   (set
    'lt6749
    'end-data6748
    'rdx
    'rcx
    'rsi
    'rdi
    'g6717
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6723)
   'h6718
   (set 'g6717 'tmp6730 'tmp6731 'r11 'r15 'rax 'app6724)
   'tmp6726
   (set
    'lt6747
    'end-data6746
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6722)
   'g6717
   (set
    'lt6749
    'end-data6748
    'void6743
    'h6718
    'tmp6728
    'tmp6729
    'r11
    '__flag
    'rax
    'app6723)
   'tmp6727
   (set 'rsi 'rdi 'rax 'app6722)
   'r15
   (set
    'lt6747
    'end-data6746
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'tmp6726
    'h6718
    'r9
    'r10
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    '__flag
    'rax
    'app6723
    'app6724)
   'rdi
   (set
    'tmp6726
    'tmp6727
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r15
    'rax)
   'rsi
   (set
    'tmp6726
    'tmp6727
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r15
    'rax)
   'rdx
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'rcx
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'r8
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6713)
   2
   (list
    '(fvs6721
      x6714
      lt6745
      end-data6744
      void6741
      void6740
      void6739
      y6715
      tmp6735
      tmp6736)
    0
    (hash
     'r10
     (set 'x6714 'y6715 'tmp6735)
     'fvs6721
     (set 'rsi 'r15)
     'rax
     (set 'x6714 'y6715 'r15 'tmp6735)
     'tmp6736
     (set 'x6714 'y6715 'void6741 'void6740 'void6739 'r11 'tmp6735)
     'tmp6735
     (set
      'rdx
      'lt6745
      'x6714
      'rcx
      'end-data6744
      'y6715
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'r11
      'r15
      '__flag
      'tmp6736
      'rax)
     'r15
     (set 'lt6745 'x6714 'end-data6744 'y6715 'tmp6735 '__flag 'rax 'fvs6721)
     '__flag
     (set 'x6714 'y6715 'r15 'tmp6735)
     'r11
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     'void6739
     (set 'x6714 'y6715 'tmp6736)
     'void6740
     (set 'y6715 'tmp6736)
     'void6741
     (set 'tmp6736)
     'r9
     (set 'x6714 'y6715 'tmp6735)
     'r8
     (set 'x6714 'y6715 'tmp6735)
     'rdi
     (set 'x6714 'y6715 'tmp6735)
     'rsi
     (set 'x6714 'y6715 'tmp6735 'fvs6721)
     'x6714
     (set
      'rdx
      'lt6745
      'rcx
      'end-data6744
      'y6715
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'void6739
      'r11
      'r15
      'tmp6735
      '__flag
      'tmp6736
      'rax)
     'lt6745
     (set 'x6714 'y6715 'r15 'tmp6735)
     'end-data6744
     (set 'x6714 'y6715 'r15 'tmp6735)
     'y6715
     (set
      'rdx
      'lt6745
      'x6714
      'rcx
      'end-data6744
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'void6740
      'void6739
      'r11
      'r15
      'tmp6735
      '__flag
      'tmp6736
      'rax)
     'rdx
     (set 'x6714 'y6715 'tmp6735)
     'rcx
     (set 'x6714 'y6715 'tmp6735)))
   '(movq (reg rdi) (var fvs6721))
   '(movq (reg rsi) (var x6714))
   '(movq (int 4) (var y6715))
   '(leaq (function-ref lambda6719) (var tmp6735))
   '(movq (global-value free_ptr) (var end-data6744))
   '(addq (int 32) (var end-data6744))
   '(cmpq (global-value fromspace_end) (var end-data6744))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6745))
   '(if (eq? (int 0) (var lt6745))
      ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
      ())
   '(movq (global-value free_ptr) (var tmp6736))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6736) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6736) (reg r11))
   '(movq (var tmp6735) (deref r11 8))
   '(movq (int 0) (var void6739))
   '(movq (var tmp6736) (reg r11))
   '(movq (var x6714) (deref r11 16))
   '(movq (int 0) (var void6740))
   '(movq (var tmp6736) (reg r11))
   '(movq (var y6715) (deref r11 24))
   '(movq (int 0) (var void6741))
   '(movq (var tmp6736) (reg rax)))
  (list
   'define
   '(lambda6719)
   2
   (list
    '(fvs6720 z6716 x6714 y6715 tmp6737 tmp6738)
    0
    (hash
     'r11
     (set 'x6714 'z6716)
     'fvs6720
     (set 'x6714 'rsi 'z6716)
     'z6716
     (set 'x6714 'y6715 'r11 'tmp6737 'fvs6720)
     'y6715
     (set 'x6714 'z6716)
     'x6714
     (set 'y6715 'z6716 'r11 'tmp6737 'fvs6720)
     'tmp6738
     (set 'tmp6737)
     'tmp6737
     (set 'x6714 'z6716 'tmp6738)
     'rsi
     (set 'fvs6720)))
   '(movq (reg rdi) (var fvs6720))
   '(movq (reg rsi) (var z6716))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 16) (var x6714))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 24) (var y6715))
   '(movq (var y6715) (var tmp6737))
   '(addq (var z6716) (var tmp6737))
   '(movq (var x6714) (var tmp6738))
   '(addq (var tmp6737) (var tmp6738))
   '(movq (var tmp6738) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6713) (var tmp6726))
 '(movq (global-value free_ptr) (var end-data6746))
 '(addq (int 16) (var end-data6746))
 '(cmpq (global-value fromspace_end) (var end-data6746))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6747))
 '(if (eq? (int 0) (var lt6747))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
 '(movq (global-value free_ptr) (var app6722))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6722) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6722) (reg r11))
 '(movq (var tmp6726) (deref r11 8))
 '(movq (int 0) (var void6742))
 '(movq (var app6722) (reg r11))
 '(movq (deref r11 8) (var tmp6727))
 '(movq (var app6722) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6727))
 '(movq (reg rax) (var g6717))
 '(leaq (function-ref f6713) (var tmp6728))
 '(movq (global-value free_ptr) (var end-data6748))
 '(addq (int 16) (var end-data6748))
 '(cmpq (global-value fromspace_end) (var end-data6748))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6749))
 '(if (eq? (int 0) (var lt6749))
    ((movq (var g6717) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6717)))
    ())
 '(movq (global-value free_ptr) (var app6723))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6723) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6723) (reg r11))
 '(movq (var tmp6728) (deref r11 8))
 '(movq (int 0) (var void6743))
 '(movq (var app6723) (reg r11))
 '(movq (deref r11 8) (var tmp6729))
 '(movq (var g6717) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6723) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6729))
 '(movq (reg rax) (var h6718))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6717))
 '(movq (var g6717) (var app6724))
 '(movq (var app6724) (reg r11))
 '(movq (deref r11 8) (var tmp6730))
 '(movq (var h6718) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6724) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6730))
 '(movq (reg rax) (var tmp6731))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6718))
 '(movq (var h6718) (var app6725))
 '(movq (var app6725) (reg r11))
 '(movq (deref r11 8) (var tmp6732))
 '(movq (var app6725) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6732))
 '(movq (reg rax) (var tmp6733))
 '(movq (var tmp6731) (var tmp6734))
 '(addq (var tmp6733) (var tmp6734))
 '(movq (var tmp6734) (reg rax)))


running pass: build move graph on test: s4_8 @ utilities.rkt:248
input:
(list
 'program
 (list
  '(lt6749
    end-data6748
    lt6747
    end-data6746
    void6743
    void6742
    tmp6726
    app6722
    tmp6727
    g6717
    tmp6728
    app6723
    tmp6729
    h6718
    app6724
    tmp6730
    tmp6731
    app6725
    tmp6732
    tmp6733
    tmp6734)
  0
  (hash
   'r9
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'app6725
   (set 'tmp6731 'tmp6732 'rax)
   'app6724
   (set 'h6718 'tmp6730 'r15 'rax)
   'app6723
   (set 'g6717 'void6743 'tmp6728 'tmp6729 'r11 'r15 'rax)
   'app6722
   (set 'tmp6726 'void6742 'tmp6727 'r11 'rax)
   'r10
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'r11
   (set 'g6717 'tmp6726 'h6718 'tmp6728 'tmp6731 'rax 'app6722 'app6723)
   'rax
   (set
    'lt6749
    'lt6747
    'rdx
    'rcx
    'rsi
    'rdi
    'g6717
    'void6743
    'r8
    'tmp6726
    'h6718
    'void6742
    'r9
    'tmp6727
    'r10
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r11
    'r15
    'app6722
    'app6723
    'app6724
    'app6725)
   'void6742
   (set 'rax 'app6722)
   'void6743
   (set 'g6717 'rax 'app6723)
   'end-data6746
   (set 'tmp6726 'r15)
   'lt6747
   (set 'tmp6726 'r15 'rax)
   'end-data6748
   (set 'g6717 'tmp6728)
   'lt6749
   (set 'g6717 'tmp6728 'rax)
   '__flag
   (set 'g6717 'tmp6726 'tmp6728 'r15)
   'tmp6734
   (set 'tmp6733)
   'tmp6733
   (set 'tmp6731 'tmp6734)
   'tmp6732
   (set 'rsi 'rdi 'tmp6731 'rax 'app6725)
   'tmp6731
   (set
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'h6718
    'r9
    'r10
    'tmp6732
    'r11
    'tmp6733
    'r15
    'rax
    'app6725)
   'tmp6730
   (set 'rsi 'rdi 'h6718 'r15 'rax 'app6724)
   'tmp6729
   (set 'rsi 'rdi 'g6717 'r15 'rax 'app6723)
   'tmp6728
   (set
    'lt6749
    'end-data6748
    'rdx
    'rcx
    'rsi
    'rdi
    'g6717
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6723)
   'h6718
   (set 'g6717 'tmp6730 'tmp6731 'r11 'r15 'rax 'app6724)
   'tmp6726
   (set
    'lt6747
    'end-data6746
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6722)
   'g6717
   (set
    'lt6749
    'end-data6748
    'void6743
    'h6718
    'tmp6728
    'tmp6729
    'r11
    '__flag
    'rax
    'app6723)
   'tmp6727
   (set 'rsi 'rdi 'rax 'app6722)
   'r15
   (set
    'lt6747
    'end-data6746
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'tmp6726
    'h6718
    'r9
    'r10
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    '__flag
    'rax
    'app6723
    'app6724)
   'rdi
   (set
    'tmp6726
    'tmp6727
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r15
    'rax)
   'rsi
   (set
    'tmp6726
    'tmp6727
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r15
    'rax)
   'rdx
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'rcx
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'r8
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6713)
   2
   (list
    '(fvs6721
      x6714
      lt6745
      end-data6744
      void6741
      void6740
      void6739
      y6715
      tmp6735
      tmp6736)
    0
    (hash
     'r10
     (set 'x6714 'y6715 'tmp6735)
     'fvs6721
     (set 'rsi 'r15)
     'rax
     (set 'x6714 'y6715 'r15 'tmp6735)
     'tmp6736
     (set 'x6714 'y6715 'void6741 'void6740 'void6739 'r11 'tmp6735)
     'tmp6735
     (set
      'rdx
      'lt6745
      'x6714
      'rcx
      'end-data6744
      'y6715
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'r11
      'r15
      '__flag
      'tmp6736
      'rax)
     'r15
     (set 'lt6745 'x6714 'end-data6744 'y6715 'tmp6735 '__flag 'rax 'fvs6721)
     '__flag
     (set 'x6714 'y6715 'r15 'tmp6735)
     'r11
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     'void6739
     (set 'x6714 'y6715 'tmp6736)
     'void6740
     (set 'y6715 'tmp6736)
     'void6741
     (set 'tmp6736)
     'r9
     (set 'x6714 'y6715 'tmp6735)
     'r8
     (set 'x6714 'y6715 'tmp6735)
     'rdi
     (set 'x6714 'y6715 'tmp6735)
     'rsi
     (set 'x6714 'y6715 'tmp6735 'fvs6721)
     'x6714
     (set
      'rdx
      'lt6745
      'rcx
      'end-data6744
      'y6715
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'void6739
      'r11
      'r15
      'tmp6735
      '__flag
      'tmp6736
      'rax)
     'lt6745
     (set 'x6714 'y6715 'r15 'tmp6735)
     'end-data6744
     (set 'x6714 'y6715 'r15 'tmp6735)
     'y6715
     (set
      'rdx
      'lt6745
      'x6714
      'rcx
      'end-data6744
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'void6740
      'void6739
      'r11
      'r15
      'tmp6735
      '__flag
      'tmp6736
      'rax)
     'rdx
     (set 'x6714 'y6715 'tmp6735)
     'rcx
     (set 'x6714 'y6715 'tmp6735)))
   '(movq (reg rdi) (var fvs6721))
   '(movq (reg rsi) (var x6714))
   '(movq (int 4) (var y6715))
   '(leaq (function-ref lambda6719) (var tmp6735))
   '(movq (global-value free_ptr) (var end-data6744))
   '(addq (int 32) (var end-data6744))
   '(cmpq (global-value fromspace_end) (var end-data6744))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6745))
   '(if (eq? (int 0) (var lt6745))
      ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
      ())
   '(movq (global-value free_ptr) (var tmp6736))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6736) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6736) (reg r11))
   '(movq (var tmp6735) (deref r11 8))
   '(movq (int 0) (var void6739))
   '(movq (var tmp6736) (reg r11))
   '(movq (var x6714) (deref r11 16))
   '(movq (int 0) (var void6740))
   '(movq (var tmp6736) (reg r11))
   '(movq (var y6715) (deref r11 24))
   '(movq (int 0) (var void6741))
   '(movq (var tmp6736) (reg rax)))
  (list
   'define
   '(lambda6719)
   2
   (list
    '(fvs6720 z6716 x6714 y6715 tmp6737 tmp6738)
    0
    (hash
     'r11
     (set 'x6714 'z6716)
     'fvs6720
     (set 'x6714 'rsi 'z6716)
     'z6716
     (set 'x6714 'y6715 'r11 'tmp6737 'fvs6720)
     'y6715
     (set 'x6714 'z6716)
     'x6714
     (set 'y6715 'z6716 'r11 'tmp6737 'fvs6720)
     'tmp6738
     (set 'tmp6737)
     'tmp6737
     (set 'x6714 'z6716 'tmp6738)
     'rsi
     (set 'fvs6720)))
   '(movq (reg rdi) (var fvs6720))
   '(movq (reg rsi) (var z6716))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 16) (var x6714))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 24) (var y6715))
   '(movq (var y6715) (var tmp6737))
   '(addq (var z6716) (var tmp6737))
   '(movq (var x6714) (var tmp6738))
   '(addq (var tmp6737) (var tmp6738))
   '(movq (var tmp6738) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6713) (var tmp6726))
 '(movq (global-value free_ptr) (var end-data6746))
 '(addq (int 16) (var end-data6746))
 '(cmpq (global-value fromspace_end) (var end-data6746))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6747))
 '(if (eq? (int 0) (var lt6747))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
 '(movq (global-value free_ptr) (var app6722))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6722) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6722) (reg r11))
 '(movq (var tmp6726) (deref r11 8))
 '(movq (int 0) (var void6742))
 '(movq (var app6722) (reg r11))
 '(movq (deref r11 8) (var tmp6727))
 '(movq (var app6722) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6727))
 '(movq (reg rax) (var g6717))
 '(leaq (function-ref f6713) (var tmp6728))
 '(movq (global-value free_ptr) (var end-data6748))
 '(addq (int 16) (var end-data6748))
 '(cmpq (global-value fromspace_end) (var end-data6748))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6749))
 '(if (eq? (int 0) (var lt6749))
    ((movq (var g6717) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6717)))
    ())
 '(movq (global-value free_ptr) (var app6723))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6723) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6723) (reg r11))
 '(movq (var tmp6728) (deref r11 8))
 '(movq (int 0) (var void6743))
 '(movq (var app6723) (reg r11))
 '(movq (deref r11 8) (var tmp6729))
 '(movq (var g6717) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6723) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6729))
 '(movq (reg rax) (var h6718))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6717))
 '(movq (var g6717) (var app6724))
 '(movq (var app6724) (reg r11))
 '(movq (deref r11 8) (var tmp6730))
 '(movq (var h6718) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6724) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6730))
 '(movq (reg rax) (var tmp6731))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6718))
 '(movq (var h6718) (var app6725))
 '(movq (var app6725) (reg r11))
 '(movq (deref r11 8) (var tmp6732))
 '(movq (var app6725) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6732))
 '(movq (reg rax) (var tmp6733))
 '(movq (var tmp6731) (var tmp6734))
 '(addq (var tmp6733) (var tmp6734))
 '(movq (var tmp6734) (reg rax)))


running pass: build move graph on test: s4_8 @ utilities.rkt:253
output:
(list
 'program
 (list
  '(lt6749
    end-data6748
    lt6747
    end-data6746
    void6743
    void6742
    tmp6726
    app6722
    tmp6727
    g6717
    tmp6728
    app6723
    tmp6729
    h6718
    app6724
    tmp6730
    tmp6731
    app6725
    tmp6732
    tmp6733
    tmp6734)
  0
  (hash
   'r9
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'app6725
   (set 'tmp6731 'tmp6732 'rax)
   'app6724
   (set 'h6718 'tmp6730 'r15 'rax)
   'app6723
   (set 'g6717 'void6743 'tmp6728 'tmp6729 'r11 'r15 'rax)
   'app6722
   (set 'tmp6726 'void6742 'tmp6727 'r11 'rax)
   'r10
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'r11
   (set 'g6717 'tmp6726 'h6718 'tmp6728 'tmp6731 'rax 'app6722 'app6723)
   'rax
   (set
    'lt6749
    'lt6747
    'rdx
    'rcx
    'rsi
    'rdi
    'g6717
    'void6743
    'r8
    'tmp6726
    'h6718
    'void6742
    'r9
    'tmp6727
    'r10
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r11
    'r15
    'app6722
    'app6723
    'app6724
    'app6725)
   'void6742
   (set 'rax 'app6722)
   'void6743
   (set 'g6717 'rax 'app6723)
   'end-data6746
   (set 'tmp6726 'r15)
   'lt6747
   (set 'tmp6726 'r15 'rax)
   'end-data6748
   (set 'g6717 'tmp6728)
   'lt6749
   (set 'g6717 'tmp6728 'rax)
   '__flag
   (set 'g6717 'tmp6726 'tmp6728 'r15)
   'tmp6734
   (set 'tmp6733)
   'tmp6733
   (set 'tmp6731 'tmp6734)
   'tmp6732
   (set 'rsi 'rdi 'tmp6731 'rax 'app6725)
   'tmp6731
   (set
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'h6718
    'r9
    'r10
    'tmp6732
    'r11
    'tmp6733
    'r15
    'rax
    'app6725)
   'tmp6730
   (set 'rsi 'rdi 'h6718 'r15 'rax 'app6724)
   'tmp6729
   (set 'rsi 'rdi 'g6717 'r15 'rax 'app6723)
   'tmp6728
   (set
    'lt6749
    'end-data6748
    'rdx
    'rcx
    'rsi
    'rdi
    'g6717
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6723)
   'h6718
   (set 'g6717 'tmp6730 'tmp6731 'r11 'r15 'rax 'app6724)
   'tmp6726
   (set
    'lt6747
    'end-data6746
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6722)
   'g6717
   (set
    'lt6749
    'end-data6748
    'void6743
    'h6718
    'tmp6728
    'tmp6729
    'r11
    '__flag
    'rax
    'app6723)
   'tmp6727
   (set 'rsi 'rdi 'rax 'app6722)
   'r15
   (set
    'lt6747
    'end-data6746
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'tmp6726
    'h6718
    'r9
    'r10
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    '__flag
    'rax
    'app6723
    'app6724)
   'rdi
   (set
    'tmp6726
    'tmp6727
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r15
    'rax)
   'rsi
   (set
    'tmp6726
    'tmp6727
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r15
    'rax)
   'rdx
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'rcx
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'r8
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax))
  (hash
   'app6725
   (set)
   'app6724
   (set)
   'app6723
   (set)
   'app6722
   (set)
   'tmp6734
   (set)
   'tmp6733
   (set)
   'tmp6732
   (set)
   'tmp6731
   (set)
   'tmp6730
   (set)
   'tmp6729
   (set)
   'tmp6728
   (set)
   'tmp6727
   (set)
   'g6717
   (set)
   'tmp6726
   (set)
   'void6743
   (set)
   'void6742
   (set)
   'h6718
   (set)
   'end-data6746
   (set)
   'lt6747
   (set)
   'end-data6748
   (set)
   'lt6749
   (set)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6713)
   2
   (list
    '(fvs6721
      x6714
      lt6745
      end-data6744
      void6741
      void6740
      void6739
      y6715
      tmp6735
      tmp6736)
    0
    (hash
     'r10
     (set 'x6714 'y6715 'tmp6735)
     'fvs6721
     (set 'rsi 'r15)
     'rax
     (set 'x6714 'y6715 'r15 'tmp6735)
     'tmp6736
     (set 'x6714 'y6715 'void6741 'void6740 'void6739 'r11 'tmp6735)
     'tmp6735
     (set
      'rdx
      'lt6745
      'x6714
      'rcx
      'end-data6744
      'y6715
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'r11
      'r15
      '__flag
      'tmp6736
      'rax)
     'r15
     (set 'lt6745 'x6714 'end-data6744 'y6715 'tmp6735 '__flag 'rax 'fvs6721)
     '__flag
     (set 'x6714 'y6715 'r15 'tmp6735)
     'r11
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     'void6739
     (set 'x6714 'y6715 'tmp6736)
     'void6740
     (set 'y6715 'tmp6736)
     'void6741
     (set 'tmp6736)
     'r9
     (set 'x6714 'y6715 'tmp6735)
     'r8
     (set 'x6714 'y6715 'tmp6735)
     'rdi
     (set 'x6714 'y6715 'tmp6735)
     'rsi
     (set 'x6714 'y6715 'tmp6735 'fvs6721)
     'x6714
     (set
      'rdx
      'lt6745
      'rcx
      'end-data6744
      'y6715
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'void6739
      'r11
      'r15
      'tmp6735
      '__flag
      'tmp6736
      'rax)
     'lt6745
     (set 'x6714 'y6715 'r15 'tmp6735)
     'end-data6744
     (set 'x6714 'y6715 'r15 'tmp6735)
     'y6715
     (set
      'rdx
      'lt6745
      'x6714
      'rcx
      'end-data6744
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'void6740
      'void6739
      'r11
      'r15
      'tmp6735
      '__flag
      'tmp6736
      'rax)
     'rdx
     (set 'x6714 'y6715 'tmp6735)
     'rcx
     (set 'x6714 'y6715 'tmp6735))
    (hash
     'void6739
     (set)
     'void6740
     (set)
     'void6741
     (set)
     'fvs6721
     (set)
     'y6715
     (set)
     'end-data6744
     (set)
     'lt6745
     (set)
     'x6714
     (set)
     'tmp6736
     (set)
     'tmp6735
     (set)))
   '(movq (reg rdi) (var fvs6721))
   '(movq (reg rsi) (var x6714))
   '(movq (int 4) (var y6715))
   '(leaq (function-ref lambda6719) (var tmp6735))
   '(movq (global-value free_ptr) (var end-data6744))
   '(addq (int 32) (var end-data6744))
   '(cmpq (global-value fromspace_end) (var end-data6744))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6745))
   '(if (eq? (int 0) (var lt6745))
      ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
      ())
   '(movq (global-value free_ptr) (var tmp6736))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6736) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6736) (reg r11))
   '(movq (var tmp6735) (deref r11 8))
   '(movq (int 0) (var void6739))
   '(movq (var tmp6736) (reg r11))
   '(movq (var x6714) (deref r11 16))
   '(movq (int 0) (var void6740))
   '(movq (var tmp6736) (reg r11))
   '(movq (var y6715) (deref r11 24))
   '(movq (int 0) (var void6741))
   '(movq (var tmp6736) (reg rax)))
  (list
   'define
   '(lambda6719)
   2
   (list
    '(fvs6720 z6716 x6714 y6715 tmp6737 tmp6738)
    0
    (hash
     'r11
     (set 'x6714 'z6716)
     'fvs6720
     (set 'x6714 'rsi 'z6716)
     'z6716
     (set 'x6714 'y6715 'r11 'tmp6737 'fvs6720)
     'y6715
     (set 'x6714 'z6716)
     'x6714
     (set 'y6715 'z6716 'r11 'tmp6737 'fvs6720)
     'tmp6738
     (set 'tmp6737)
     'tmp6737
     (set 'x6714 'z6716 'tmp6738)
     'rsi
     (set 'fvs6720))
    (hash
     'z6716
     (set)
     'y6715
     (set)
     'x6714
     (set)
     'tmp6738
     (set)
     'tmp6737
     (set)
     'fvs6720
     (set)))
   '(movq (reg rdi) (var fvs6720))
   '(movq (reg rsi) (var z6716))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 16) (var x6714))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 24) (var y6715))
   '(movq (var y6715) (var tmp6737))
   '(addq (var z6716) (var tmp6737))
   '(movq (var x6714) (var tmp6738))
   '(addq (var tmp6737) (var tmp6738))
   '(movq (var tmp6738) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6713) (var tmp6726))
 '(movq (global-value free_ptr) (var end-data6746))
 '(addq (int 16) (var end-data6746))
 '(cmpq (global-value fromspace_end) (var end-data6746))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6747))
 '(if (eq? (int 0) (var lt6747))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
 '(movq (global-value free_ptr) (var app6722))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6722) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6722) (reg r11))
 '(movq (var tmp6726) (deref r11 8))
 '(movq (int 0) (var void6742))
 '(movq (var app6722) (reg r11))
 '(movq (deref r11 8) (var tmp6727))
 '(movq (var app6722) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6727))
 '(movq (reg rax) (var g6717))
 '(leaq (function-ref f6713) (var tmp6728))
 '(movq (global-value free_ptr) (var end-data6748))
 '(addq (int 16) (var end-data6748))
 '(cmpq (global-value fromspace_end) (var end-data6748))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6749))
 '(if (eq? (int 0) (var lt6749))
    ((movq (var g6717) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6717)))
    ())
 '(movq (global-value free_ptr) (var app6723))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6723) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6723) (reg r11))
 '(movq (var tmp6728) (deref r11 8))
 '(movq (int 0) (var void6743))
 '(movq (var app6723) (reg r11))
 '(movq (deref r11 8) (var tmp6729))
 '(movq (var g6717) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6723) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6729))
 '(movq (reg rax) (var h6718))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6717))
 '(movq (var g6717) (var app6724))
 '(movq (var app6724) (reg r11))
 '(movq (deref r11 8) (var tmp6730))
 '(movq (var h6718) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6724) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6730))
 '(movq (reg rax) (var tmp6731))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6718))
 '(movq (var h6718) (var app6725))
 '(movq (var app6725) (reg r11))
 '(movq (deref r11 8) (var tmp6732))
 '(movq (var app6725) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6732))
 '(movq (reg rax) (var tmp6733))
 '(movq (var tmp6731) (var tmp6734))
 '(addq (var tmp6733) (var tmp6734))
 '(movq (var tmp6734) (reg rax)))


running pass: allocate registers on test: s4_8 @ utilities.rkt:248
input:
(list
 'program
 (list
  '(lt6749
    end-data6748
    lt6747
    end-data6746
    void6743
    void6742
    tmp6726
    app6722
    tmp6727
    g6717
    tmp6728
    app6723
    tmp6729
    h6718
    app6724
    tmp6730
    tmp6731
    app6725
    tmp6732
    tmp6733
    tmp6734)
  0
  (hash
   'r9
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'app6725
   (set 'tmp6731 'tmp6732 'rax)
   'app6724
   (set 'h6718 'tmp6730 'r15 'rax)
   'app6723
   (set 'g6717 'void6743 'tmp6728 'tmp6729 'r11 'r15 'rax)
   'app6722
   (set 'tmp6726 'void6742 'tmp6727 'r11 'rax)
   'r10
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'r11
   (set 'g6717 'tmp6726 'h6718 'tmp6728 'tmp6731 'rax 'app6722 'app6723)
   'rax
   (set
    'lt6749
    'lt6747
    'rdx
    'rcx
    'rsi
    'rdi
    'g6717
    'void6743
    'r8
    'tmp6726
    'h6718
    'void6742
    'r9
    'tmp6727
    'r10
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r11
    'r15
    'app6722
    'app6723
    'app6724
    'app6725)
   'void6742
   (set 'rax 'app6722)
   'void6743
   (set 'g6717 'rax 'app6723)
   'end-data6746
   (set 'tmp6726 'r15)
   'lt6747
   (set 'tmp6726 'r15 'rax)
   'end-data6748
   (set 'g6717 'tmp6728)
   'lt6749
   (set 'g6717 'tmp6728 'rax)
   '__flag
   (set 'g6717 'tmp6726 'tmp6728 'r15)
   'tmp6734
   (set 'tmp6733)
   'tmp6733
   (set 'tmp6731 'tmp6734)
   'tmp6732
   (set 'rsi 'rdi 'tmp6731 'rax 'app6725)
   'tmp6731
   (set
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'h6718
    'r9
    'r10
    'tmp6732
    'r11
    'tmp6733
    'r15
    'rax
    'app6725)
   'tmp6730
   (set 'rsi 'rdi 'h6718 'r15 'rax 'app6724)
   'tmp6729
   (set 'rsi 'rdi 'g6717 'r15 'rax 'app6723)
   'tmp6728
   (set
    'lt6749
    'end-data6748
    'rdx
    'rcx
    'rsi
    'rdi
    'g6717
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6723)
   'h6718
   (set 'g6717 'tmp6730 'tmp6731 'r11 'r15 'rax 'app6724)
   'tmp6726
   (set
    'lt6747
    'end-data6746
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6722)
   'g6717
   (set
    'lt6749
    'end-data6748
    'void6743
    'h6718
    'tmp6728
    'tmp6729
    'r11
    '__flag
    'rax
    'app6723)
   'tmp6727
   (set 'rsi 'rdi 'rax 'app6722)
   'r15
   (set
    'lt6747
    'end-data6746
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'tmp6726
    'h6718
    'r9
    'r10
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    '__flag
    'rax
    'app6723
    'app6724)
   'rdi
   (set
    'tmp6726
    'tmp6727
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r15
    'rax)
   'rsi
   (set
    'tmp6726
    'tmp6727
    'tmp6728
    'tmp6729
    'tmp6730
    'tmp6731
    'tmp6732
    'r15
    'rax)
   'rdx
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'rcx
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax)
   'r8
   (set 'tmp6726 'tmp6728 'tmp6731 'r15 'rax))
  (hash
   'app6725
   (set)
   'app6724
   (set)
   'app6723
   (set)
   'app6722
   (set)
   'tmp6734
   (set)
   'tmp6733
   (set)
   'tmp6732
   (set)
   'tmp6731
   (set)
   'tmp6730
   (set)
   'tmp6729
   (set)
   'tmp6728
   (set)
   'tmp6727
   (set)
   'g6717
   (set)
   'tmp6726
   (set)
   'void6743
   (set)
   'void6742
   (set)
   'h6718
   (set)
   'end-data6746
   (set)
   'lt6747
   (set)
   'end-data6748
   (set)
   'lt6749
   (set)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6713)
   2
   (list
    '(fvs6721
      x6714
      lt6745
      end-data6744
      void6741
      void6740
      void6739
      y6715
      tmp6735
      tmp6736)
    0
    (hash
     'r10
     (set 'x6714 'y6715 'tmp6735)
     'fvs6721
     (set 'rsi 'r15)
     'rax
     (set 'x6714 'y6715 'r15 'tmp6735)
     'tmp6736
     (set 'x6714 'y6715 'void6741 'void6740 'void6739 'r11 'tmp6735)
     'tmp6735
     (set
      'rdx
      'lt6745
      'x6714
      'rcx
      'end-data6744
      'y6715
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'r11
      'r15
      '__flag
      'tmp6736
      'rax)
     'r15
     (set 'lt6745 'x6714 'end-data6744 'y6715 'tmp6735 '__flag 'rax 'fvs6721)
     '__flag
     (set 'x6714 'y6715 'r15 'tmp6735)
     'r11
     (set 'x6714 'y6715 'tmp6735 'tmp6736)
     'void6739
     (set 'x6714 'y6715 'tmp6736)
     'void6740
     (set 'y6715 'tmp6736)
     'void6741
     (set 'tmp6736)
     'r9
     (set 'x6714 'y6715 'tmp6735)
     'r8
     (set 'x6714 'y6715 'tmp6735)
     'rdi
     (set 'x6714 'y6715 'tmp6735)
     'rsi
     (set 'x6714 'y6715 'tmp6735 'fvs6721)
     'x6714
     (set
      'rdx
      'lt6745
      'rcx
      'end-data6744
      'y6715
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'void6739
      'r11
      'r15
      'tmp6735
      '__flag
      'tmp6736
      'rax)
     'lt6745
     (set 'x6714 'y6715 'r15 'tmp6735)
     'end-data6744
     (set 'x6714 'y6715 'r15 'tmp6735)
     'y6715
     (set
      'rdx
      'lt6745
      'x6714
      'rcx
      'end-data6744
      'rsi
      'rdi
      'r8
      'r9
      'r10
      'void6740
      'void6739
      'r11
      'r15
      'tmp6735
      '__flag
      'tmp6736
      'rax)
     'rdx
     (set 'x6714 'y6715 'tmp6735)
     'rcx
     (set 'x6714 'y6715 'tmp6735))
    (hash
     'void6739
     (set)
     'void6740
     (set)
     'void6741
     (set)
     'fvs6721
     (set)
     'y6715
     (set)
     'end-data6744
     (set)
     'lt6745
     (set)
     'x6714
     (set)
     'tmp6736
     (set)
     'tmp6735
     (set)))
   '(movq (reg rdi) (var fvs6721))
   '(movq (reg rsi) (var x6714))
   '(movq (int 4) (var y6715))
   '(leaq (function-ref lambda6719) (var tmp6735))
   '(movq (global-value free_ptr) (var end-data6744))
   '(addq (int 32) (var end-data6744))
   '(cmpq (global-value fromspace_end) (var end-data6744))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6745))
   '(if (eq? (int 0) (var lt6745))
      ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
      ())
   '(movq (global-value free_ptr) (var tmp6736))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6736) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6736) (reg r11))
   '(movq (var tmp6735) (deref r11 8))
   '(movq (int 0) (var void6739))
   '(movq (var tmp6736) (reg r11))
   '(movq (var x6714) (deref r11 16))
   '(movq (int 0) (var void6740))
   '(movq (var tmp6736) (reg r11))
   '(movq (var y6715) (deref r11 24))
   '(movq (int 0) (var void6741))
   '(movq (var tmp6736) (reg rax)))
  (list
   'define
   '(lambda6719)
   2
   (list
    '(fvs6720 z6716 x6714 y6715 tmp6737 tmp6738)
    0
    (hash
     'r11
     (set 'x6714 'z6716)
     'fvs6720
     (set 'x6714 'rsi 'z6716)
     'z6716
     (set 'x6714 'y6715 'r11 'tmp6737 'fvs6720)
     'y6715
     (set 'x6714 'z6716)
     'x6714
     (set 'y6715 'z6716 'r11 'tmp6737 'fvs6720)
     'tmp6738
     (set 'tmp6737)
     'tmp6737
     (set 'x6714 'z6716 'tmp6738)
     'rsi
     (set 'fvs6720))
    (hash
     'z6716
     (set)
     'y6715
     (set)
     'x6714
     (set)
     'tmp6738
     (set)
     'tmp6737
     (set)
     'fvs6720
     (set)))
   '(movq (reg rdi) (var fvs6720))
   '(movq (reg rsi) (var z6716))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 16) (var x6714))
   '(movq (var fvs6720) (reg r11))
   '(movq (deref r11 24) (var y6715))
   '(movq (var y6715) (var tmp6737))
   '(addq (var z6716) (var tmp6737))
   '(movq (var x6714) (var tmp6738))
   '(addq (var tmp6737) (var tmp6738))
   '(movq (var tmp6738) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6713) (var tmp6726))
 '(movq (global-value free_ptr) (var end-data6746))
 '(addq (int 16) (var end-data6746))
 '(cmpq (global-value fromspace_end) (var end-data6746))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6747))
 '(if (eq? (int 0) (var lt6747))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
 '(movq (global-value free_ptr) (var app6722))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6722) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6722) (reg r11))
 '(movq (var tmp6726) (deref r11 8))
 '(movq (int 0) (var void6742))
 '(movq (var app6722) (reg r11))
 '(movq (deref r11 8) (var tmp6727))
 '(movq (var app6722) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6727))
 '(movq (reg rax) (var g6717))
 '(leaq (function-ref f6713) (var tmp6728))
 '(movq (global-value free_ptr) (var end-data6748))
 '(addq (int 16) (var end-data6748))
 '(cmpq (global-value fromspace_end) (var end-data6748))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6749))
 '(if (eq? (int 0) (var lt6749))
    ((movq (var g6717) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6717)))
    ())
 '(movq (global-value free_ptr) (var app6723))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6723) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6723) (reg r11))
 '(movq (var tmp6728) (deref r11 8))
 '(movq (int 0) (var void6743))
 '(movq (var app6723) (reg r11))
 '(movq (deref r11 8) (var tmp6729))
 '(movq (var g6717) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6723) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6729))
 '(movq (reg rax) (var h6718))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6717))
 '(movq (var g6717) (var app6724))
 '(movq (var app6724) (reg r11))
 '(movq (deref r11 8) (var tmp6730))
 '(movq (var h6718) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6724) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6730))
 '(movq (reg rax) (var tmp6731))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6718))
 '(movq (var h6718) (var app6725))
 '(movq (var app6725) (reg r11))
 '(movq (deref r11 8) (var tmp6732))
 '(movq (var app6725) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6732))
 '(movq (reg rax) (var tmp6733))
 '(movq (var tmp6731) (var tmp6734))
 '(addq (var tmp6733) (var tmp6734))
 '(movq (var tmp6734) (reg rax)))


coloring @ register_allocator.rkt:220
(cons v c):
'(x6714 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(y6715 . 8)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6735 . 9)


coloring @ register_allocator.rkt:220
(cons v c):
'(lt6745 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6736 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(end-data6744 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6739 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(fvs6721 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6740 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6741 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(fvs6720 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(x6714 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(z6716 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(y6715 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6737 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6738 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6726 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6728 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6731 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6730 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(g6717 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(h6718 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6729 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(app6723 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(app6724 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6732 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(app6722 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6727 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(app6725 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6743 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(lt6747 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(lt6749 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(end-data6746 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6742 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(end-data6748 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6733 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6734 . 0)


running pass: allocate registers on test: s4_8 @ utilities.rkt:253
output:
'(program
  0
  (type Integer)
  (defines
   (define (f6713)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r12))
     (leaq (function-ref lambda6719) (reg r13))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (if (eq? (int 0) (reg rcx))
       ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
       ())
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6719)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (movq (reg rbx) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (movq (reg rcx) (reg rcx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (if (eq? (int 0) (reg rcx))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (if (eq? (int 0) (reg rdx))
    ((movq (reg rcx) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (reg rcx)))
    ())
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: lower conditionals on test: s4_8 @ utilities.rkt:248
input:
'(program
  0
  (type Integer)
  (defines
   (define (f6713)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r12))
     (leaq (function-ref lambda6719) (reg r13))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (if (eq? (int 0) (reg rcx))
       ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
       ())
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6719)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (movq (reg rbx) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (movq (reg rcx) (reg rcx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (if (eq? (int 0) (reg rcx))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (if (eq? (int 0) (reg rdx))
    ((movq (reg rcx) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (reg rcx)))
    ())
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: lower conditionals on test: s4_8 @ utilities.rkt:253
output:
'(program
  0
  (type Integer)
  (defines
   (define (f6713)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r12))
     (leaq (function-ref lambda6719) (reg r13))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (cmpq (int 0) (reg rcx))
     (jmp-if e then6750)
     (jmp if_end6751)
     (label then6750)
     (movq (reg r15) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (label if_end6751)
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6719)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (movq (reg rbx) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (movq (reg rcx) (reg rcx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (jmp-if e then6752)
  (jmp if_end6753)
  (label then6752)
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (label if_end6753)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (jmp-if e then6754)
  (jmp if_end6755)
  (label then6754)
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (label if_end6755)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: patch instructions on test: s4_8 @ utilities.rkt:248
input:
'(program
  0
  (type Integer)
  (defines
   (define (f6713)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r12))
     (leaq (function-ref lambda6719) (reg r13))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (cmpq (int 0) (reg rcx))
     (jmp-if e then6750)
     (jmp if_end6751)
     (label then6750)
     (movq (reg r15) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (label if_end6751)
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6719)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (movq (reg rbx) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (movq (reg rcx) (reg rcx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (jmp-if e then6752)
  (jmp if_end6753)
  (label then6752)
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (label if_end6753)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (jmp-if e then6754)
  (jmp if_end6755)
  (label then6754)
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (label if_end6755)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: patch instructions on test: s4_8 @ utilities.rkt:253
output:
'(program
  0
  (type Integer)
  (defines
   (define (f6713)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r12))
     (leaq (function-ref lambda6719) (reg r13))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (cmpq (int 0) (reg rcx))
     (jmp-if e then6750)
     (jmp if_end6751)
     (label then6750)
     (movq (reg r15) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (label if_end6751)
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6719)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (jmp-if e then6752)
  (jmp if_end6753)
  (label then6752)
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (label if_end6753)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (jmp-if e then6754)
  (jmp if_end6755)
  (label then6754)
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (label if_end6755)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: print x86 on test: s4_8 @ utilities.rkt:248
input:
'(program
  0
  (type Integer)
  (defines
   (define (f6713)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r12))
     (leaq (function-ref lambda6719) (reg r13))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (cmpq (int 0) (reg rcx))
     (jmp-if e then6750)
     (jmp if_end6751)
     (label then6750)
     (movq (reg r15) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (label if_end6751)
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6719)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (jmp-if e then6752)
  (jmp if_end6753)
  (label then6752)
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (label if_end6753)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6713) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (jmp-if e then6754)
  (jmp if_end6755)
  (label then6754)
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (label if_end6755)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: print x86 on test: s4_8 @ utilities.rkt:253
output:
	.globl f6713
f6713:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$0, %rsp

	movq	%rdi, %rbx
	movq	%rsi, %rbx
	movq	$4, %r12
	leaq	lambda6719(%rip), %r13
	movq	free_ptr(%rip), %rcx
	addq	$32, %rcx
	cmpq	fromspace_end(%rip), %rcx
	setl	%al
	movzbq	%al, %rcx
	cmpq	$0, %rcx
	je then6750
	jmp if_end6751
then6750:
	movq	%r15, %rdi
	movq	$32, %rsi
	callq	collect
if_end6751:
	movq	free_ptr(%rip), %rcx
	addq	$32, free_ptr(%rip)
	movq	%rcx, %r11
	movq	$7, 0(%r11)
	movq	%rcx, %r11
	movq	%r13, 8(%r11)
	movq	$0, %rdx
	movq	%rcx, %r11
	movq	%rbx, 16(%r11)
	movq	$0, %rbx
	movq	%rcx, %r11
	movq	%r12, 24(%r11)
	movq	$0, %rbx
	movq	%rcx, %rax

	addq	$0, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	retq
	.globl lambda6719
lambda6719:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$0, %rsp

	movq	%rdi, %rbx
	movq	%rsi, %rdx
	movq	%rbx, %r11
	movq	16(%r11), %rcx
	movq	%rbx, %r11
	movq	24(%r11), %rbx
	addq	%rdx, %rbx
	addq	%rbx, %rcx
	movq	%rcx, %rax

	addq	$0, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	retq

	.globl main
main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$0, %rsp

	movq	$16384, %rdi
	movq	$16, %rsi
	callq	initialize
	movq	rootstack_begin(%rip), %r15
	leaq	f6713(%rip), %rbx
	movq	free_ptr(%rip), %rcx
	addq	$16, %rcx
	cmpq	fromspace_end(%rip), %rcx
	setl	%al
	movzbq	%al, %rcx
	cmpq	$0, %rcx
	je then6752
	jmp if_end6753
then6752:
	movq	%r15, %rdi
	movq	$16, %rsi
	callq	collect
if_end6753:
	movq	free_ptr(%rip), %rcx
	addq	$16, free_ptr(%rip)
	movq	%rcx, %r11
	movq	$3, 0(%r11)
	movq	%rcx, %r11
	movq	%rbx, 8(%r11)
	movq	$0, %rbx
	movq	%rcx, %r11
	movq	8(%r11), %rbx
	movq	%rcx, %rdi
	movq	$5, %rsi
	callq	*%rbx
	movq	%rax, %rcx
	leaq	f6713(%rip), %rbx
	movq	free_ptr(%rip), %rdx
	addq	$16, %rdx
	cmpq	fromspace_end(%rip), %rdx
	setl	%al
	movzbq	%al, %rdx
	cmpq	$0, %rdx
	je then6754
	jmp if_end6755
then6754:
	movq	%rcx, 0(%r15)
	addq	$8, %r15
	movq	%r15, %rdi
	movq	$16, %rsi
	callq	collect
	subq	$8, %r15
	movq	0(%r15), %rcx
if_end6755:
	movq	free_ptr(%rip), %rdx
	addq	$16, free_ptr(%rip)
	movq	%rdx, %r11
	movq	$3, 0(%r11)
	movq	%rdx, %r11
	movq	%rbx, 8(%r11)
	movq	$0, %rbx
	movq	%rdx, %r11
	movq	8(%r11), %rbx
	movq	%rcx, 0(%r15)
	addq	$8, %r15
	movq	%rdx, %rdi
	movq	$3, %rsi
	callq	*%rbx
	movq	%rax, %rdx
	subq	$8, %r15
	movq	0(%r15), %rcx
	movq	%rcx, %r11
	movq	8(%r11), %rbx
	movq	%rdx, 0(%r15)
	addq	$8, %r15
	movq	%rcx, %rdi
	movq	$11, %rsi
	callq	*%rbx
	movq	%rax, %rbx
	subq	$8, %r15
	movq	0(%r15), %rdx
	movq	%rdx, %r11
	movq	8(%r11), %rcx
	movq	%rdx, %rdi
	movq	$15, %rsi
	callq	*%rcx
	movq	%rax, %rcx
	addq	%rcx, %rbx
	movq	%rbx, %rax

	movq	%rax, %rdi
	callq	print_int
	movq	$0, %rax
	addq	$0, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	retq


compiler-tests starting @ utilities.rkt:367
(quote ()):
'()


compiler-tests, testing: @ utilities.rkt:370
test-name:
s4_8

utilities/read-program @ utilities.rkt:177
path:
tests/s4_8.rkt

utilities/read-program @ utilities.rkt:182
input-prog:
'(program
  (define (f (x : Integer))
    :
    (Integer -> Integer)
    (let ((y 4)) (lambda: ((z : Integer)) : Integer (+ x (+ y z)))))
  (let ((g (f 5))) (let ((h (f 3))) (+ (g 11) (h 15)))))


running pass: uniquify @ utilities.rkt:314
new-p:
'(program
  (type Integer)
  (define (f6756 (x6757 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6758 (has-type 4 Integer)))
       (has-type
        (lambda:
         ((z6759 : Integer))
         :
         Integer
         (has-type
          (+
           (has-type x6757 Integer)
           (has-type
            (+ (has-type y6758 Integer) (has-type z6759 Integer))
            Integer))
          Integer))
        (Integer -> Integer)))
     (Integer -> Integer)))
  (has-type
   (let ((g6760
          (has-type
           ((has-type f6756 (Integer -> (Integer -> Integer)))
            (has-type 5 Integer))
           (Integer -> Integer))))
     (has-type
      (let ((h6761
             (has-type
              ((has-type f6756 (Integer -> (Integer -> Integer)))
               (has-type 3 Integer))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           ((has-type g6760 (Integer -> Integer)) (has-type 11 Integer))
           Integer)
          (has-type
           ((has-type h6761 (Integer -> Integer)) (has-type 15 Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: reveal-functions @ utilities.rkt:314
new-p:
'(program
  (type Integer)
  (define (f6756 (x6757 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6758 (has-type 4 Integer)))
       (has-type
        (lambda:
         ((z6759 : Integer))
         :
         Integer
         (has-type
          (+
           (has-type x6757 Integer)
           (has-type
            (+ (has-type y6758 Integer) (has-type z6759 Integer))
            Integer))
          Integer))
        (Integer -> Integer)))
     (Integer -> Integer)))
  (has-type
   (let ((g6760
          (has-type
           (app
            (has-type (function-ref f6756) (Integer -> (Integer -> Integer)))
            (has-type 5 Integer))
           (Integer -> Integer))))
     (has-type
      (let ((h6761
             (has-type
              (app
               (has-type
                (function-ref f6756)
                (Integer -> (Integer -> Integer)))
               (has-type 3 Integer))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           (app (has-type g6760 (Integer -> Integer)) (has-type 11 Integer))
           Integer)
          (has-type
           (app (has-type h6761 (Integer -> Integer)) (has-type 15 Integer))
           Integer))
         Integer))
      Integer))
   Integer))


fvs:  @ lambda.rkt:120
(map car fvs-table):
'(x6757 y6758)


running pass: convert-to-closures @ utilities.rkt:314
new-p:
'(program
  (type Integer)
  (define (f6756 (fvs6764 : _) (x6757 : Integer))
    :
    (Integer -> Integer)
    (has-type
     (let ((y6758 (has-type 4 Integer)))
       (has-type
        (vector
         (has-type (function-ref lambda6762) _)
         (has-type x6757 Integer)
         (has-type y6758 Integer))
        (Vector _ Integer Integer)))
     (Integer -> Integer)))
  (define (lambda6762 (fvs6763 : _) (z6759 : Integer))
    :
    Integer
    (has-type
     (let ((x6757
            (has-type
             (vector-ref (has-type fvs6763 _) (has-type 1 Integer))
             Integer)))
       (has-type
        (let ((y6758
               (has-type
                (vector-ref (has-type fvs6763 _) (has-type 2 Integer))
                Integer)))
          (has-type
           (+
            (has-type x6757 Integer)
            (has-type
             (+ (has-type y6758 Integer) (has-type z6759 Integer))
             Integer))
           Integer))
        Integer))
     Integer))
  (has-type
   (let ((g6760
          (has-type
           (let ((app6765
                  (has-type
                   (vector (has-type (function-ref f6756) _))
                   (Vector _))))
             (has-type
              (app
               (has-type
                (vector-ref (has-type app6765 (Vector _)) (has-type 0 Integer))
                _)
               (has-type app6765 (Vector _))
               (has-type 5 Integer))
              (Integer -> Integer)))
           (Integer -> Integer))))
     (has-type
      (let ((h6761
             (has-type
              (let ((app6766
                     (has-type
                      (vector (has-type (function-ref f6756) _))
                      (Vector _))))
                (has-type
                 (app
                  (has-type
                   (vector-ref
                    (has-type app6766 (Vector _))
                    (has-type 0 Integer))
                   _)
                  (has-type app6766 (Vector _))
                  (has-type 3 Integer))
                 (Integer -> Integer)))
              (Integer -> Integer))))
        (has-type
         (+
          (has-type
           (let ((app6767 (has-type g6760 (Integer -> Integer))))
             (has-type
              (app
               (has-type
                (vector-ref
                 (has-type app6767 (Integer -> Integer))
                 (has-type 0 Integer))
                _)
               (has-type app6767 (Integer -> Integer))
               (has-type 11 Integer))
              Integer))
           Integer)
          (has-type
           (let ((app6768 (has-type h6761 (Integer -> Integer))))
             (has-type
              (app
               (has-type
                (vector-ref
                 (has-type app6768 (Integer -> Integer))
                 (has-type 0 Integer))
                _)
               (has-type app6768 (Integer -> Integer))
               (has-type 15 Integer))
              Integer))
           Integer))
         Integer))
      Integer))
   Integer))


running pass: flatten @ utilities.rkt:314
new-p:
'(program
  (tmp6769
   app6765
   tmp6770
   g6760
   tmp6771
   app6766
   tmp6772
   h6761
   app6767
   tmp6773
   tmp6774
   app6768
   tmp6775
   tmp6776
   tmp6777)
  (type Integer)
  (defines
   (define (f6756 (fvs6764 : _) (x6757 : Integer))
     :
     (Integer -> Integer)
     (y6758 tmp6778 tmp6779)
     (assign y6758 (has-type 4 Integer))
     (assign tmp6778 (has-type (function-ref lambda6762) _))
     (assign
      tmp6779
      (has-type
       (vector
        (has-type tmp6778 _)
        (has-type x6757 Integer)
        (has-type y6758 Integer))
       (Vector _ Integer Integer)))
     (return (has-type tmp6779 (Vector _ Integer Integer))))
   (define (lambda6762 (fvs6763 : _) (z6759 : Integer))
     :
     Integer
     (x6757 y6758 tmp6780 tmp6781)
     (assign
      x6757
      (has-type
       (vector-ref (has-type fvs6763 _) (has-type 1 Integer))
       Integer))
     (assign
      y6758
      (has-type
       (vector-ref (has-type fvs6763 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6780
      (has-type (+ (has-type y6758 Integer) (has-type z6759 Integer)) Integer))
     (assign
      tmp6781
      (has-type
       (+ (has-type x6757 Integer) (has-type tmp6780 Integer))
       Integer))
     (return (has-type tmp6781 Integer))))
  (assign tmp6769 (has-type (function-ref f6756) _))
  (assign app6765 (has-type (vector (has-type tmp6769 _)) (Vector _)))
  (assign
   tmp6770
   (has-type
    (vector-ref (has-type app6765 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   g6760
   (has-type
    (app
     (has-type tmp6770 _)
     (has-type app6765 (Vector _))
     (has-type 5 Integer))
    (Integer -> Integer)))
  (assign tmp6771 (has-type (function-ref f6756) _))
  (assign app6766 (has-type (vector (has-type tmp6771 _)) (Vector _)))
  (assign
   tmp6772
   (has-type
    (vector-ref (has-type app6766 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   h6761
   (has-type
    (app
     (has-type tmp6772 _)
     (has-type app6766 (Vector _))
     (has-type 3 Integer))
    (Integer -> Integer)))
  (assign app6767 (has-type g6760 (Integer -> Integer)))
  (assign
   tmp6773
   (has-type
    (vector-ref (has-type app6767 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6774
   (has-type
    (app
     (has-type tmp6773 _)
     (has-type app6767 (Integer -> Integer))
     (has-type 11 Integer))
    Integer))
  (assign app6768 (has-type h6761 (Integer -> Integer)))
  (assign
   tmp6775
   (has-type
    (vector-ref (has-type app6768 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6776
   (has-type
    (app
     (has-type tmp6775 _)
     (has-type app6768 (Integer -> Integer))
     (has-type 15 Integer))
    Integer))
  (assign
   tmp6777
   (has-type
    (+ (has-type tmp6774 Integer) (has-type tmp6776 Integer))
    Integer))
  (return (has-type tmp6777 Integer)))


running pass: expose allocation @ utilities.rkt:314
new-p:
'(program
  (void6786
   void6785
   tmp6769
   app6765
   tmp6770
   g6760
   tmp6771
   app6766
   tmp6772
   h6761
   app6767
   tmp6773
   tmp6774
   app6768
   tmp6775
   tmp6776
   tmp6777)
  (type Integer)
  (defines
   (define (f6756 (fvs6764 : _) (x6757 : Integer))
     :
     (Integer -> Integer)
     (void6784 void6783 void6782 y6758 tmp6778 tmp6779)
     (assign y6758 (has-type 4 Integer))
     (assign tmp6778 (has-type (function-ref lambda6762) _))
     (if (has-type (collection-needed? 32) Boolean) ((collect 32)) ())
     (assign tmp6779 (has-type (allocate 3) (Vector _ Integer Integer)))
     (assign
      void6782
      (has-type
       (vector-set!
        (has-type tmp6779 (Vector _ Integer Integer))
        (has-type 0 Integer)
        (has-type tmp6778 _))
       Void))
     (assign
      void6783
      (has-type
       (vector-set!
        (has-type tmp6779 (Vector _ Integer Integer))
        (has-type 1 Integer)
        (has-type x6757 Integer))
       Void))
     (assign
      void6784
      (has-type
       (vector-set!
        (has-type tmp6779 (Vector _ Integer Integer))
        (has-type 2 Integer)
        (has-type y6758 Integer))
       Void))
     (return (has-type tmp6779 (Vector _ Integer Integer))))
   (define (lambda6762 (fvs6763 : _) (z6759 : Integer))
     :
     Integer
     (x6757 y6758 tmp6780 tmp6781)
     (assign
      x6757
      (has-type
       (vector-ref (has-type fvs6763 _) (has-type 1 Integer))
       Integer))
     (assign
      y6758
      (has-type
       (vector-ref (has-type fvs6763 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6780
      (has-type (+ (has-type y6758 Integer) (has-type z6759 Integer)) Integer))
     (assign
      tmp6781
      (has-type
       (+ (has-type x6757 Integer) (has-type tmp6780 Integer))
       Integer))
     (return (has-type tmp6781 Integer))))
  (initialize 16384 16)
  (assign tmp6769 (has-type (function-ref f6756) _))
  (if (has-type (collection-needed? 16) Boolean) ((collect 16)) ())
  (assign app6765 (has-type (allocate 1) (Vector _)))
  (assign
   void6785
   (has-type
    (vector-set!
     (has-type app6765 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6769 _))
    Void))
  (assign
   tmp6770
   (has-type
    (vector-ref (has-type app6765 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   g6760
   (has-type
    (app
     (has-type tmp6770 _)
     (has-type app6765 (Vector _))
     (has-type 5 Integer))
    (Integer -> Integer)))
  (assign tmp6771 (has-type (function-ref f6756) _))
  (if (has-type (collection-needed? 16) Boolean) ((collect 16)) ())
  (assign app6766 (has-type (allocate 1) (Vector _)))
  (assign
   void6786
   (has-type
    (vector-set!
     (has-type app6766 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6771 _))
    Void))
  (assign
   tmp6772
   (has-type
    (vector-ref (has-type app6766 (Vector _)) (has-type 0 Integer))
    _))
  (assign
   h6761
   (has-type
    (app
     (has-type tmp6772 _)
     (has-type app6766 (Vector _))
     (has-type 3 Integer))
    (Integer -> Integer)))
  (assign app6767 (has-type g6760 (Integer -> Integer)))
  (assign
   tmp6773
   (has-type
    (vector-ref (has-type app6767 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6774
   (has-type
    (app
     (has-type tmp6773 _)
     (has-type app6767 (Integer -> Integer))
     (has-type 11 Integer))
    Integer))
  (assign app6768 (has-type h6761 (Integer -> Integer)))
  (assign
   tmp6775
   (has-type
    (vector-ref (has-type app6768 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (assign
   tmp6776
   (has-type
    (app
     (has-type tmp6775 _)
     (has-type app6768 (Integer -> Integer))
     (has-type 15 Integer))
    Integer))
  (assign
   tmp6777
   (has-type
    (+ (has-type tmp6774 Integer) (has-type tmp6776 Integer))
    Integer))
  (return (has-type tmp6777 Integer)))


running pass: uncover call live roots @ utilities.rkt:314
new-p:
'(program
  (void6786
   void6785
   tmp6769
   app6765
   tmp6770
   g6760
   tmp6771
   app6766
   tmp6772
   h6761
   app6767
   tmp6773
   tmp6774
   app6768
   tmp6775
   tmp6776
   tmp6777)
  (type Integer)
  (defines
   (define (f6756 (fvs6764 : _) (x6757 : Integer))
     :
     (Integer -> Integer)
     (void6784 void6783 void6782 y6758 tmp6778 tmp6779)
     (assign y6758 (has-type 4 Integer))
     (assign tmp6778 (has-type (function-ref lambda6762) _))
     (if (has-type (collection-needed? 32) Boolean)
       ((call-live-roots () (collect 32)))
       ())
     (assign tmp6779 (has-type (allocate 3) (Vector _ Integer Integer)))
     (assign
      void6782
      (has-type
       (vector-set!
        (has-type tmp6779 (Vector _ Integer Integer))
        (has-type 0 Integer)
        (has-type tmp6778 _))
       Void))
     (assign
      void6783
      (has-type
       (vector-set!
        (has-type tmp6779 (Vector _ Integer Integer))
        (has-type 1 Integer)
        (has-type x6757 Integer))
       Void))
     (assign
      void6784
      (has-type
       (vector-set!
        (has-type tmp6779 (Vector _ Integer Integer))
        (has-type 2 Integer)
        (has-type y6758 Integer))
       Void))
     (return (has-type tmp6779 (Vector _ Integer Integer))))
   (define (lambda6762 (fvs6763 : _) (z6759 : Integer))
     :
     Integer
     (x6757 y6758 tmp6780 tmp6781)
     (assign
      x6757
      (has-type
       (vector-ref (has-type fvs6763 _) (has-type 1 Integer))
       Integer))
     (assign
      y6758
      (has-type
       (vector-ref (has-type fvs6763 _) (has-type 2 Integer))
       Integer))
     (assign
      tmp6780
      (has-type (+ (has-type y6758 Integer) (has-type z6759 Integer)) Integer))
     (assign
      tmp6781
      (has-type
       (+ (has-type x6757 Integer) (has-type tmp6780 Integer))
       Integer))
     (return (has-type tmp6781 Integer))))
  (initialize 16384 16)
  (assign tmp6769 (has-type (function-ref f6756) _))
  (if (has-type (collection-needed? 16) Boolean)
    ((call-live-roots () (collect 16)))
    ())
  (assign app6765 (has-type (allocate 1) (Vector _)))
  (assign
   void6785
   (has-type
    (vector-set!
     (has-type app6765 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6769 _))
    Void))
  (assign
   tmp6770
   (has-type
    (vector-ref (has-type app6765 (Vector _)) (has-type 0 Integer))
    _))
  (call-live-roots
   ()
   (assign
    g6760
    (has-type
     (app
      (has-type tmp6770 _)
      (has-type app6765 (Vector _))
      (has-type 5 Integer))
     (Integer -> Integer))))
  (assign tmp6771 (has-type (function-ref f6756) _))
  (if (has-type (collection-needed? 16) Boolean)
    ((call-live-roots (g6760) (collect 16)))
    ())
  (assign app6766 (has-type (allocate 1) (Vector _)))
  (assign
   void6786
   (has-type
    (vector-set!
     (has-type app6766 (Vector _))
     (has-type 0 Integer)
     (has-type tmp6771 _))
    Void))
  (assign
   tmp6772
   (has-type
    (vector-ref (has-type app6766 (Vector _)) (has-type 0 Integer))
    _))
  (call-live-roots
   (g6760)
   (assign
    h6761
    (has-type
     (app
      (has-type tmp6772 _)
      (has-type app6766 (Vector _))
      (has-type 3 Integer))
     (Integer -> Integer))))
  (assign app6767 (has-type g6760 (Integer -> Integer)))
  (assign
   tmp6773
   (has-type
    (vector-ref (has-type app6767 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (call-live-roots
   (h6761)
   (assign
    tmp6774
    (has-type
     (app
      (has-type tmp6773 _)
      (has-type app6767 (Integer -> Integer))
      (has-type 11 Integer))
     Integer)))
  (assign app6768 (has-type h6761 (Integer -> Integer)))
  (assign
   tmp6775
   (has-type
    (vector-ref (has-type app6768 (Integer -> Integer)) (has-type 0 Integer))
    _))
  (call-live-roots
   ()
   (assign
    tmp6776
    (has-type
     (app
      (has-type tmp6775 _)
      (has-type app6768 (Integer -> Integer))
      (has-type 15 Integer))
     Integer)))
  (assign
   tmp6777
   (has-type
    (+ (has-type tmp6774 Integer) (has-type tmp6776 Integer))
    Integer))
  (return (has-type tmp6777 Integer)))


running pass: instruction selection @ utilities.rkt:314
new-p:
'(program
  ((lt6792
    end-data6791
    lt6790
    end-data6789
    void6786
    void6785
    tmp6769
    app6765
    tmp6770
    g6760
    tmp6771
    app6766
    tmp6772
    h6761
    app6767
    tmp6773
    tmp6774
    app6768
    tmp6775
    tmp6776
    tmp6777)
   0)
  (type Integer)
  (defines
   (define (f6756)
     2
     ((fvs6764
       x6757
       lt6788
       end-data6787
       void6784
       void6783
       void6782
       y6758
       tmp6778
       tmp6779)
      0)
     (movq (reg rdi) (var fvs6764))
     (movq (reg rsi) (var x6757))
     (movq (int 4) (var y6758))
     (leaq (function-ref lambda6762) (var tmp6778))
     (movq (global-value free_ptr) (var end-data6787))
     (addq (int 32) (var end-data6787))
     (cmpq (global-value fromspace_end) (var end-data6787))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (var lt6788))
     (if (eq? (int 0) (var lt6788))
       ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
       ())
     (movq (global-value free_ptr) (var tmp6779))
     (addq (int 32) (global-value free_ptr))
     (movq (var tmp6779) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (var tmp6779) (reg r11))
     (movq (var tmp6778) (deref r11 8))
     (movq (int 0) (var void6782))
     (movq (var tmp6779) (reg r11))
     (movq (var x6757) (deref r11 16))
     (movq (int 0) (var void6783))
     (movq (var tmp6779) (reg r11))
     (movq (var y6758) (deref r11 24))
     (movq (int 0) (var void6784))
     (movq (var tmp6779) (reg rax)))
   (define (lambda6762)
     2
     ((fvs6763 z6759 x6757 y6758 tmp6780 tmp6781) 0)
     (movq (reg rdi) (var fvs6763))
     (movq (reg rsi) (var z6759))
     (movq (var fvs6763) (reg r11))
     (movq (deref r11 16) (var x6757))
     (movq (var fvs6763) (reg r11))
     (movq (deref r11 24) (var y6758))
     (movq (var y6758) (var tmp6780))
     (addq (var z6759) (var tmp6780))
     (movq (var x6757) (var tmp6781))
     (addq (var tmp6780) (var tmp6781))
     (movq (var tmp6781) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6756) (var tmp6769))
  (movq (global-value free_ptr) (var end-data6789))
  (addq (int 16) (var end-data6789))
  (cmpq (global-value fromspace_end) (var end-data6789))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (var lt6790))
  (if (eq? (int 0) (var lt6790))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
  (movq (global-value free_ptr) (var app6765))
  (addq (int 16) (global-value free_ptr))
  (movq (var app6765) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (var app6765) (reg r11))
  (movq (var tmp6769) (deref r11 8))
  (movq (int 0) (var void6785))
  (movq (var app6765) (reg r11))
  (movq (deref r11 8) (var tmp6770))
  (movq (var app6765) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (var tmp6770))
  (movq (reg rax) (var g6760))
  (leaq (function-ref f6756) (var tmp6771))
  (movq (global-value free_ptr) (var end-data6791))
  (addq (int 16) (var end-data6791))
  (cmpq (global-value fromspace_end) (var end-data6791))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (var lt6792))
  (if (eq? (int 0) (var lt6792))
    ((movq (var g6760) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6760)))
    ())
  (movq (global-value free_ptr) (var app6766))
  (addq (int 16) (global-value free_ptr))
  (movq (var app6766) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (var app6766) (reg r11))
  (movq (var tmp6771) (deref r11 8))
  (movq (int 0) (var void6786))
  (movq (var app6766) (reg r11))
  (movq (deref r11 8) (var tmp6772))
  (movq (var g6760) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (var app6766) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (var tmp6772))
  (movq (reg rax) (var h6761))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (var g6760))
  (movq (var g6760) (var app6767))
  (movq (var app6767) (reg r11))
  (movq (deref r11 8) (var tmp6773))
  (movq (var h6761) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (var app6767) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (var tmp6773))
  (movq (reg rax) (var tmp6774))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (var h6761))
  (movq (var h6761) (var app6768))
  (movq (var app6768) (reg r11))
  (movq (deref r11 8) (var tmp6775))
  (movq (var app6768) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (var tmp6775))
  (movq (reg rax) (var tmp6776))
  (movq (var tmp6774) (var tmp6777))
  (addq (var tmp6776) (var tmp6777))
  (movq (var tmp6777) (reg rax)))


running pass: liveness analysis @ utilities.rkt:314
new-p:
(list
 'program
 (list
  '(lt6792
    end-data6791
    lt6790
    end-data6789
    void6786
    void6785
    tmp6769
    app6765
    tmp6770
    g6760
    tmp6771
    app6766
    tmp6772
    h6761
    app6767
    tmp6773
    tmp6774
    app6768
    tmp6775
    tmp6776
    tmp6777)
  0
  (list
   (set)
   (set)
   (set)
   (set 'r15)
   (set 'tmp6769 'r15)
   (set 'end-data6789 'tmp6769 'r15)
   (set 'end-data6789 'tmp6769 'r15)
   (set 'tmp6769 'r15)
   (set 'tmp6769 'r15 'rax)
   (set 'lt6790 'tmp6769 'r15 'rax)
   (set 'tmp6769 'rax)
   (set 'tmp6769 'rax 'app6765)
   (set 'tmp6769 'rax 'app6765)
   (set 'tmp6769 'rax 'app6765)
   (set 'tmp6769 'rax 'app6765)
   (set 'tmp6769 'rax 'app6765)
   (set 'rax 'app6765)
   (set 'rax 'app6765)
   (set 'r11 'rax 'app6765)
   (set 'tmp6770 'rax 'app6765)
   (set 'tmp6770 'rax)
   (set 'tmp6770 'rax)
   (set 'rax)
   (set 'g6760)
   (set 'tmp6771 'g6760)
   (set 'end-data6791 'tmp6771 'g6760)
   (set 'end-data6791 'tmp6771 'g6760)
   (set 'tmp6771 'g6760)
   (set 'tmp6771 'rax 'g6760)
   (set 'lt6792 'tmp6771 'rax 'g6760)
   (set 'tmp6771 'rax 'g6760)
   (set 'tmp6771 'rax 'g6760 'app6766)
   (set 'tmp6771 'rax 'g6760 'app6766)
   (set 'tmp6771 'rax 'g6760 'app6766)
   (set 'tmp6771 'rax 'g6760 'app6766)
   (set 'tmp6771 'rax 'g6760 'app6766)
   (set 'rax 'g6760 'app6766)
   (set 'rax 'g6760 'app6766)
   (set 'r11 'rax 'g6760 'app6766)
   (set 'tmp6772 'rax 'g6760 'app6766)
   (set 'tmp6772 'r15 'rax 'app6766)
   (set 'tmp6772 'r15 'rax 'app6766)
   (set 'tmp6772 'r15 'rax)
   (set 'tmp6772 'r15 'rax)
   (set 'r15 'rax)
   (set 'r15 'rax 'h6761)
   (set 'r15 'rax 'h6761)
   (set 'rax 'g6760 'h6761)
   (set 'rax 'h6761 'app6767)
   (set 'r11 'rax 'h6761 'app6767)
   (set 'tmp6773 'rax 'h6761 'app6767)
   (set 'tmp6773 'r15 'rax 'app6767)
   (set 'tmp6773 'r15 'rax 'app6767)
   (set 'tmp6773 'r15 'rax)
   (set 'tmp6773 'r15 'rax)
   (set 'r15 'rax)
   (set 'tmp6774 'r15 'rax)
   (set 'tmp6774 'r15 'rax)
   (set 'tmp6774 'rax 'h6761)
   (set 'tmp6774 'rax 'app6768)
   (set 'tmp6774 'r11 'rax 'app6768)
   (set 'tmp6774 'tmp6775 'rax 'app6768)
   (set 'tmp6774 'tmp6775 'rax)
   (set 'tmp6774 'tmp6775 'rax)
   (set 'tmp6774 'rax)
   (set 'tmp6774 'tmp6776)
   (set 'tmp6776 'tmp6777)
   (set 'tmp6777)
   (set)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6756)
   2
   (list
    '(fvs6764
      x6757
      lt6788
      end-data6787
      void6784
      void6783
      void6782
      y6758
      tmp6778
      tmp6779)
    0
    (list
     (set 'rsi 'r15)
     (set 'r15 'x6757)
     (set 'r15 'x6757 'y6758)
     (set 'r15 'tmp6778 'x6757 'y6758)
     (set 'end-data6787 'r15 'tmp6778 'x6757 'y6758)
     (set 'end-data6787 'r15 'tmp6778 'x6757 'y6758)
     (set 'r15 'tmp6778 'x6757 'y6758)
     (set 'r15 'tmp6778 'rax 'x6757 'y6758)
     (set 'lt6788 'r15 'tmp6778 'x6757 'y6758)
     (set 'tmp6778 'x6757 'y6758)
     (set 'tmp6778 'tmp6779 'x6757 'y6758)
     (set 'tmp6778 'tmp6779 'x6757 'y6758)
     (set 'tmp6778 'tmp6779 'x6757 'y6758)
     (set 'tmp6778 'tmp6779 'x6757 'y6758)
     (set 'tmp6778 'tmp6779 'x6757 'y6758)
     (set 'tmp6779 'x6757 'y6758)
     (set 'tmp6779 'x6757 'y6758)
     (set 'tmp6779 'x6757 'y6758)
     (set 'tmp6779 'y6758)
     (set 'tmp6779 'y6758)
     (set 'tmp6779 'y6758)
     (set 'tmp6779)
     (set 'tmp6779)
     (set)))
   '(movq (reg rdi) (var fvs6764))
   '(movq (reg rsi) (var x6757))
   '(movq (int 4) (var y6758))
   '(leaq (function-ref lambda6762) (var tmp6778))
   '(movq (global-value free_ptr) (var end-data6787))
   '(addq (int 32) (var end-data6787))
   '(cmpq (global-value fromspace_end) (var end-data6787))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6788))
   (list
    'if
    '(eq? (int 0) (var lt6788))
    '((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
    (list
     (set 'tmp6778 'x6757 'y6758)
     (set 'tmp6778 'x6757 'y6758)
     (set 'tmp6778 'x6757 'y6758))
    '()
    '())
   '(movq (global-value free_ptr) (var tmp6779))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6779) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6779) (reg r11))
   '(movq (var tmp6778) (deref r11 8))
   '(movq (int 0) (var void6782))
   '(movq (var tmp6779) (reg r11))
   '(movq (var x6757) (deref r11 16))
   '(movq (int 0) (var void6783))
   '(movq (var tmp6779) (reg r11))
   '(movq (var y6758) (deref r11 24))
   '(movq (int 0) (var void6784))
   '(movq (var tmp6779) (reg rax)))
  (list
   'define
   '(lambda6762)
   2
   (list
    '(fvs6763 z6759 x6757 y6758 tmp6780 tmp6781)
    0
    (list
     (set 'rsi 'fvs6763)
     (set 'z6759 'fvs6763)
     (set 'r11 'z6759 'fvs6763)
     (set 'x6757 'z6759 'fvs6763)
     (set 'r11 'x6757 'z6759)
     (set 'x6757 'y6758 'z6759)
     (set 'tmp6780 'x6757 'z6759)
     (set 'tmp6780 'x6757)
     (set 'tmp6780 'tmp6781)
     (set 'tmp6781)
     (set)))
   '(movq (reg rdi) (var fvs6763))
   '(movq (reg rsi) (var z6759))
   '(movq (var fvs6763) (reg r11))
   '(movq (deref r11 16) (var x6757))
   '(movq (var fvs6763) (reg r11))
   '(movq (deref r11 24) (var y6758))
   '(movq (var y6758) (var tmp6780))
   '(addq (var z6759) (var tmp6780))
   '(movq (var x6757) (var tmp6781))
   '(addq (var tmp6780) (var tmp6781))
   '(movq (var tmp6781) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6756) (var tmp6769))
 '(movq (global-value free_ptr) (var end-data6789))
 '(addq (int 16) (var end-data6789))
 '(cmpq (global-value fromspace_end) (var end-data6789))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6790))
 (list
  'if
  '(eq? (int 0) (var lt6790))
  '((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
  (list (set 'tmp6769 'rax) (set 'tmp6769 'rax) (set 'tmp6769 'rax))
  '()
  '())
 '(movq (global-value free_ptr) (var app6765))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6765) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6765) (reg r11))
 '(movq (var tmp6769) (deref r11 8))
 '(movq (int 0) (var void6785))
 '(movq (var app6765) (reg r11))
 '(movq (deref r11 8) (var tmp6770))
 '(movq (var app6765) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6770))
 '(movq (reg rax) (var g6760))
 '(leaq (function-ref f6756) (var tmp6771))
 '(movq (global-value free_ptr) (var end-data6791))
 '(addq (int 16) (var end-data6791))
 '(cmpq (global-value fromspace_end) (var end-data6791))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6792))
 (list
  'if
  '(eq? (int 0) (var lt6792))
  '((movq (var g6760) (deref r15 0))
    (addq (int 8) (reg r15))
    (movq (reg r15) (reg rdi))
    (movq (int 16) (reg rsi))
    (callq collect)
    (subq (int 8) (reg r15))
    (movq (deref r15 0) (var g6760)))
  (list
   (set 'tmp6771 'r15 'rax)
   (set 'tmp6771 'r15 'rax)
   (set 'tmp6771 'r15 'rax)
   (set 'tmp6771 'r15 'rax)
   (set 'tmp6771 'r15 'rax)
   (set 'tmp6771 'r15 'rax)
   (set 'tmp6771 'rax 'g6760))
  '()
  '())
 '(movq (global-value free_ptr) (var app6766))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6766) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6766) (reg r11))
 '(movq (var tmp6771) (deref r11 8))
 '(movq (int 0) (var void6786))
 '(movq (var app6766) (reg r11))
 '(movq (deref r11 8) (var tmp6772))
 '(movq (var g6760) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6766) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6772))
 '(movq (reg rax) (var h6761))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6760))
 '(movq (var g6760) (var app6767))
 '(movq (var app6767) (reg r11))
 '(movq (deref r11 8) (var tmp6773))
 '(movq (var h6761) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6767) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6773))
 '(movq (reg rax) (var tmp6774))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6761))
 '(movq (var h6761) (var app6768))
 '(movq (var app6768) (reg r11))
 '(movq (deref r11 8) (var tmp6775))
 '(movq (var app6768) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6775))
 '(movq (reg rax) (var tmp6776))
 '(movq (var tmp6774) (var tmp6777))
 '(addq (var tmp6776) (var tmp6777))
 '(movq (var tmp6777) (reg rax)))


running pass: build interference @ utilities.rkt:314
new-p:
(list
 'program
 (list
  '(lt6792
    end-data6791
    lt6790
    end-data6789
    void6786
    void6785
    tmp6769
    app6765
    tmp6770
    g6760
    tmp6771
    app6766
    tmp6772
    h6761
    app6767
    tmp6773
    tmp6774
    app6768
    tmp6775
    tmp6776
    tmp6777)
  0
  (hash
   'rdx
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'rcx
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'h6761
   (set 'tmp6773 'tmp6774 'r11 'r15 'rax 'g6760 'app6767)
   'g6760
   (set
    'lt6792
    'end-data6791
    'void6786
    'tmp6771
    'tmp6772
    'r11
    '__flag
    'rax
    'h6761
    'app6766)
   'rax
   (set
    'lt6792
    'rdx
    'void6786
    'rcx
    'lt6790
    'void6785
    'rsi
    'rdi
    'tmp6769
    'r8
    'tmp6770
    'r9
    'tmp6771
    'r10
    'tmp6772
    'tmp6773
    'tmp6774
    'tmp6775
    'r11
    'r15
    'g6760
    'app6765
    'h6761
    'app6766
    'app6767
    'app6768)
   'tmp6777
   (set 'tmp6776)
   'tmp6776
   (set 'tmp6774 'tmp6777)
   'tmp6775
   (set 'rsi 'rdi 'tmp6774 'rax 'app6768)
   'tmp6774
   (set
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'r9
    'r10
    'tmp6775
    'tmp6776
    'r11
    'r15
    'rax
    'h6761
    'app6768)
   'tmp6773
   (set 'rsi 'rdi 'r15 'rax 'h6761 'app6767)
   'tmp6772
   (set 'rsi 'rdi 'r15 'rax 'g6760 'app6766)
   'tmp6771
   (set
    'lt6792
    'rdx
    'end-data6791
    'rcx
    'rsi
    'rdi
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'g6760
    'app6766)
   'tmp6770
   (set 'rsi 'rdi 'rax 'app6765)
   'tmp6769
   (set
    'rdx
    'rcx
    'lt6790
    'rsi
    'end-data6789
    'rdi
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6765)
   'app6768
   (set 'tmp6774 'tmp6775 'rax)
   'app6767
   (set 'tmp6773 'r15 'rax 'h6761)
   'app6766
   (set 'void6786 'tmp6771 'tmp6772 'r11 'r15 'rax 'g6760)
   'app6765
   (set 'void6785 'tmp6769 'tmp6770 'r11 'rax)
   '__flag
   (set 'tmp6769 'tmp6771 'r15 'g6760)
   'r15
   (set
    'rdx
    'rcx
    'lt6790
    'rsi
    'end-data6789
    'rdi
    'tmp6769
    'r8
    'r9
    'tmp6771
    'r10
    'tmp6772
    'tmp6773
    'tmp6774
    '__flag
    'rax
    'h6761
    'app6766
    'app6767)
   'r11
   (set 'tmp6769 'tmp6771 'tmp6774 'rax 'g6760 'app6765 'h6761 'app6766)
   'r10
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'r9
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'r8
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'rdi
   (set
    'tmp6769
    'tmp6770
    'tmp6771
    'tmp6772
    'tmp6773
    'tmp6774
    'tmp6775
    'r15
    'rax)
   'end-data6789
   (set 'tmp6769 'r15)
   'void6785
   (set 'rax 'app6765)
   'void6786
   (set 'rax 'g6760 'app6766)
   'lt6792
   (set 'tmp6771 'rax 'g6760)
   'end-data6791
   (set 'tmp6771 'g6760)
   'lt6790
   (set 'tmp6769 'r15 'rax)
   'rsi
   (set
    'tmp6769
    'tmp6770
    'tmp6771
    'tmp6772
    'tmp6773
    'tmp6774
    'tmp6775
    'r15
    'rax)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6756)
   2
   (list
    '(fvs6764
      x6757
      lt6788
      end-data6787
      void6784
      void6783
      void6782
      y6758
      tmp6778
      tmp6779)
    0
    (hash
     'r8
     (set 'tmp6778 'x6757 'y6758)
     'y6758
     (set
      'rdx
      'rcx
      'rsi
      'rdi
      'lt6788
      'void6783
      'r8
      'end-data6787
      'void6782
      'r9
      'r10
      'r11
      'r15
      'tmp6778
      'tmp6779
      '__flag
      'rax
      'x6757)
     'x6757
     (set
      'rdx
      'rcx
      'rsi
      'rdi
      'lt6788
      'r8
      'end-data6787
      'void6782
      'r9
      'r10
      'r11
      'r15
      'tmp6778
      'tmp6779
      '__flag
      'rax
      'y6758)
     'fvs6764
     (set 'rsi 'r15)
     'rax
     (set 'r15 'tmp6778 'x6757 'y6758)
     'tmp6779
     (set 'void6784 'void6783 'void6782 'r11 'tmp6778 'x6757 'y6758)
     'tmp6778
     (set
      'rdx
      'rcx
      'rsi
      'rdi
      'lt6788
      'r8
      'end-data6787
      'r9
      'r10
      'r11
      'r15
      'tmp6779
      '__flag
      'rax
      'x6757
      'y6758)
     'r15
     (set 'lt6788 'end-data6787 'tmp6778 '__flag 'rax 'x6757 'fvs6764 'y6758)
     '__flag
     (set 'r15 'tmp6778 'x6757 'y6758)
     'r11
     (set 'tmp6778 'tmp6779 'x6757 'y6758)
     'r10
     (set 'tmp6778 'x6757 'y6758)
     'r9
     (set 'tmp6778 'x6757 'y6758)
     'void6782
     (set 'tmp6779 'x6757 'y6758)
     'lt6788
     (set 'r15 'tmp6778 'x6757 'y6758)
     'end-data6787
     (set 'r15 'tmp6778 'x6757 'y6758)
     'void6784
     (set 'tmp6779)
     'void6783
     (set 'tmp6779 'y6758)
     'rsi
     (set 'tmp6778 'x6757 'fvs6764 'y6758)
     'rdi
     (set 'tmp6778 'x6757 'y6758)
     'rdx
     (set 'tmp6778 'x6757 'y6758)
     'rcx
     (set 'tmp6778 'x6757 'y6758)))
   '(movq (reg rdi) (var fvs6764))
   '(movq (reg rsi) (var x6757))
   '(movq (int 4) (var y6758))
   '(leaq (function-ref lambda6762) (var tmp6778))
   '(movq (global-value free_ptr) (var end-data6787))
   '(addq (int 32) (var end-data6787))
   '(cmpq (global-value fromspace_end) (var end-data6787))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6788))
   '(if (eq? (int 0) (var lt6788))
      ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
      ())
   '(movq (global-value free_ptr) (var tmp6779))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6779) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6779) (reg r11))
   '(movq (var tmp6778) (deref r11 8))
   '(movq (int 0) (var void6782))
   '(movq (var tmp6779) (reg r11))
   '(movq (var x6757) (deref r11 16))
   '(movq (int 0) (var void6783))
   '(movq (var tmp6779) (reg r11))
   '(movq (var y6758) (deref r11 24))
   '(movq (int 0) (var void6784))
   '(movq (var tmp6779) (reg rax)))
  (list
   'define
   '(lambda6762)
   2
   (list
    '(fvs6763 z6759 x6757 y6758 tmp6780 tmp6781)
    0
    (hash
     'r11
     (set 'x6757 'z6759)
     'z6759
     (set 'r11 'tmp6780 'x6757 'y6758 'fvs6763)
     'fvs6763
     (set 'rsi 'x6757 'z6759)
     'x6757
     (set 'r11 'tmp6780 'y6758 'z6759 'fvs6763)
     'y6758
     (set 'x6757 'z6759)
     'rsi
     (set 'fvs6763)
     'tmp6781
     (set 'tmp6780)
     'tmp6780
     (set 'tmp6781 'x6757 'z6759)))
   '(movq (reg rdi) (var fvs6763))
   '(movq (reg rsi) (var z6759))
   '(movq (var fvs6763) (reg r11))
   '(movq (deref r11 16) (var x6757))
   '(movq (var fvs6763) (reg r11))
   '(movq (deref r11 24) (var y6758))
   '(movq (var y6758) (var tmp6780))
   '(addq (var z6759) (var tmp6780))
   '(movq (var x6757) (var tmp6781))
   '(addq (var tmp6780) (var tmp6781))
   '(movq (var tmp6781) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6756) (var tmp6769))
 '(movq (global-value free_ptr) (var end-data6789))
 '(addq (int 16) (var end-data6789))
 '(cmpq (global-value fromspace_end) (var end-data6789))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6790))
 '(if (eq? (int 0) (var lt6790))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
 '(movq (global-value free_ptr) (var app6765))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6765) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6765) (reg r11))
 '(movq (var tmp6769) (deref r11 8))
 '(movq (int 0) (var void6785))
 '(movq (var app6765) (reg r11))
 '(movq (deref r11 8) (var tmp6770))
 '(movq (var app6765) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6770))
 '(movq (reg rax) (var g6760))
 '(leaq (function-ref f6756) (var tmp6771))
 '(movq (global-value free_ptr) (var end-data6791))
 '(addq (int 16) (var end-data6791))
 '(cmpq (global-value fromspace_end) (var end-data6791))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6792))
 '(if (eq? (int 0) (var lt6792))
    ((movq (var g6760) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6760)))
    ())
 '(movq (global-value free_ptr) (var app6766))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6766) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6766) (reg r11))
 '(movq (var tmp6771) (deref r11 8))
 '(movq (int 0) (var void6786))
 '(movq (var app6766) (reg r11))
 '(movq (deref r11 8) (var tmp6772))
 '(movq (var g6760) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6766) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6772))
 '(movq (reg rax) (var h6761))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6760))
 '(movq (var g6760) (var app6767))
 '(movq (var app6767) (reg r11))
 '(movq (deref r11 8) (var tmp6773))
 '(movq (var h6761) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6767) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6773))
 '(movq (reg rax) (var tmp6774))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6761))
 '(movq (var h6761) (var app6768))
 '(movq (var app6768) (reg r11))
 '(movq (deref r11 8) (var tmp6775))
 '(movq (var app6768) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6775))
 '(movq (reg rax) (var tmp6776))
 '(movq (var tmp6774) (var tmp6777))
 '(addq (var tmp6776) (var tmp6777))
 '(movq (var tmp6777) (reg rax)))


running pass: build move graph @ utilities.rkt:314
new-p:
(list
 'program
 (list
  '(lt6792
    end-data6791
    lt6790
    end-data6789
    void6786
    void6785
    tmp6769
    app6765
    tmp6770
    g6760
    tmp6771
    app6766
    tmp6772
    h6761
    app6767
    tmp6773
    tmp6774
    app6768
    tmp6775
    tmp6776
    tmp6777)
  0
  (hash
   'rdx
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'rcx
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'h6761
   (set 'tmp6773 'tmp6774 'r11 'r15 'rax 'g6760 'app6767)
   'g6760
   (set
    'lt6792
    'end-data6791
    'void6786
    'tmp6771
    'tmp6772
    'r11
    '__flag
    'rax
    'h6761
    'app6766)
   'rax
   (set
    'lt6792
    'rdx
    'void6786
    'rcx
    'lt6790
    'void6785
    'rsi
    'rdi
    'tmp6769
    'r8
    'tmp6770
    'r9
    'tmp6771
    'r10
    'tmp6772
    'tmp6773
    'tmp6774
    'tmp6775
    'r11
    'r15
    'g6760
    'app6765
    'h6761
    'app6766
    'app6767
    'app6768)
   'tmp6777
   (set 'tmp6776)
   'tmp6776
   (set 'tmp6774 'tmp6777)
   'tmp6775
   (set 'rsi 'rdi 'tmp6774 'rax 'app6768)
   'tmp6774
   (set
    'rdx
    'rcx
    'rsi
    'rdi
    'r8
    'r9
    'r10
    'tmp6775
    'tmp6776
    'r11
    'r15
    'rax
    'h6761
    'app6768)
   'tmp6773
   (set 'rsi 'rdi 'r15 'rax 'h6761 'app6767)
   'tmp6772
   (set 'rsi 'rdi 'r15 'rax 'g6760 'app6766)
   'tmp6771
   (set
    'lt6792
    'rdx
    'end-data6791
    'rcx
    'rsi
    'rdi
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'g6760
    'app6766)
   'tmp6770
   (set 'rsi 'rdi 'rax 'app6765)
   'tmp6769
   (set
    'rdx
    'rcx
    'lt6790
    'rsi
    'end-data6789
    'rdi
    'r8
    'r9
    'r10
    'r11
    'r15
    '__flag
    'rax
    'app6765)
   'app6768
   (set 'tmp6774 'tmp6775 'rax)
   'app6767
   (set 'tmp6773 'r15 'rax 'h6761)
   'app6766
   (set 'void6786 'tmp6771 'tmp6772 'r11 'r15 'rax 'g6760)
   'app6765
   (set 'void6785 'tmp6769 'tmp6770 'r11 'rax)
   '__flag
   (set 'tmp6769 'tmp6771 'r15 'g6760)
   'r15
   (set
    'rdx
    'rcx
    'lt6790
    'rsi
    'end-data6789
    'rdi
    'tmp6769
    'r8
    'r9
    'tmp6771
    'r10
    'tmp6772
    'tmp6773
    'tmp6774
    '__flag
    'rax
    'h6761
    'app6766
    'app6767)
   'r11
   (set 'tmp6769 'tmp6771 'tmp6774 'rax 'g6760 'app6765 'h6761 'app6766)
   'r10
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'r9
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'r8
   (set 'tmp6769 'tmp6771 'tmp6774 'r15 'rax)
   'rdi
   (set
    'tmp6769
    'tmp6770
    'tmp6771
    'tmp6772
    'tmp6773
    'tmp6774
    'tmp6775
    'r15
    'rax)
   'end-data6789
   (set 'tmp6769 'r15)
   'void6785
   (set 'rax 'app6765)
   'void6786
   (set 'rax 'g6760 'app6766)
   'lt6792
   (set 'tmp6771 'rax 'g6760)
   'end-data6791
   (set 'tmp6771 'g6760)
   'lt6790
   (set 'tmp6769 'r15 'rax)
   'rsi
   (set
    'tmp6769
    'tmp6770
    'tmp6771
    'tmp6772
    'tmp6773
    'tmp6774
    'tmp6775
    'r15
    'rax))
  (hash
   'app6768
   (set)
   'app6767
   (set)
   'app6766
   (set)
   'g6760
   (set)
   'app6765
   (set)
   'h6761
   (set)
   'tmp6777
   (set)
   'tmp6776
   (set)
   'tmp6775
   (set)
   'tmp6774
   (set)
   'tmp6773
   (set)
   'tmp6772
   (set)
   'tmp6771
   (set)
   'tmp6770
   (set)
   'tmp6769
   (set)
   'end-data6789
   (set)
   'lt6790
   (set)
   'end-data6791
   (set)
   'lt6792
   (set)
   'void6786
   (set)
   'void6785
   (set)))
 '(type Integer)
 (list
  'defines
  (list
   'define
   '(f6756)
   2
   (list
    '(fvs6764
      x6757
      lt6788
      end-data6787
      void6784
      void6783
      void6782
      y6758
      tmp6778
      tmp6779)
    0
    (hash
     'r8
     (set 'tmp6778 'x6757 'y6758)
     'y6758
     (set
      'rdx
      'rcx
      'rsi
      'rdi
      'lt6788
      'void6783
      'r8
      'end-data6787
      'void6782
      'r9
      'r10
      'r11
      'r15
      'tmp6778
      'tmp6779
      '__flag
      'rax
      'x6757)
     'x6757
     (set
      'rdx
      'rcx
      'rsi
      'rdi
      'lt6788
      'r8
      'end-data6787
      'void6782
      'r9
      'r10
      'r11
      'r15
      'tmp6778
      'tmp6779
      '__flag
      'rax
      'y6758)
     'fvs6764
     (set 'rsi 'r15)
     'rax
     (set 'r15 'tmp6778 'x6757 'y6758)
     'tmp6779
     (set 'void6784 'void6783 'void6782 'r11 'tmp6778 'x6757 'y6758)
     'tmp6778
     (set
      'rdx
      'rcx
      'rsi
      'rdi
      'lt6788
      'r8
      'end-data6787
      'r9
      'r10
      'r11
      'r15
      'tmp6779
      '__flag
      'rax
      'x6757
      'y6758)
     'r15
     (set 'lt6788 'end-data6787 'tmp6778 '__flag 'rax 'x6757 'fvs6764 'y6758)
     '__flag
     (set 'r15 'tmp6778 'x6757 'y6758)
     'r11
     (set 'tmp6778 'tmp6779 'x6757 'y6758)
     'r10
     (set 'tmp6778 'x6757 'y6758)
     'r9
     (set 'tmp6778 'x6757 'y6758)
     'void6782
     (set 'tmp6779 'x6757 'y6758)
     'lt6788
     (set 'r15 'tmp6778 'x6757 'y6758)
     'end-data6787
     (set 'r15 'tmp6778 'x6757 'y6758)
     'void6784
     (set 'tmp6779)
     'void6783
     (set 'tmp6779 'y6758)
     'rsi
     (set 'tmp6778 'x6757 'fvs6764 'y6758)
     'rdi
     (set 'tmp6778 'x6757 'y6758)
     'rdx
     (set 'tmp6778 'x6757 'y6758)
     'rcx
     (set 'tmp6778 'x6757 'y6758))
    (hash
     'y6758
     (set)
     'fvs6764
     (set)
     'void6783
     (set)
     'void6784
     (set)
     'end-data6787
     (set)
     'lt6788
     (set)
     'x6757
     (set)
     'void6782
     (set)
     'tmp6778
     (set)
     'tmp6779
     (set)))
   '(movq (reg rdi) (var fvs6764))
   '(movq (reg rsi) (var x6757))
   '(movq (int 4) (var y6758))
   '(leaq (function-ref lambda6762) (var tmp6778))
   '(movq (global-value free_ptr) (var end-data6787))
   '(addq (int 32) (var end-data6787))
   '(cmpq (global-value fromspace_end) (var end-data6787))
   '(set l (byte-reg al))
   '(movzbq (byte-reg al) (var lt6788))
   '(if (eq? (int 0) (var lt6788))
      ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
      ())
   '(movq (global-value free_ptr) (var tmp6779))
   '(addq (int 32) (global-value free_ptr))
   '(movq (var tmp6779) (reg r11))
   '(movq (int 7) (deref r11 0))
   '(movq (var tmp6779) (reg r11))
   '(movq (var tmp6778) (deref r11 8))
   '(movq (int 0) (var void6782))
   '(movq (var tmp6779) (reg r11))
   '(movq (var x6757) (deref r11 16))
   '(movq (int 0) (var void6783))
   '(movq (var tmp6779) (reg r11))
   '(movq (var y6758) (deref r11 24))
   '(movq (int 0) (var void6784))
   '(movq (var tmp6779) (reg rax)))
  (list
   'define
   '(lambda6762)
   2
   (list
    '(fvs6763 z6759 x6757 y6758 tmp6780 tmp6781)
    0
    (hash
     'r11
     (set 'x6757 'z6759)
     'z6759
     (set 'r11 'tmp6780 'x6757 'y6758 'fvs6763)
     'fvs6763
     (set 'rsi 'x6757 'z6759)
     'x6757
     (set 'r11 'tmp6780 'y6758 'z6759 'fvs6763)
     'y6758
     (set 'x6757 'z6759)
     'rsi
     (set 'fvs6763)
     'tmp6781
     (set 'tmp6780)
     'tmp6780
     (set 'tmp6781 'x6757 'z6759))
    (hash
     'y6758
     (set)
     'tmp6781
     (set)
     'tmp6780
     (set)
     'fvs6763
     (set)
     'z6759
     (set)
     'x6757
     (set)))
   '(movq (reg rdi) (var fvs6763))
   '(movq (reg rsi) (var z6759))
   '(movq (var fvs6763) (reg r11))
   '(movq (deref r11 16) (var x6757))
   '(movq (var fvs6763) (reg r11))
   '(movq (deref r11 24) (var y6758))
   '(movq (var y6758) (var tmp6780))
   '(addq (var z6759) (var tmp6780))
   '(movq (var x6757) (var tmp6781))
   '(addq (var tmp6780) (var tmp6781))
   '(movq (var tmp6781) (reg rax))))
 '(movq (int 16384) (reg rdi))
 '(movq (int 16) (reg rsi))
 '(callq initialize)
 '(movq (global-value rootstack_begin) (reg r15))
 '(leaq (function-ref f6756) (var tmp6769))
 '(movq (global-value free_ptr) (var end-data6789))
 '(addq (int 16) (var end-data6789))
 '(cmpq (global-value fromspace_end) (var end-data6789))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6790))
 '(if (eq? (int 0) (var lt6790))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
 '(movq (global-value free_ptr) (var app6765))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6765) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6765) (reg r11))
 '(movq (var tmp6769) (deref r11 8))
 '(movq (int 0) (var void6785))
 '(movq (var app6765) (reg r11))
 '(movq (deref r11 8) (var tmp6770))
 '(movq (var app6765) (reg rdi))
 '(movq (int 5) (reg rsi))
 '(indirect-callq (var tmp6770))
 '(movq (reg rax) (var g6760))
 '(leaq (function-ref f6756) (var tmp6771))
 '(movq (global-value free_ptr) (var end-data6791))
 '(addq (int 16) (var end-data6791))
 '(cmpq (global-value fromspace_end) (var end-data6791))
 '(set l (byte-reg al))
 '(movzbq (byte-reg al) (var lt6792))
 '(if (eq? (int 0) (var lt6792))
    ((movq (var g6760) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (var g6760)))
    ())
 '(movq (global-value free_ptr) (var app6766))
 '(addq (int 16) (global-value free_ptr))
 '(movq (var app6766) (reg r11))
 '(movq (int 3) (deref r11 0))
 '(movq (var app6766) (reg r11))
 '(movq (var tmp6771) (deref r11 8))
 '(movq (int 0) (var void6786))
 '(movq (var app6766) (reg r11))
 '(movq (deref r11 8) (var tmp6772))
 '(movq (var g6760) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6766) (reg rdi))
 '(movq (int 3) (reg rsi))
 '(indirect-callq (var tmp6772))
 '(movq (reg rax) (var h6761))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var g6760))
 '(movq (var g6760) (var app6767))
 '(movq (var app6767) (reg r11))
 '(movq (deref r11 8) (var tmp6773))
 '(movq (var h6761) (deref r15 0))
 '(addq (int 8) (reg r15))
 '(movq (var app6767) (reg rdi))
 '(movq (int 11) (reg rsi))
 '(indirect-callq (var tmp6773))
 '(movq (reg rax) (var tmp6774))
 '(subq (int 8) (reg r15))
 '(movq (deref r15 0) (var h6761))
 '(movq (var h6761) (var app6768))
 '(movq (var app6768) (reg r11))
 '(movq (deref r11 8) (var tmp6775))
 '(movq (var app6768) (reg rdi))
 '(movq (int 15) (reg rsi))
 '(indirect-callq (var tmp6775))
 '(movq (reg rax) (var tmp6776))
 '(movq (var tmp6774) (var tmp6777))
 '(addq (var tmp6776) (var tmp6777))
 '(movq (var tmp6777) (reg rax)))


coloring @ register_allocator.rkt:220
(cons v c):
'(x6757 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6778 . 8)


coloring @ register_allocator.rkt:220
(cons v c):
'(y6758 . 9)


coloring @ register_allocator.rkt:220
(cons v c):
'(lt6788 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6779 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(end-data6787 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6782 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(fvs6764 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6783 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6784 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(fvs6763 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(x6757 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(z6759 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6780 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(y6758 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6781 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6769 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6771 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6774 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6773 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(g6760 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6772 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(h6761 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(app6766 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6775 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(app6767 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(app6765 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6770 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(app6768 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6786 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(lt6790 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(lt6792 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(end-data6791 . 2)


coloring @ register_allocator.rkt:220
(cons v c):
'(end-data6789 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(void6785 . 0)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6776 . 1)


coloring @ register_allocator.rkt:220
(cons v c):
'(tmp6777 . 0)


running pass: allocate registers @ utilities.rkt:314
new-p:
'(program
  0
  (type Integer)
  (defines
   (define (f6756)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r13))
     (leaq (function-ref lambda6762) (reg r12))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (if (eq? (int 0) (reg rcx))
       ((movq (reg r15) (reg rdi)) (movq (int 32) (reg rsi)) (callq collect))
       ())
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6762)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (movq (reg rbx) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (movq (reg rcx) (reg rcx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6756) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (if (eq? (int 0) (reg rcx))
    ((movq (reg r15) (reg rdi)) (movq (int 16) (reg rsi)) (callq collect))
    ())
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6756) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (if (eq? (int 0) (reg rdx))
    ((movq (reg rcx) (deref r15 0))
     (addq (int 8) (reg r15))
     (movq (reg r15) (reg rdi))
     (movq (int 16) (reg rsi))
     (callq collect)
     (subq (int 8) (reg r15))
     (movq (deref r15 0) (reg rcx)))
    ())
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: lower conditionals @ utilities.rkt:314
new-p:
'(program
  0
  (type Integer)
  (defines
   (define (f6756)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r13))
     (leaq (function-ref lambda6762) (reg r12))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (cmpq (int 0) (reg rcx))
     (jmp-if e then6793)
     (jmp if_end6794)
     (label then6793)
     (movq (reg r15) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (label if_end6794)
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6762)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (movq (reg rbx) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (movq (reg rcx) (reg rcx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6756) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (jmp-if e then6795)
  (jmp if_end6796)
  (label then6795)
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (label if_end6796)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6756) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (jmp-if e then6797)
  (jmp if_end6798)
  (label then6797)
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (label if_end6798)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (movq (reg rbx) (reg rbx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: patch instructions @ utilities.rkt:314
new-p:
'(program
  0
  (type Integer)
  (defines
   (define (f6756)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rbx))
     (movq (int 4) (reg r13))
     (leaq (function-ref lambda6762) (reg r12))
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (reg rcx))
     (cmpq (global-value fromspace_end) (reg rcx))
     (set l (byte-reg al))
     (movzbq (byte-reg al) (reg rcx))
     (cmpq (int 0) (reg rcx))
     (jmp-if e then6793)
     (jmp if_end6794)
     (label then6793)
     (movq (reg r15) (reg rdi))
     (movq (int 32) (reg rsi))
     (callq collect)
     (label if_end6794)
     (movq (global-value free_ptr) (reg rcx))
     (addq (int 32) (global-value free_ptr))
     (movq (reg rcx) (reg r11))
     (movq (int 7) (deref r11 0))
     (movq (reg rcx) (reg r11))
     (movq (reg r12) (deref r11 8))
     (movq (int 0) (reg rdx))
     (movq (reg rcx) (reg r11))
     (movq (reg rbx) (deref r11 16))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg r11))
     (movq (reg r13) (deref r11 24))
     (movq (int 0) (reg rbx))
     (movq (reg rcx) (reg rax)))
   (define (lambda6762)
     2
     0
     (movq (reg rdi) (reg rbx))
     (movq (reg rsi) (reg rdx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 16) (reg rcx))
     (movq (reg rbx) (reg r11))
     (movq (deref r11 24) (reg rbx))
     (addq (reg rdx) (reg rbx))
     (addq (reg rbx) (reg rcx))
     (movq (reg rcx) (reg rax))))
  (movq (int 16384) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq initialize)
  (movq (global-value rootstack_begin) (reg r15))
  (leaq (function-ref f6756) (reg rbx))
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (reg rcx))
  (cmpq (global-value fromspace_end) (reg rcx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rcx))
  (cmpq (int 0) (reg rcx))
  (jmp-if e then6795)
  (jmp if_end6796)
  (label then6795)
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (label if_end6796)
  (movq (global-value free_ptr) (reg rcx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rcx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rcx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (reg rdi))
  (movq (int 5) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rcx))
  (leaq (function-ref f6756) (reg rbx))
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (reg rdx))
  (cmpq (global-value fromspace_end) (reg rdx))
  (set l (byte-reg al))
  (movzbq (byte-reg al) (reg rdx))
  (cmpq (int 0) (reg rdx))
  (jmp-if e then6797)
  (jmp if_end6798)
  (label then6797)
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg r15) (reg rdi))
  (movq (int 16) (reg rsi))
  (callq collect)
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (label if_end6798)
  (movq (global-value free_ptr) (reg rdx))
  (addq (int 16) (global-value free_ptr))
  (movq (reg rdx) (reg r11))
  (movq (int 3) (deref r11 0))
  (movq (reg rdx) (reg r11))
  (movq (reg rbx) (deref r11 8))
  (movq (int 0) (reg rbx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rcx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rdx) (reg rdi))
  (movq (int 3) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rdx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rcx))
  (movq (reg rcx) (reg r11))
  (movq (deref r11 8) (reg rbx))
  (movq (reg rdx) (deref r15 0))
  (addq (int 8) (reg r15))
  (movq (reg rcx) (reg rdi))
  (movq (int 11) (reg rsi))
  (indirect-callq (reg rbx))
  (movq (reg rax) (reg rbx))
  (subq (int 8) (reg r15))
  (movq (deref r15 0) (reg rdx))
  (movq (reg rdx) (reg r11))
  (movq (deref r11 8) (reg rcx))
  (movq (reg rdx) (reg rdi))
  (movq (int 15) (reg rsi))
  (indirect-callq (reg rcx))
  (movq (reg rax) (reg rcx))
  (addq (reg rcx) (reg rbx))
  (movq (reg rbx) (reg rax)))


running pass: print x86 @ utilities.rkt:314
new-p:
	.globl f6756
f6756:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$0, %rsp

	movq	%rdi, %rbx
	movq	%rsi, %rbx
	movq	$4, %r13
	leaq	lambda6762(%rip), %r12
	movq	free_ptr(%rip), %rcx
	addq	$32, %rcx
	cmpq	fromspace_end(%rip), %rcx
	setl	%al
	movzbq	%al, %rcx
	cmpq	$0, %rcx
	je then6793
	jmp if_end6794
then6793:
	movq	%r15, %rdi
	movq	$32, %rsi
	callq	collect
if_end6794:
	movq	free_ptr(%rip), %rcx
	addq	$32, free_ptr(%rip)
	movq	%rcx, %r11
	movq	$7, 0(%r11)
	movq	%rcx, %r11
	movq	%r12, 8(%r11)
	movq	$0, %rdx
	movq	%rcx, %r11
	movq	%rbx, 16(%r11)
	movq	$0, %rbx
	movq	%rcx, %r11
	movq	%r13, 24(%r11)
	movq	$0, %rbx
	movq	%rcx, %rax

	addq	$0, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	retq
	.globl lambda6762
lambda6762:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$0, %rsp

	movq	%rdi, %rbx
	movq	%rsi, %rdx
	movq	%rbx, %r11
	movq	16(%r11), %rcx
	movq	%rbx, %r11
	movq	24(%r11), %rbx
	addq	%rdx, %rbx
	addq	%rbx, %rcx
	movq	%rcx, %rax

	addq	$0, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	retq

	.globl main
main:
	pushq	%rbp
	movq	%rsp, %rbp
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$0, %rsp

	movq	$16384, %rdi
	movq	$16, %rsi
	callq	initialize
	movq	rootstack_begin(%rip), %r15
	leaq	f6756(%rip), %rbx
	movq	free_ptr(%rip), %rcx
	addq	$16, %rcx
	cmpq	fromspace_end(%rip), %rcx
	setl	%al
	movzbq	%al, %rcx
	cmpq	$0, %rcx
	je then6795
	jmp if_end6796
then6795:
	movq	%r15, %rdi
	movq	$16, %rsi
	callq	collect
if_end6796:
	movq	free_ptr(%rip), %rcx
	addq	$16, free_ptr(%rip)
	movq	%rcx, %r11
	movq	$3, 0(%r11)
	movq	%rcx, %r11
	movq	%rbx, 8(%r11)
	movq	$0, %rbx
	movq	%rcx, %r11
	movq	8(%r11), %rbx
	movq	%rcx, %rdi
	movq	$5, %rsi
	callq	*%rbx
	movq	%rax, %rcx
	leaq	f6756(%rip), %rbx
	movq	free_ptr(%rip), %rdx
	addq	$16, %rdx
	cmpq	fromspace_end(%rip), %rdx
	setl	%al
	movzbq	%al, %rdx
	cmpq	$0, %rdx
	je then6797
	jmp if_end6798
then6797:
	movq	%rcx, 0(%r15)
	addq	$8, %r15
	movq	%r15, %rdi
	movq	$16, %rsi
	callq	collect
	subq	$8, %r15
	movq	0(%r15), %rcx
if_end6798:
	movq	free_ptr(%rip), %rdx
	addq	$16, free_ptr(%rip)
	movq	%rdx, %r11
	movq	$3, 0(%r11)
	movq	%rdx, %r11
	movq	%rbx, 8(%r11)
	movq	$0, %rbx
	movq	%rdx, %r11
	movq	8(%r11), %rbx
	movq	%rcx, 0(%r15)
	addq	$8, %r15
	movq	%rdx, %rdi
	movq	$3, %rsi
	callq	*%rbx
	movq	%rax, %rdx
	subq	$8, %r15
	movq	0(%r15), %rcx
	movq	%rcx, %r11
	movq	8(%r11), %rbx
	movq	%rdx, 0(%r15)
	addq	$8, %r15
	movq	%rcx, %rdi
	movq	$11, %rsi
	callq	*%rbx
	movq	%rax, %rbx
	subq	$8, %r15
	movq	0(%r15), %rdx
	movq	%rdx, %r11
	movq	8(%r11), %rcx
	movq	%rdx, %rdi
	movq	$15, %rsi
	callq	*%rcx
	movq	%rax, %rcx
	addq	%rcx, %rbx
	movq	%rbx, %rax

	movq	%rax, %rdi
	callq	print_int
	movq	$0, %rax
	addq	$0, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rbp
	retq


s4_8 
tests passed
